{"ast":null,"code":"import { _registerComponent, registerVersion, _getProvider, getApp, _removeServiceInstance, SDK_VERSION } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { Logger, LogLevel } from '@firebase/logger';\nimport { FirebaseError, getDefaultEmulatorHostnameAndPort, createMockUserToken, getModularInstance, deepEqual } from '@firebase/util';\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Simple wrapper around a nullable UID. Mostly exists to make code more\n * readable.\n */\n\nclass d {\n  constructor(t) {\n    this.uid = t;\n  }\n\n  isAuthenticated() {\n    return null != this.uid;\n  }\n  /**\n   * Returns a key representing this user, suitable for inclusion in a\n   * dictionary.\n   */\n\n\n  toKey() {\n    return this.isAuthenticated() ? \"uid:\" + this.uid : \"anonymous-user\";\n  }\n\n  isEqual(t) {\n    return t.uid === this.uid;\n  }\n\n}\n/** A user with a null UID. */\n\n\nd.UNAUTHENTICATED = new d(null), // TODO(mikelehen): Look into getting a proper uid-equivalent for\n// non-FirebaseAuth providers.\nd.GOOGLE_CREDENTIALS = new d(\"google-credentials-uid\"), d.FIRST_PARTY = new d(\"first-party-uid\"), d.MOCK_USER = new d(\"mock-user\");\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nlet w = \"9.23.0\";\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst m = new Logger(\"@firebase/firestore\");\n/**\n * Sets the verbosity of Cloud Firestore logs (debug, error, or silent).\n *\n * @param logLevel - The verbosity you set for activity and error logging. Can\n *   be any of the following values:\n *\n *   <ul>\n *     <li>`debug` for the most verbose logging level, primarily for\n *     debugging.</li>\n *     <li>`error` to log errors only.</li>\n *     <li><code>`silent` to turn off logging.</li>\n *   </ul>\n */\n\nfunction p(t) {\n  m.setLogLevel(t);\n}\n\nfunction y(t) {\n  if (m.logLevel <= LogLevel.DEBUG) {\n    for (var _len = arguments.length, e = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      e[_key - 1] = arguments[_key];\n    }\n\n    const n = e.map(v);\n    m.debug(`Firestore (${w}): ${t}`, ...n);\n  }\n}\n\nfunction g(t) {\n  if (m.logLevel <= LogLevel.ERROR) {\n    for (var _len2 = arguments.length, e = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      e[_key2 - 1] = arguments[_key2];\n    }\n\n    const n = e.map(v);\n    m.error(`Firestore (${w}): ${t}`, ...n);\n  }\n}\n/**\n * @internal\n */\n\n\nfunction _(t) {\n  if (m.logLevel <= LogLevel.WARN) {\n    for (var _len3 = arguments.length, e = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      e[_key3 - 1] = arguments[_key3];\n    }\n\n    const n = e.map(v);\n    m.warn(`Firestore (${w}): ${t}`, ...n);\n  }\n}\n/**\n * Converts an additional log parameter to a string representation.\n */\n\n\nfunction v(t) {\n  if (\"string\" == typeof t) return t;\n\n  try {\n    return e = t, JSON.stringify(e);\n  } catch (e) {\n    // Converting to JSON failed, just log the object directly\n    return t;\n  }\n  /**\n  * @license\n  * Copyright 2020 Google LLC\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n\n  /** Formats an object as a JSON string, suitable for logging. */\n\n\n  var e;\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Unconditionally fails, throwing an Error with the given message.\n * Messages are stripped in production builds.\n *\n * Returns `never` and can be used in expressions:\n * @example\n * let futureVar = fail('not implemented yet');\n */\n\n\nfunction b() {\n  let t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"Unexpected state\";\n  // Log the failure in addition to throw an exception, just in case the\n  // exception is swallowed.\n  const e = `FIRESTORE (${w}) INTERNAL ASSERTION FAILED: ` + t; // NOTE: We don't use FirestoreError here because these are internal failures\n  // that cannot be handled by the user. (Also it would create a circular\n  // dependency between the error and assert modules which doesn't work.)\n\n  throw g(e), new Error(e);\n}\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n *\n * Messages are stripped in production builds.\n */\n\n\nfunction E(t, e) {\n  t || b();\n}\n/**\n * Casts `obj` to `T`. In non-production builds, verifies that `obj` is an\n * instance of `T` before casting.\n */\n\n\nfunction I(t, // eslint-disable-next-line @typescript-eslint/no-explicit-any\ne) {\n  return t;\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nconst T = \"ok\",\n      A = \"cancelled\",\n      R = \"unknown\",\n      P = \"invalid-argument\",\n      V = \"deadline-exceeded\",\n      $ = \"not-found\",\n      N = \"already-exists\",\n      D = \"permission-denied\",\n      F = \"unauthenticated\",\n      x = \"resource-exhausted\",\n      S = \"failed-precondition\",\n      q = \"aborted\",\n      O = \"out-of-range\",\n      k = \"unimplemented\",\n      C = \"internal\",\n      M = \"unavailable\",\n      L = \"data-loss\";\n/** An error returned by a Firestore operation. */\n\nclass U extends FirebaseError {\n  /** @hideconstructor */\n  constructor(\n  /**\n   * The backend error code associated with this error.\n   */\n  t,\n  /**\n   * A custom error description.\n   */\n  e) {\n    super(t, e), this.code = t, this.message = e, // HACK: We write a toString property directly because Error is not a real\n    // class and so inheritance does not work correctly. We could alternatively\n    // do the same \"back-door inheritance\" trick that FirebaseError does.\n    this.toString = () => `${this.name}: [code=${this.code}]: ${this.message}`;\n  }\n\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nclass j {\n  constructor() {\n    this.promise = new Promise((t, e) => {\n      this.resolve = t, this.reject = e;\n    });\n  }\n\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nclass B {\n  constructor(t, e) {\n    this.user = e, this.type = \"OAuth\", this.headers = new Map(), this.headers.set(\"Authorization\", `Bearer ${t}`);\n  }\n\n}\n/**\n * A CredentialsProvider that always yields an empty token.\n * @internal\n */\n\n\nclass Q {\n  getToken() {\n    return Promise.resolve(null);\n  }\n\n  invalidateToken() {}\n\n  start(t, e) {\n    // Fire with initial user.\n    t.enqueueRetryable(() => e(d.UNAUTHENTICATED));\n  }\n\n  shutdown() {}\n\n}\n/**\n * A CredentialsProvider that always returns a constant token. Used for\n * emulator token mocking.\n */\n\n\nclass z {\n  constructor(t) {\n    this.token = t,\n    /**\n     * Stores the listener registered with setChangeListener()\n     * This isn't actually necessary since the UID never changes, but we use this\n     * to verify the listen contract is adhered to in tests.\n     */\n    this.changeListener = null;\n  }\n\n  getToken() {\n    return Promise.resolve(this.token);\n  }\n\n  invalidateToken() {}\n\n  start(t, e) {\n    this.changeListener = e, // Fire with initial user.\n    t.enqueueRetryable(() => e(this.token.user));\n  }\n\n  shutdown() {\n    this.changeListener = null;\n  }\n\n}\n/** Credential provider for the Lite SDK. */\n\n\nclass W {\n  constructor(t) {\n    this.auth = null, t.onInit(t => {\n      this.auth = t;\n    });\n  }\n\n  getToken() {\n    return this.auth ? this.auth.getToken().then(t => t ? (E(\"string\" == typeof t.accessToken), new B(t.accessToken, new d(this.auth.getUid()))) : null) : Promise.resolve(null);\n  }\n\n  invalidateToken() {}\n\n  start(t, e) {}\n\n  shutdown() {}\n\n}\n/*\n * FirstPartyToken provides a fresh token each time its value\n * is requested, because if the token is too old, requests will be rejected.\n * Technically this may no longer be necessary since the SDK should gracefully\n * recover from unauthenticated errors (see b/33147818 for context), but it's\n * safer to keep the implementation as-is.\n */\n\n\nclass G {\n  constructor(t, e, n) {\n    this.t = t, this.i = e, this.o = n, this.type = \"FirstParty\", this.user = d.FIRST_PARTY, this.u = new Map();\n  }\n  /**\n   * Gets an authorization token, using a provided factory function, or return\n   * null.\n   */\n\n\n  h() {\n    return this.o ? this.o() : null;\n  }\n\n  get headers() {\n    this.u.set(\"X-Goog-AuthUser\", this.t); // Use array notation to prevent minification\n\n    const t = this.h();\n    return t && this.u.set(\"Authorization\", t), this.i && this.u.set(\"X-Goog-Iam-Authorization-Token\", this.i), this.u;\n  }\n\n}\n/*\n * Provides user credentials required for the Firestore JavaScript SDK\n * to authenticate the user, using technique that is only available\n * to applications hosted by Google.\n */\n\n\nclass K {\n  constructor(t, e, n) {\n    this.t = t, this.i = e, this.o = n;\n  }\n\n  getToken() {\n    return Promise.resolve(new G(this.t, this.i, this.o));\n  }\n\n  start(t, e) {\n    // Fire with initial uid.\n    t.enqueueRetryable(() => e(d.FIRST_PARTY));\n  }\n\n  shutdown() {}\n\n  invalidateToken() {}\n\n}\n\nclass Y {\n  constructor(t) {\n    this.value = t, this.type = \"AppCheck\", this.headers = new Map(), t && t.length > 0 && this.headers.set(\"x-firebase-appcheck\", this.value);\n  }\n\n}\n/** AppCheck token provider for the Lite SDK. */\n\n\nclass H {\n  constructor(t) {\n    this.l = t, this.appCheck = null, t.onInit(t => {\n      this.appCheck = t;\n    });\n  }\n\n  getToken() {\n    return this.appCheck ? this.appCheck.getToken().then(t => t ? (E(\"string\" == typeof t.token), new Y(t.token)) : null) : Promise.resolve(null);\n  }\n\n  invalidateToken() {}\n\n  start(t, e) {}\n\n  shutdown() {}\n\n}\n/**\n * Builds a CredentialsProvider depending on the type of\n * the credentials passed in.\n */\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nclass J {\n  /**\n   * Constructs a DatabaseInfo using the provided host, databaseId and\n   * persistenceKey.\n   *\n   * @param databaseId - The database to use.\n   * @param appId - The Firebase App Id.\n   * @param persistenceKey - A unique identifier for this Firestore's local\n   * storage (used in conjunction with the databaseId).\n   * @param host - The Firestore backend host to connect to.\n   * @param ssl - Whether to use SSL when connecting.\n   * @param forceLongPolling - Whether to use the forceLongPolling option\n   * when using WebChannel as the network transport.\n   * @param autoDetectLongPolling - Whether to use the detectBufferingProxy\n   * option when using WebChannel as the network transport.\n   * @param longPollingOptions Options that configure long-polling.\n   * @param useFetchStreams Whether to use the Fetch API instead of\n   * XMLHTTPRequest\n   */\n  constructor(t, e, n, r, s, i, o, u, c) {\n    this.databaseId = t, this.appId = e, this.persistenceKey = n, this.host = r, this.ssl = s, this.forceLongPolling = i, this.autoDetectLongPolling = o, this.longPollingOptions = u, this.useFetchStreams = c;\n  }\n\n}\n/** The default database name for a project. */\n\n/**\n * Represents the database ID a Firestore client is associated with.\n * @internal\n */\n\n\nclass X {\n  constructor(t, e) {\n    this.projectId = t, this.database = e || \"(default)\";\n  }\n\n  static empty() {\n    return new X(\"\", \"\");\n  }\n\n  get isDefaultDatabase() {\n    return \"(default)\" === this.database;\n  }\n\n  isEqual(t) {\n    return t instanceof X && t.projectId === this.projectId && t.database === this.database;\n  }\n\n}\n/**\n * Path represents an ordered sequence of string segments.\n */\n\n\nclass Z {\n  constructor(t, e, n) {\n    void 0 === e ? e = 0 : e > t.length && b(), void 0 === n ? n = t.length - e : n > t.length - e && b(), this.segments = t, this.offset = e, this.len = n;\n  }\n\n  get length() {\n    return this.len;\n  }\n\n  isEqual(t) {\n    return 0 === Z.comparator(this, t);\n  }\n\n  child(t) {\n    const e = this.segments.slice(this.offset, this.limit());\n    return t instanceof Z ? t.forEach(t => {\n      e.push(t);\n    }) : e.push(t), this.construct(e);\n  }\n  /** The index of one past the last segment of the path. */\n\n\n  limit() {\n    return this.offset + this.length;\n  }\n\n  popFirst(t) {\n    return t = void 0 === t ? 1 : t, this.construct(this.segments, this.offset + t, this.length - t);\n  }\n\n  popLast() {\n    return this.construct(this.segments, this.offset, this.length - 1);\n  }\n\n  firstSegment() {\n    return this.segments[this.offset];\n  }\n\n  lastSegment() {\n    return this.get(this.length - 1);\n  }\n\n  get(t) {\n    return this.segments[this.offset + t];\n  }\n\n  isEmpty() {\n    return 0 === this.length;\n  }\n\n  isPrefixOf(t) {\n    if (t.length < this.length) return !1;\n\n    for (let e = 0; e < this.length; e++) if (this.get(e) !== t.get(e)) return !1;\n\n    return !0;\n  }\n\n  isImmediateParentOf(t) {\n    if (this.length + 1 !== t.length) return !1;\n\n    for (let e = 0; e < this.length; e++) if (this.get(e) !== t.get(e)) return !1;\n\n    return !0;\n  }\n\n  forEach(t) {\n    for (let e = this.offset, n = this.limit(); e < n; e++) t(this.segments[e]);\n  }\n\n  toArray() {\n    return this.segments.slice(this.offset, this.limit());\n  }\n\n  static comparator(t, e) {\n    const n = Math.min(t.length, e.length);\n\n    for (let r = 0; r < n; r++) {\n      const n = t.get(r),\n            s = e.get(r);\n      if (n < s) return -1;\n      if (n > s) return 1;\n    }\n\n    return t.length < e.length ? -1 : t.length > e.length ? 1 : 0;\n  }\n\n}\n/**\n * A slash-separated path for navigating resources (documents and collections)\n * within Firestore.\n *\n * @internal\n */\n\n\nclass tt extends Z {\n  construct(t, e, n) {\n    return new tt(t, e, n);\n  }\n\n  canonicalString() {\n    // NOTE: The client is ignorant of any path segments containing escape\n    // sequences (e.g. __id123__) and just passes them through raw (they exist\n    // for legacy reasons and should not be used frequently).\n    return this.toArray().join(\"/\");\n  }\n\n  toString() {\n    return this.canonicalString();\n  }\n  /**\n   * Creates a resource path from the given slash-delimited string. If multiple\n   * arguments are provided, all components are combined. Leading and trailing\n   * slashes from all components are ignored.\n   */\n\n\n  static fromString() {\n    // NOTE: The client is ignorant of any path segments containing escape\n    // sequences (e.g. __id123__) and just passes them through raw (they exist\n    // for legacy reasons and should not be used frequently).\n    const e = [];\n\n    for (var _len4 = arguments.length, t = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      t[_key4] = arguments[_key4];\n    }\n\n    for (const n of t) {\n      if (n.indexOf(\"//\") >= 0) throw new U(P, `Invalid segment (${n}). Paths must not contain // in them.`); // Strip leading and traling slashed.\n\n      e.push(...n.split(\"/\").filter(t => t.length > 0));\n    }\n\n    return new tt(e);\n  }\n\n  static emptyPath() {\n    return new tt([]);\n  }\n\n}\n\nconst et = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n/**\n * A dot-separated path for navigating sub-objects within a document.\n * @internal\n */\n\nclass nt extends Z {\n  construct(t, e, n) {\n    return new nt(t, e, n);\n  }\n  /**\n   * Returns true if the string could be used as a segment in a field path\n   * without escaping.\n   */\n\n\n  static isValidIdentifier(t) {\n    return et.test(t);\n  }\n\n  canonicalString() {\n    return this.toArray().map(t => (t = t.replace(/\\\\/g, \"\\\\\\\\\").replace(/`/g, \"\\\\`\"), nt.isValidIdentifier(t) || (t = \"`\" + t + \"`\"), t)).join(\".\");\n  }\n\n  toString() {\n    return this.canonicalString();\n  }\n  /**\n   * Returns true if this field references the key of a document.\n   */\n\n\n  isKeyField() {\n    return 1 === this.length && \"__name__\" === this.get(0);\n  }\n  /**\n   * The field designating the key of a document.\n   */\n\n\n  static keyField() {\n    return new nt([\"__name__\"]);\n  }\n  /**\n   * Parses a field string from the given server-formatted string.\n   *\n   * - Splitting the empty string is not allowed (for now at least).\n   * - Empty segments within the string (e.g. if there are two consecutive\n   *   separators) are not allowed.\n   *\n   * TODO(b/37244157): we should make this more strict. Right now, it allows\n   * non-identifier path components, even if they aren't escaped.\n   */\n\n\n  static fromServerFormat(t) {\n    const e = [];\n    let n = \"\",\n        r = 0;\n\n    const s = () => {\n      if (0 === n.length) throw new U(P, `Invalid field path (${t}). Paths must not be empty, begin with '.', end with '.', or contain '..'`);\n      e.push(n), n = \"\";\n    };\n\n    let i = !1;\n\n    for (; r < t.length;) {\n      const e = t[r];\n\n      if (\"\\\\\" === e) {\n        if (r + 1 === t.length) throw new U(P, \"Path has trailing escape character: \" + t);\n        const e = t[r + 1];\n        if (\"\\\\\" !== e && \".\" !== e && \"`\" !== e) throw new U(P, \"Path has invalid escape sequence: \" + t);\n        n += e, r += 2;\n      } else \"`\" === e ? (i = !i, r++) : \".\" !== e || i ? (n += e, r++) : (s(), r++);\n    }\n\n    if (s(), i) throw new U(P, \"Unterminated ` in path: \" + t);\n    return new nt(e);\n  }\n\n  static emptyPath() {\n    return new nt([]);\n  }\n\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @internal\n */\n\n\nclass rt {\n  constructor(t) {\n    this.path = t;\n  }\n\n  static fromPath(t) {\n    return new rt(tt.fromString(t));\n  }\n\n  static fromName(t) {\n    return new rt(tt.fromString(t).popFirst(5));\n  }\n\n  static empty() {\n    return new rt(tt.emptyPath());\n  }\n\n  get collectionGroup() {\n    return this.path.popLast().lastSegment();\n  }\n  /** Returns true if the document is in the specified collectionId. */\n\n\n  hasCollectionId(t) {\n    return this.path.length >= 2 && this.path.get(this.path.length - 2) === t;\n  }\n  /** Returns the collection group (i.e. the name of the parent collection) for this key. */\n\n\n  getCollectionGroup() {\n    return this.path.get(this.path.length - 2);\n  }\n  /** Returns the fully qualified path to the parent collection. */\n\n\n  getCollectionPath() {\n    return this.path.popLast();\n  }\n\n  isEqual(t) {\n    return null !== t && 0 === tt.comparator(this.path, t.path);\n  }\n\n  toString() {\n    return this.path.toString();\n  }\n\n  static comparator(t, e) {\n    return tt.comparator(t.path, e.path);\n  }\n\n  static isDocumentKey(t) {\n    return t.length % 2 == 0;\n  }\n  /**\n   * Creates and returns a new document key with the given segments.\n   *\n   * @param segments - The segments of the path to the document\n   * @returns A new instance of DocumentKey\n   */\n\n\n  static fromSegments(t) {\n    return new rt(new tt(t.slice()));\n  }\n\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nfunction st(t, e, n) {\n  if (!n) throw new U(P, `Function ${t}() cannot be called with an empty ${e}.`);\n}\n/**\n * Validates that two boolean options are not set at the same time.\n * @internal\n */\n\n/**\n * Validates that `path` refers to a document (indicated by the fact it contains\n * an even numbers of segments).\n */\n\n\nfunction it(t) {\n  if (!rt.isDocumentKey(t)) throw new U(P, `Invalid document reference. Document references must have an even number of segments, but ${t} has ${t.length}.`);\n}\n/**\n * Validates that `path` refers to a collection (indicated by the fact it\n * contains an odd numbers of segments).\n */\n\n\nfunction ot(t) {\n  if (rt.isDocumentKey(t)) throw new U(P, `Invalid collection reference. Collection references must have an odd number of segments, but ${t} has ${t.length}.`);\n}\n/**\n * Returns true if it's a non-null object without a custom prototype\n * (i.e. excludes Array, Date, etc.).\n */\n\n/** Returns a string describing the type / value of the provided input. */\n\n\nfunction ut(t) {\n  if (void 0 === t) return \"undefined\";\n  if (null === t) return \"null\";\n  if (\"string\" == typeof t) return t.length > 20 && (t = `${t.substring(0, 20)}...`), JSON.stringify(t);\n  if (\"number\" == typeof t || \"boolean\" == typeof t) return \"\" + t;\n\n  if (\"object\" == typeof t) {\n    if (t instanceof Array) return \"an array\";\n    {\n      const e =\n      /** try to get the constructor name for an object. */\n      function (t) {\n        if (t.constructor) return t.constructor.name;\n        return null;\n      }\n      /**\n      * Casts `obj` to `T`, optionally unwrapping Compat types to expose the\n      * underlying instance. Throws if  `obj` is not an instance of `T`.\n      *\n      * This cast is used in the Lite and Full SDK to verify instance types for\n      * arguments passed to the public API.\n      * @internal\n      */\n      (t);\n\n      return e ? `a custom ${e} object` : \"an object\";\n    }\n  }\n\n  return \"function\" == typeof t ? \"a function\" : b();\n}\n\nfunction ct(t, // eslint-disable-next-line @typescript-eslint/no-explicit-any\ne) {\n  if (\"_delegate\" in t && ( // Unwrap Compat types\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  t = t._delegate), !(t instanceof e)) {\n    if (e.name === t.constructor.name) throw new U(P, \"Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?\");\n    {\n      const n = ut(t);\n      throw new U(P, `Expected type '${e.name}', but it was: ${n}`);\n    }\n  }\n\n  return t;\n}\n\nfunction at(t, e) {\n  if (e <= 0) throw new U(P, `Function ${t}() requires a positive number, but it was: ${e}.`);\n}\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Compares two `ExperimentalLongPollingOptions` objects for equality.\n */\n\n/**\n * Creates and returns a new `ExperimentalLongPollingOptions` with the same\n * option values as the given instance.\n */\n\n\nfunction ht(t) {\n  const e = {};\n  return void 0 !== t.timeoutSeconds && (e.timeoutSeconds = t.timeoutSeconds), e;\n}\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The value returned from the most recent invocation of\n * `generateUniqueDebugId()`, or null if it has never been invoked.\n */\n\n\nlet lt = null;\n/**\n * Generates and returns an initial value for `lastUniqueDebugId`.\n *\n * The returned value is randomly selected from a range of integers that are\n * represented as 8 hexadecimal digits. This means that (within reason) any\n * numbers generated by incrementing the returned number by 1 will also be\n * represented by 8 hexadecimal digits. This leads to all \"IDs\" having the same\n * length when converted to a hexadecimal string, making reading logs containing\n * these IDs easier to follow. And since the return value is randomly selected\n * it will help to differentiate between logs from different executions.\n */\n\n/**\n * Generates and returns a unique ID as a hexadecimal string.\n *\n * The returned ID is intended to be used in debug logging messages to help\n * correlate log messages that may be spatially separated in the logs, but\n * logically related. For example, a network connection could include the same\n * \"debug ID\" string in all of its log messages to help trace a specific\n * connection over time.\n *\n * @return the 10-character generated ID (e.g. \"0xa1b2c3d4\").\n */\n\nfunction ft() {\n  return null === lt ? lt = 268435456 + Math.round(2147483648 * Math.random()) : lt++, \"0x\" + lt.toString(16);\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns whether a variable is either undefined or null.\n */\n\n\nfunction dt(t) {\n  return null == t;\n}\n/** Returns whether the value represents -0. */\n\n\nfunction wt(t) {\n  // Detect if the value is -0.0. Based on polyfill from\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n  return 0 === t && 1 / t == -1 / 0;\n}\n/**\n * Returns whether a value is an integer and in the safe integer range\n * @param value - The value to test for being an integer and in the safe range\n */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nconst mt = {\n  BatchGetDocuments: \"batchGet\",\n  Commit: \"commit\",\n  RunQuery: \"runQuery\",\n  RunAggregationQuery: \"runAggregationQuery\"\n};\n/**\n * Maps RPC names to the corresponding REST endpoint name.\n *\n * We use array notation to avoid mangling.\n */\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Error Codes describing the different ways GRPC can fail. These are copied\n * directly from GRPC's sources here:\n *\n * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n *\n * Important! The names of these identifiers matter because the string forms\n * are used for reverse lookups from the webchannel stream. Do NOT change the\n * names of these identifiers or change this into a const enum.\n */\n\nvar pt, yt;\n/**\n * Converts an HTTP Status Code to the equivalent error code.\n *\n * @param status - An HTTP Status Code, like 200, 404, 503, etc.\n * @returns The equivalent Code. Unknown status codes are mapped to\n *     Code.UNKNOWN.\n */\n\nfunction gt(t) {\n  if (void 0 === t) return g(\"RPC_ERROR\", \"HTTP error has no status\"), R; // The canonical error codes for Google APIs [1] specify mapping onto HTTP\n  // status codes but the mapping is not bijective. In each case of ambiguity\n  // this function chooses a primary error.\n  // [1]\n  // https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n\n  switch (t) {\n    case 200:\n      // OK\n      return T;\n\n    case 400:\n      // Bad Request\n      return S;\n    // Other possibilities based on the forward mapping\n    // return Code.INVALID_ARGUMENT;\n    // return Code.OUT_OF_RANGE;\n\n    case 401:\n      // Unauthorized\n      return F;\n\n    case 403:\n      // Forbidden\n      return D;\n\n    case 404:\n      // Not Found\n      return $;\n\n    case 409:\n      // Conflict\n      return q;\n    // Other possibilities:\n    // return Code.ALREADY_EXISTS;\n\n    case 416:\n      // Range Not Satisfiable\n      return O;\n\n    case 429:\n      // Too Many Requests\n      return x;\n\n    case 499:\n      // Client Closed Request\n      return A;\n\n    case 500:\n      // Internal Server Error\n      return R;\n    // Other possibilities:\n    // return Code.INTERNAL;\n    // return Code.DATA_LOSS;\n\n    case 501:\n      // Unimplemented\n      return k;\n\n    case 503:\n      // Service Unavailable\n      return M;\n\n    case 504:\n      // Gateway Timeout\n      return V;\n\n    default:\n      return t >= 200 && t < 300 ? T : t >= 400 && t < 500 ? S : t >= 500 && t < 600 ? C : R;\n  }\n}\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A Rest-based connection that relies on the native HTTP stack\n * (e.g. `fetch` or a polyfill).\n */\n\n\n(yt = pt || (pt = {}))[yt.OK = 0] = \"OK\", yt[yt.CANCELLED = 1] = \"CANCELLED\", yt[yt.UNKNOWN = 2] = \"UNKNOWN\", yt[yt.INVALID_ARGUMENT = 3] = \"INVALID_ARGUMENT\", yt[yt.DEADLINE_EXCEEDED = 4] = \"DEADLINE_EXCEEDED\", yt[yt.NOT_FOUND = 5] = \"NOT_FOUND\", yt[yt.ALREADY_EXISTS = 6] = \"ALREADY_EXISTS\", yt[yt.PERMISSION_DENIED = 7] = \"PERMISSION_DENIED\", yt[yt.UNAUTHENTICATED = 16] = \"UNAUTHENTICATED\", yt[yt.RESOURCE_EXHAUSTED = 8] = \"RESOURCE_EXHAUSTED\", yt[yt.FAILED_PRECONDITION = 9] = \"FAILED_PRECONDITION\", yt[yt.ABORTED = 10] = \"ABORTED\", yt[yt.OUT_OF_RANGE = 11] = \"OUT_OF_RANGE\", yt[yt.UNIMPLEMENTED = 12] = \"UNIMPLEMENTED\", yt[yt.INTERNAL = 13] = \"INTERNAL\", yt[yt.UNAVAILABLE = 14] = \"UNAVAILABLE\", yt[yt.DATA_LOSS = 15] = \"DATA_LOSS\";\n\nclass _t extends\n/**\n * Base class for all Rest-based connections to the backend (WebChannel and\n * HTTP).\n */\nclass {\n  constructor(t) {\n    this.databaseInfo = t, this.databaseId = t.databaseId;\n    const e = t.ssl ? \"https\" : \"http\";\n    this.m = e + \"://\" + t.host, this.p = \"projects/\" + this.databaseId.projectId + \"/databases/\" + this.databaseId.database + \"/documents\";\n  }\n\n  get g() {\n    // Both `invokeRPC()` and `invokeStreamingRPC()` use their `path` arguments to determine\n    // where to run the query, and expect the `request` to NOT specify the \"path\".\n    return !1;\n  }\n\n  v(t, e, n, r, s) {\n    const i = ft(),\n          o = this.I(t, e);\n    y(\"RestConnection\", `Sending RPC '${t}' ${i}:`, o, n);\n    const u = {};\n    return this.T(u, r, s), this.A(t, o, u, n).then(e => (y(\"RestConnection\", `Received RPC '${t}' ${i}: `, e), e), e => {\n      throw _(\"RestConnection\", `RPC '${t}' ${i} failed with error: `, e, \"url: \", o, \"request:\", n), e;\n    });\n  }\n\n  R(t, e, n, r, s, i) {\n    // The REST API automatically aggregates all of the streamed results, so we\n    // can just use the normal invoke() method.\n    return this.v(t, e, n, r, s);\n  }\n  /**\n   * Modifies the headers for a request, adding any authorization token if\n   * present and any additional headers for the request.\n   */\n\n\n  T(t, e, n) {\n    t[\"X-Goog-Api-Client\"] = \"gl-js/ fire/\" + w, // Content-Type: text/plain will avoid preflight requests which might\n    // mess with CORS and redirects by proxies. If we add custom headers\n    // we will need to change this code to potentially use the $httpOverwrite\n    // parameter supported by ESF to avoid triggering preflight requests.\n    t[\"Content-Type\"] = \"text/plain\", this.databaseInfo.appId && (t[\"X-Firebase-GMPID\"] = this.databaseInfo.appId), e && e.headers.forEach((e, n) => t[n] = e), n && n.headers.forEach((e, n) => t[n] = e);\n  }\n\n  I(t, e) {\n    const n = mt[t];\n    return `${this.m}/v1/${e}:${n}`;\n  }\n\n} {\n  /**\n   * @param databaseInfo - The connection info.\n   * @param fetchImpl - `fetch` or a Polyfill that implements the fetch API.\n   */\n  constructor(t, e) {\n    super(t), this.P = e;\n  }\n\n  V(t, e) {\n    throw new Error(\"Not supported by FetchConnection\");\n  }\n\n  async A(t, e, n, r) {\n    var s;\n    const i = JSON.stringify(r);\n    let o;\n\n    try {\n      o = await this.P(e, {\n        method: \"POST\",\n        headers: n,\n        body: i\n      });\n    } catch (t) {\n      const e = t;\n      throw new U(gt(e.status), \"Request failed with error: \" + e.statusText);\n    }\n\n    if (!o.ok) {\n      let t = await o.json();\n      Array.isArray(t) && (t = t[0]);\n      const e = null === (s = null == t ? void 0 : t.error) || void 0 === s ? void 0 : s.message;\n      throw new U(gt(o.status), `Request failed with error: ${null != e ? e : o.statusText}`);\n    }\n\n    return o.json();\n  }\n\n}\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Initializes the HTTP connection for the REST API. */\n\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Concrete implementation of the Aggregate type.\n */\n\n\nclass vt {\n  constructor(t, e, n) {\n    this.alias = t, this.$ = e, this.fieldPath = n;\n  }\n\n}\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Generates `nBytes` of random bytes.\n *\n * If `nBytes < 0` , an error will be thrown.\n */\n\n\nfunction bt(t) {\n  // Polyfills for IE and WebWorker by using `self` and `msCrypto` when `crypto` is not available.\n  const e = // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  \"undefined\" != typeof self && (self.crypto || self.msCrypto),\n        n = new Uint8Array(t);\n  if (e && \"function\" == typeof e.getRandomValues) e.getRandomValues(n);else // Falls back to Math.random\n    for (let e = 0; e < t; e++) n[e] = Math.floor(256 * Math.random());\n  return n;\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nclass Et {\n  static N() {\n    // Alphanumeric characters\n    const t = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\",\n          e = Math.floor(256 / t.length) * t.length; // The largest byte value that is a multiple of `char.length`.\n\n    let n = \"\";\n\n    for (; n.length < 20;) {\n      const r = bt(40);\n\n      for (let s = 0; s < r.length; ++s) // Only accept values that are [0, maxMultiple), this ensures they can\n      // be evenly mapped to indices of `chars` via a modulo operation.\n      n.length < 20 && r[s] < e && (n += t.charAt(r[s] % t.length));\n    }\n\n    return n;\n  }\n\n}\n\nfunction It(t, e) {\n  return t < e ? -1 : t > e ? 1 : 0;\n}\n/** Helper to compare arrays using isEqual(). */\n\n\nfunction Tt(t, e, n) {\n  return t.length === e.length && t.every((t, r) => n(t, e[r]));\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nfunction At(t) {\n  let e = 0;\n\n  for (const n in t) Object.prototype.hasOwnProperty.call(t, n) && e++;\n\n  return e;\n}\n\nfunction Rt(t, e) {\n  for (const n in t) Object.prototype.hasOwnProperty.call(t, n) && e(n, t[n]);\n}\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * An error encountered while decoding base64 string.\n */\n\n\nclass Pt extends Error {\n  constructor() {\n    super(...arguments), this.name = \"Base64DecodeError\";\n  }\n\n}\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Converts a Base64 encoded string to a binary string. */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Immutable class that represents a \"proto\" byte string.\n *\n * Proto byte strings can either be Base64-encoded strings or Uint8Arrays when\n * sent on the wire. This class abstracts away this differentiation by holding\n * the proto byte string in a common class that must be converted into a string\n * before being sent as a proto.\n * @internal\n */\n\n\nclass Vt {\n  constructor(t) {\n    this.binaryString = t;\n  }\n\n  static fromBase64String(t) {\n    const e = function (t) {\n      try {\n        return atob(t);\n      } catch (t) {\n        // Check that `DOMException` is defined before using it to avoid\n        // \"ReferenceError: Property 'DOMException' doesn't exist\" in react-native.\n        // (https://github.com/firebase/firebase-js-sdk/issues/7115)\n        throw \"undefined\" != typeof DOMException && t instanceof DOMException ? new Pt(\"Invalid base64 string: \" + t) : t;\n      }\n    }\n    /** Converts a binary string to a Base64 encoded string. */\n    (t);\n\n    return new Vt(e);\n  }\n\n  static fromUint8Array(t) {\n    // TODO(indexing); Remove the copy of the byte string here as this method\n    // is frequently called during indexing.\n    const e =\n    /**\n    * Helper function to convert an Uint8array to a binary string.\n    */\n    function (t) {\n      let e = \"\";\n\n      for (let n = 0; n < t.length; ++n) e += String.fromCharCode(t[n]);\n\n      return e;\n    }\n    /**\n    * Helper function to convert a binary string to an Uint8Array.\n    */\n    (t);\n\n    return new Vt(e);\n  }\n\n  [Symbol.iterator]() {\n    let t = 0;\n    return {\n      next: () => t < this.binaryString.length ? {\n        value: this.binaryString.charCodeAt(t++),\n        done: !1\n      } : {\n        value: void 0,\n        done: !0\n      }\n    };\n  }\n\n  toBase64() {\n    return t = this.binaryString, btoa(t);\n    var t;\n  }\n\n  toUint8Array() {\n    return function (t) {\n      const e = new Uint8Array(t.length);\n\n      for (let n = 0; n < t.length; n++) e[n] = t.charCodeAt(n);\n\n      return e;\n    }\n    /**\n    * @license\n    * Copyright 2020 Google LLC\n    *\n    * Licensed under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License.\n    * You may obtain a copy of the License at\n    *\n    *   http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software\n    * distributed under the License is distributed on an \"AS IS\" BASIS,\n    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    * See the License for the specific language governing permissions and\n    * limitations under the License.\n    */\n    // A RegExp matching ISO 8601 UTC timestamps with optional fraction.\n    (this.binaryString);\n  }\n\n  approximateByteSize() {\n    return 2 * this.binaryString.length;\n  }\n\n  compareTo(t) {\n    return It(this.binaryString, t.binaryString);\n  }\n\n  isEqual(t) {\n    return this.binaryString === t.binaryString;\n  }\n\n}\n\nVt.EMPTY_BYTE_STRING = new Vt(\"\");\nconst $t = new RegExp(/^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(?:\\.(\\d+))?Z$/);\n/**\n * Converts the possible Proto values for a timestamp value into a \"seconds and\n * nanos\" representation.\n */\n\nfunction Nt(t) {\n  // The json interface (for the browser) will return an iso timestamp string,\n  // while the proto js library (for node) will return a\n  // google.protobuf.Timestamp instance.\n  if (E(!!t), \"string\" == typeof t) {\n    // The date string can have higher precision (nanos) than the Date class\n    // (millis), so we do some custom parsing here.\n    // Parse the nanos right out of the string.\n    let e = 0;\n    const n = $t.exec(t);\n\n    if (E(!!n), n[1]) {\n      // Pad the fraction out to 9 digits (nanos).\n      let t = n[1];\n      t = (t + \"000000000\").substr(0, 9), e = Number(t);\n    } // Parse the date to get the seconds.\n\n\n    const r = new Date(t);\n    return {\n      seconds: Math.floor(r.getTime() / 1e3),\n      nanos: e\n    };\n  }\n\n  return {\n    seconds: Dt(t.seconds),\n    nanos: Dt(t.nanos)\n  };\n}\n/**\n * Converts the possible Proto types for numbers into a JavaScript number.\n * Returns 0 if the value is not numeric.\n */\n\n\nfunction Dt(t) {\n  // TODO(bjornick): Handle int64 greater than 53 bits.\n  return \"number\" == typeof t ? t : \"string\" == typeof t ? Number(t) : 0;\n}\n/** Converts the possible Proto types for Blobs into a ByteString. */\n\n\nfunction Ft(t) {\n  return \"string\" == typeof t ? Vt.fromBase64String(t) : Vt.fromUint8Array(t);\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// The earliest date supported by Firestore timestamps (0001-01-01T00:00:00Z).\n\n/**\n * A `Timestamp` represents a point in time independent of any time zone or\n * calendar, represented as seconds and fractions of seconds at nanosecond\n * resolution in UTC Epoch time.\n *\n * It is encoded using the Proleptic Gregorian Calendar which extends the\n * Gregorian calendar backwards to year one. It is encoded assuming all minutes\n * are 60 seconds long, i.e. leap seconds are \"smeared\" so that no leap second\n * table is needed for interpretation. Range is from 0001-01-01T00:00:00Z to\n * 9999-12-31T23:59:59.999999999Z.\n *\n * For examples and further specifications, refer to the\n * {@link https://github.com/google/protobuf/blob/master/src/google/protobuf/timestamp.proto | Timestamp definition}.\n */\n\n\nclass xt {\n  /**\n   * Creates a new timestamp.\n   *\n   * @param seconds - The number of seconds of UTC time since Unix epoch\n   *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n   *     9999-12-31T23:59:59Z inclusive.\n   * @param nanoseconds - The non-negative fractions of a second at nanosecond\n   *     resolution. Negative second values with fractions must still have\n   *     non-negative nanoseconds values that count forward in time. Must be\n   *     from 0 to 999,999,999 inclusive.\n   */\n  constructor(\n  /**\n   * The number of seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z.\n   */\n  t,\n  /**\n   * The fractions of a second at nanosecond resolution.*\n   */\n  e) {\n    if (this.seconds = t, this.nanoseconds = e, e < 0) throw new U(P, \"Timestamp nanoseconds out of range: \" + e);\n    if (e >= 1e9) throw new U(P, \"Timestamp nanoseconds out of range: \" + e);\n    if (t < -62135596800) throw new U(P, \"Timestamp seconds out of range: \" + t); // This will break in the year 10,000.\n\n    if (t >= 253402300800) throw new U(P, \"Timestamp seconds out of range: \" + t);\n  }\n  /**\n   * Creates a new timestamp with the current date, with millisecond precision.\n   *\n   * @returns a new timestamp representing the current date.\n   */\n\n\n  static now() {\n    return xt.fromMillis(Date.now());\n  }\n  /**\n   * Creates a new timestamp from the given date.\n   *\n   * @param date - The date to initialize the `Timestamp` from.\n   * @returns A new `Timestamp` representing the same point in time as the given\n   *     date.\n   */\n\n\n  static fromDate(t) {\n    return xt.fromMillis(t.getTime());\n  }\n  /**\n   * Creates a new timestamp from the given number of milliseconds.\n   *\n   * @param milliseconds - Number of milliseconds since Unix epoch\n   *     1970-01-01T00:00:00Z.\n   * @returns A new `Timestamp` representing the same point in time as the given\n   *     number of milliseconds.\n   */\n\n\n  static fromMillis(t) {\n    const e = Math.floor(t / 1e3),\n          n = Math.floor(1e6 * (t - 1e3 * e));\n    return new xt(e, n);\n  }\n  /**\n   * Converts a `Timestamp` to a JavaScript `Date` object. This conversion\n   * causes a loss of precision since `Date` objects only support millisecond\n   * precision.\n   *\n   * @returns JavaScript `Date` object representing the same point in time as\n   *     this `Timestamp`, with millisecond precision.\n   */\n\n\n  toDate() {\n    return new Date(this.toMillis());\n  }\n  /**\n   * Converts a `Timestamp` to a numeric timestamp (in milliseconds since\n   * epoch). This operation causes a loss of precision.\n   *\n   * @returns The point in time corresponding to this timestamp, represented as\n   *     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.\n   */\n\n\n  toMillis() {\n    return 1e3 * this.seconds + this.nanoseconds / 1e6;\n  }\n\n  _compareTo(t) {\n    return this.seconds === t.seconds ? It(this.nanoseconds, t.nanoseconds) : It(this.seconds, t.seconds);\n  }\n  /**\n   * Returns true if this `Timestamp` is equal to the provided one.\n   *\n   * @param other - The `Timestamp` to compare against.\n   * @returns true if this `Timestamp` is equal to the provided one.\n   */\n\n\n  isEqual(t) {\n    return t.seconds === this.seconds && t.nanoseconds === this.nanoseconds;\n  }\n  /** Returns a textual representation of this `Timestamp`. */\n\n\n  toString() {\n    return \"Timestamp(seconds=\" + this.seconds + \", nanoseconds=\" + this.nanoseconds + \")\";\n  }\n  /** Returns a JSON-serializable representation of this `Timestamp`. */\n\n\n  toJSON() {\n    return {\n      seconds: this.seconds,\n      nanoseconds: this.nanoseconds\n    };\n  }\n  /**\n   * Converts this object to a primitive string, which allows `Timestamp` objects\n   * to be compared using the `>`, `<=`, `>=` and `>` operators.\n   */\n\n\n  valueOf() {\n    // This method returns a string of the form <seconds>.<nanoseconds> where\n    // <seconds> is translated to have a non-negative value and both <seconds>\n    // and <nanoseconds> are left-padded with zeroes to be a consistent length.\n    // Strings with this format then have a lexiographical ordering that matches\n    // the expected ordering. The <seconds> translation is done to avoid having\n    // a leading negative sign (i.e. a leading '-' character) in its string\n    // representation, which would affect its lexiographical ordering.\n    const t = this.seconds - -62135596800; // Note: Up to 12 decimal digits are required to represent all valid\n    // 'seconds' values.\n\n    return String(t).padStart(12, \"0\") + \".\" + String(this.nanoseconds).padStart(9, \"0\");\n  }\n\n}\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Represents a locally-applied ServerTimestamp.\n *\n * Server Timestamps are backed by MapValues that contain an internal field\n * `__type__` with a value of `server_timestamp`. The previous value and local\n * write time are stored in its `__previous_value__` and `__local_write_time__`\n * fields respectively.\n *\n * Notes:\n * - ServerTimestampValue instances are created as the result of applying a\n *   transform. They can only exist in the local view of a document. Therefore\n *   they do not need to be parsed or serialized.\n * - When evaluated locally (e.g. for snapshot.data()), they by default\n *   evaluate to `null`. This behavior can be configured by passing custom\n *   FieldValueOptions to value().\n * - With respect to other ServerTimestampValues, they sort by their\n *   localWriteTime.\n */\n\n\nfunction St(t) {\n  var e, n;\n  return \"server_timestamp\" === (null === (n = ((null === (e = null == t ? void 0 : t.mapValue) || void 0 === e ? void 0 : e.fields) || {}).__type__) || void 0 === n ? void 0 : n.stringValue);\n}\n/**\n * Returns the value of the field before this ServerTimestamp was set.\n *\n * Preserving the previous values allows the user to display the last resoled\n * value until the backend responds with the timestamp.\n */\n\n\nfunction qt(t) {\n  const e = t.mapValue.fields.__previous_value__;\n  return St(e) ? qt(e) : e;\n}\n/**\n * Returns the local time at which this timestamp was first set.\n */\n\n\nfunction Ot(t) {\n  const e = Nt(t.mapValue.fields.__local_write_time__.timestampValue);\n  return new xt(e.seconds, e.nanos);\n}\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nconst kt = {\n  fields: {\n    __type__: {\n      stringValue: \"__max__\"\n    }\n  }\n};\n/** Extracts the backend's type order for the provided value. */\n\nfunction Ct(t) {\n  return \"nullValue\" in t ? 0\n  /* TypeOrder.NullValue */\n  : \"booleanValue\" in t ? 1\n  /* TypeOrder.BooleanValue */\n  : \"integerValue\" in t || \"doubleValue\" in t ? 2\n  /* TypeOrder.NumberValue */\n  : \"timestampValue\" in t ? 3\n  /* TypeOrder.TimestampValue */\n  : \"stringValue\" in t ? 5\n  /* TypeOrder.StringValue */\n  : \"bytesValue\" in t ? 6\n  /* TypeOrder.BlobValue */\n  : \"referenceValue\" in t ? 7\n  /* TypeOrder.RefValue */\n  : \"geoPointValue\" in t ? 8\n  /* TypeOrder.GeoPointValue */\n  : \"arrayValue\" in t ? 9\n  /* TypeOrder.ArrayValue */\n  : \"mapValue\" in t ? St(t) ? 4\n  /* TypeOrder.ServerTimestampValue */\n  :\n  /** Returns true if the Value represents the canonical {@link #MAX_VALUE} . */\n  function (t) {\n    return \"__max__\" === (((t.mapValue || {}).fields || {}).__type__ || {}).stringValue;\n  }\n  /**\n  * @license\n  * Copyright 2022 Google LLC\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n\n  /**\n  * Represents a bound of a query.\n  *\n  * The bound is specified with the given components representing a position and\n  * whether it's just before or just after the position (relative to whatever the\n  * query order is).\n  *\n  * The position represents a logical index position for a query. It's a prefix\n  * of values for the (potentially implicit) order by clauses of a query.\n  *\n  * Bound provides a function to determine whether a document comes before or\n  * after a bound. This is influenced by whether the position is just before or\n  * just after the provided values.\n  */\n  (t) ? 9007199254740991\n  /* TypeOrder.MaxValue */\n  : 10\n  /* TypeOrder.ObjectValue */\n  : b();\n}\n/** Tests `left` and `right` for equality based on the backend semantics. */\n\n\nfunction Mt(t, e) {\n  if (t === e) return !0;\n  const n = Ct(t);\n  if (n !== Ct(e)) return !1;\n\n  switch (n) {\n    case 0\n    /* TypeOrder.NullValue */\n    :\n    case 9007199254740991\n    /* TypeOrder.MaxValue */\n    :\n      return !0;\n\n    case 1\n    /* TypeOrder.BooleanValue */\n    :\n      return t.booleanValue === e.booleanValue;\n\n    case 4\n    /* TypeOrder.ServerTimestampValue */\n    :\n      return Ot(t).isEqual(Ot(e));\n\n    case 3\n    /* TypeOrder.TimestampValue */\n    :\n      return function (t, e) {\n        if (\"string\" == typeof t.timestampValue && \"string\" == typeof e.timestampValue && t.timestampValue.length === e.timestampValue.length) // Use string equality for ISO 8601 timestamps\n          return t.timestampValue === e.timestampValue;\n        const n = Nt(t.timestampValue),\n              r = Nt(e.timestampValue);\n        return n.seconds === r.seconds && n.nanos === r.nanos;\n      }(t, e);\n\n    case 5\n    /* TypeOrder.StringValue */\n    :\n      return t.stringValue === e.stringValue;\n\n    case 6\n    /* TypeOrder.BlobValue */\n    :\n      return function (t, e) {\n        return Ft(t.bytesValue).isEqual(Ft(e.bytesValue));\n      }(t, e);\n\n    case 7\n    /* TypeOrder.RefValue */\n    :\n      return t.referenceValue === e.referenceValue;\n\n    case 8\n    /* TypeOrder.GeoPointValue */\n    :\n      return function (t, e) {\n        return Dt(t.geoPointValue.latitude) === Dt(e.geoPointValue.latitude) && Dt(t.geoPointValue.longitude) === Dt(e.geoPointValue.longitude);\n      }(t, e);\n\n    case 2\n    /* TypeOrder.NumberValue */\n    :\n      return function (t, e) {\n        if (\"integerValue\" in t && \"integerValue\" in e) return Dt(t.integerValue) === Dt(e.integerValue);\n\n        if (\"doubleValue\" in t && \"doubleValue\" in e) {\n          const n = Dt(t.doubleValue),\n                r = Dt(e.doubleValue);\n          return n === r ? wt(n) === wt(r) : isNaN(n) && isNaN(r);\n        }\n\n        return !1;\n      }(t, e);\n\n    case 9\n    /* TypeOrder.ArrayValue */\n    :\n      return Tt(t.arrayValue.values || [], e.arrayValue.values || [], Mt);\n\n    case 10\n    /* TypeOrder.ObjectValue */\n    :\n      return function (t, e) {\n        const n = t.mapValue.fields || {},\n              r = e.mapValue.fields || {};\n        if (At(n) !== At(r)) return !1;\n\n        for (const t in n) if (n.hasOwnProperty(t) && (void 0 === r[t] || !Mt(n[t], r[t]))) return !1;\n\n        return !0;\n      }\n      /** Returns true if the ArrayValue contains the specified element. */\n      (t, e);\n\n    default:\n      return b();\n  }\n}\n\nfunction Lt(t, e) {\n  return void 0 !== (t.values || []).find(t => Mt(t, e));\n}\n\nfunction Ut(t, e) {\n  if (t === e) return 0;\n  const n = Ct(t),\n        r = Ct(e);\n  if (n !== r) return It(n, r);\n\n  switch (n) {\n    case 0\n    /* TypeOrder.NullValue */\n    :\n    case 9007199254740991\n    /* TypeOrder.MaxValue */\n    :\n      return 0;\n\n    case 1\n    /* TypeOrder.BooleanValue */\n    :\n      return It(t.booleanValue, e.booleanValue);\n\n    case 2\n    /* TypeOrder.NumberValue */\n    :\n      return function (t, e) {\n        const n = Dt(t.integerValue || t.doubleValue),\n              r = Dt(e.integerValue || e.doubleValue);\n        return n < r ? -1 : n > r ? 1 : n === r ? 0 : // one or both are NaN.\n        isNaN(n) ? isNaN(r) ? 0 : -1 : 1;\n      }(t, e);\n\n    case 3\n    /* TypeOrder.TimestampValue */\n    :\n      return jt(t.timestampValue, e.timestampValue);\n\n    case 4\n    /* TypeOrder.ServerTimestampValue */\n    :\n      return jt(Ot(t), Ot(e));\n\n    case 5\n    /* TypeOrder.StringValue */\n    :\n      return It(t.stringValue, e.stringValue);\n\n    case 6\n    /* TypeOrder.BlobValue */\n    :\n      return function (t, e) {\n        const n = Ft(t),\n              r = Ft(e);\n        return n.compareTo(r);\n      }(t.bytesValue, e.bytesValue);\n\n    case 7\n    /* TypeOrder.RefValue */\n    :\n      return function (t, e) {\n        const n = t.split(\"/\"),\n              r = e.split(\"/\");\n\n        for (let t = 0; t < n.length && t < r.length; t++) {\n          const e = It(n[t], r[t]);\n          if (0 !== e) return e;\n        }\n\n        return It(n.length, r.length);\n      }(t.referenceValue, e.referenceValue);\n\n    case 8\n    /* TypeOrder.GeoPointValue */\n    :\n      return function (t, e) {\n        const n = It(Dt(t.latitude), Dt(e.latitude));\n        if (0 !== n) return n;\n        return It(Dt(t.longitude), Dt(e.longitude));\n      }(t.geoPointValue, e.geoPointValue);\n\n    case 9\n    /* TypeOrder.ArrayValue */\n    :\n      return function (t, e) {\n        const n = t.values || [],\n              r = e.values || [];\n\n        for (let t = 0; t < n.length && t < r.length; ++t) {\n          const e = Ut(n[t], r[t]);\n          if (e) return e;\n        }\n\n        return It(n.length, r.length);\n      }(t.arrayValue, e.arrayValue);\n\n    case 10\n    /* TypeOrder.ObjectValue */\n    :\n      return function (t, e) {\n        if (t === kt && e === kt) return 0;\n        if (t === kt) return 1;\n        if (e === kt) return -1;\n        const n = t.fields || {},\n              r = Object.keys(n),\n              s = e.fields || {},\n              i = Object.keys(s); // Even though MapValues are likely sorted correctly based on their insertion\n        // order (e.g. when received from the backend), local modifications can bring\n        // elements out of order. We need to re-sort the elements to ensure that\n        // canonical IDs are independent of insertion order.\n\n        r.sort(), i.sort();\n\n        for (let t = 0; t < r.length && t < i.length; ++t) {\n          const e = It(r[t], i[t]);\n          if (0 !== e) return e;\n          const o = Ut(n[r[t]], s[i[t]]);\n          if (0 !== o) return o;\n        }\n\n        return It(r.length, i.length);\n      }\n      /** Returns a reference value for the provided database and key. */\n      (t.mapValue, e.mapValue);\n\n    default:\n      throw b();\n  }\n}\n\nfunction jt(t, e) {\n  if (\"string\" == typeof t && \"string\" == typeof e && t.length === e.length) return It(t, e);\n  const n = Nt(t),\n        r = Nt(e),\n        s = It(n.seconds, r.seconds);\n  return 0 !== s ? s : It(n.nanos, r.nanos);\n}\n\nfunction Bt(t, e) {\n  return {\n    referenceValue: `projects/${t.projectId}/databases/${t.database}/documents/${e.path.canonicalString()}`\n  };\n}\n/** Returns true if `value` is an ArrayValue. */\n\n\nfunction Qt(t) {\n  return !!t && \"arrayValue\" in t;\n}\n/** Returns true if `value` is a NullValue. */\n\n\nfunction zt(t) {\n  return !!t && \"nullValue\" in t;\n}\n/** Returns true if `value` is NaN. */\n\n\nfunction Wt(t) {\n  return !!t && \"doubleValue\" in t && isNaN(Number(t.doubleValue));\n}\n/** Returns true if `value` is a MapValue. */\n\n\nfunction Gt(t) {\n  return !!t && \"mapValue\" in t;\n}\n/** Creates a deep copy of `source`. */\n\n\nfunction Kt(t) {\n  if (t.geoPointValue) return {\n    geoPointValue: Object.assign({}, t.geoPointValue)\n  };\n  if (t.timestampValue && \"object\" == typeof t.timestampValue) return {\n    timestampValue: Object.assign({}, t.timestampValue)\n  };\n\n  if (t.mapValue) {\n    const e = {\n      mapValue: {\n        fields: {}\n      }\n    };\n    return Rt(t.mapValue.fields, (t, n) => e.mapValue.fields[t] = Kt(n)), e;\n  }\n\n  if (t.arrayValue) {\n    const e = {\n      arrayValue: {\n        values: []\n      }\n    };\n\n    for (let n = 0; n < (t.arrayValue.values || []).length; ++n) e.arrayValue.values[n] = Kt(t.arrayValue.values[n]);\n\n    return e;\n  }\n\n  return Object.assign({}, t);\n}\n\nclass Yt {\n  constructor(t, e) {\n    this.position = t, this.inclusive = e;\n  }\n\n}\n\nfunction Ht(t, e) {\n  if (null === t) return null === e;\n  if (null === e) return !1;\n  if (t.inclusive !== e.inclusive || t.position.length !== e.position.length) return !1;\n\n  for (let n = 0; n < t.position.length; n++) {\n    if (!Mt(t.position[n], e.position[n])) return !1;\n  }\n\n  return !0;\n}\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nclass Jt {}\n\nclass Xt extends Jt {\n  constructor(t, e, n) {\n    super(), this.field = t, this.op = e, this.value = n;\n  }\n  /**\n   * Creates a filter based on the provided arguments.\n   */\n\n\n  static create(t, e, n) {\n    return t.isKeyField() ? \"in\"\n    /* Operator.IN */\n    === e || \"not-in\"\n    /* Operator.NOT_IN */\n    === e ? this.createKeyFieldInFilter(t, e, n) : new ee(t, e, n) : \"array-contains\"\n    /* Operator.ARRAY_CONTAINS */\n    === e ? new ie(t, n) : \"in\"\n    /* Operator.IN */\n    === e ? new oe(t, n) : \"not-in\"\n    /* Operator.NOT_IN */\n    === e ? new ue(t, n) : \"array-contains-any\"\n    /* Operator.ARRAY_CONTAINS_ANY */\n    === e ? new ce(t, n) : new Xt(t, e, n);\n  }\n\n  static createKeyFieldInFilter(t, e, n) {\n    return \"in\"\n    /* Operator.IN */\n    === e ? new ne(t, n) : new re(t, n);\n  }\n\n  matches(t) {\n    const e = t.data.field(this.field); // Types do not have to match in NOT_EQUAL filters.\n\n    return \"!=\"\n    /* Operator.NOT_EQUAL */\n    === this.op ? null !== e && this.matchesComparison(Ut(e, this.value)) : null !== e && Ct(this.value) === Ct(e) && this.matchesComparison(Ut(e, this.value)); // Only compare types with matching backend order (such as double and int).\n  }\n\n  matchesComparison(t) {\n    switch (this.op) {\n      case \"<\"\n      /* Operator.LESS_THAN */\n      :\n        return t < 0;\n\n      case \"<=\"\n      /* Operator.LESS_THAN_OR_EQUAL */\n      :\n        return t <= 0;\n\n      case \"==\"\n      /* Operator.EQUAL */\n      :\n        return 0 === t;\n\n      case \"!=\"\n      /* Operator.NOT_EQUAL */\n      :\n        return 0 !== t;\n\n      case \">\"\n      /* Operator.GREATER_THAN */\n      :\n        return t > 0;\n\n      case \">=\"\n      /* Operator.GREATER_THAN_OR_EQUAL */\n      :\n        return t >= 0;\n\n      default:\n        return b();\n    }\n  }\n\n  isInequality() {\n    return [\"<\"\n    /* Operator.LESS_THAN */\n    , \"<=\"\n    /* Operator.LESS_THAN_OR_EQUAL */\n    , \">\"\n    /* Operator.GREATER_THAN */\n    , \">=\"\n    /* Operator.GREATER_THAN_OR_EQUAL */\n    , \"!=\"\n    /* Operator.NOT_EQUAL */\n    , \"not-in\"\n    /* Operator.NOT_IN */\n    ].indexOf(this.op) >= 0;\n  }\n\n  getFlattenedFilters() {\n    return [this];\n  }\n\n  getFilters() {\n    return [this];\n  }\n\n  getFirstInequalityField() {\n    return this.isInequality() ? this.field : null;\n  }\n\n}\n\nclass Zt extends Jt {\n  constructor(t, e) {\n    super(), this.filters = t, this.op = e, this.D = null;\n  }\n  /**\n   * Creates a filter based on the provided arguments.\n   */\n\n\n  static create(t, e) {\n    return new Zt(t, e);\n  }\n\n  matches(t) {\n    return \"and\"\n    /* CompositeOperator.AND */\n    === this.op ? void 0 === this.filters.find(e => !e.matches(t)) : void 0 !== this.filters.find(e => e.matches(t));\n  }\n\n  getFlattenedFilters() {\n    return null !== this.D || (this.D = this.filters.reduce((t, e) => t.concat(e.getFlattenedFilters()), [])), this.D;\n  } // Returns a mutable copy of `this.filters`\n\n\n  getFilters() {\n    return Object.assign([], this.filters);\n  }\n\n  getFirstInequalityField() {\n    const t = this.F(t => t.isInequality());\n    return null !== t ? t.field : null;\n  } // Performs a depth-first search to find and return the first FieldFilter in the composite filter\n  // that satisfies the predicate. Returns `null` if none of the FieldFilters satisfy the\n  // predicate.\n\n\n  F(t) {\n    for (const e of this.getFlattenedFilters()) if (t(e)) return e;\n\n    return null;\n  }\n\n}\n\nfunction te(t, e) {\n  return t instanceof Xt ? function (t, e) {\n    return e instanceof Xt && t.op === e.op && t.field.isEqual(e.field) && Mt(t.value, e.value);\n  }(t, e) : t instanceof Zt ? function (t, e) {\n    if (e instanceof Zt && t.op === e.op && t.filters.length === e.filters.length) {\n      return t.filters.reduce((t, n, r) => t && te(n, e.filters[r]), !0);\n    }\n\n    return !1;\n  }\n  /** Filter that matches on key fields (i.e. '__name__'). */\n  (t, e) : void b();\n}\n\nclass ee extends Xt {\n  constructor(t, e, n) {\n    super(t, e, n), this.key = rt.fromName(n.referenceValue);\n  }\n\n  matches(t) {\n    const e = rt.comparator(t.key, this.key);\n    return this.matchesComparison(e);\n  }\n\n}\n/** Filter that matches on key fields within an array. */\n\n\nclass ne extends Xt {\n  constructor(t, e) {\n    super(t, \"in\"\n    /* Operator.IN */\n    , e), this.keys = se(\"in\"\n    /* Operator.IN */\n    , e);\n  }\n\n  matches(t) {\n    return this.keys.some(e => e.isEqual(t.key));\n  }\n\n}\n/** Filter that matches on key fields not present within an array. */\n\n\nclass re extends Xt {\n  constructor(t, e) {\n    super(t, \"not-in\"\n    /* Operator.NOT_IN */\n    , e), this.keys = se(\"not-in\"\n    /* Operator.NOT_IN */\n    , e);\n  }\n\n  matches(t) {\n    return !this.keys.some(e => e.isEqual(t.key));\n  }\n\n}\n\nfunction se(t, e) {\n  var n;\n  return ((null === (n = e.arrayValue) || void 0 === n ? void 0 : n.values) || []).map(t => rt.fromName(t.referenceValue));\n}\n/** A Filter that implements the array-contains operator. */\n\n\nclass ie extends Xt {\n  constructor(t, e) {\n    super(t, \"array-contains\"\n    /* Operator.ARRAY_CONTAINS */\n    , e);\n  }\n\n  matches(t) {\n    const e = t.data.field(this.field);\n    return Qt(e) && Lt(e.arrayValue, this.value);\n  }\n\n}\n/** A Filter that implements the IN operator. */\n\n\nclass oe extends Xt {\n  constructor(t, e) {\n    super(t, \"in\"\n    /* Operator.IN */\n    , e);\n  }\n\n  matches(t) {\n    const e = t.data.field(this.field);\n    return null !== e && Lt(this.value.arrayValue, e);\n  }\n\n}\n/** A Filter that implements the not-in operator. */\n\n\nclass ue extends Xt {\n  constructor(t, e) {\n    super(t, \"not-in\"\n    /* Operator.NOT_IN */\n    , e);\n  }\n\n  matches(t) {\n    if (Lt(this.value.arrayValue, {\n      nullValue: \"NULL_VALUE\"\n    })) return !1;\n    const e = t.data.field(this.field);\n    return null !== e && !Lt(this.value.arrayValue, e);\n  }\n\n}\n/** A Filter that implements the array-contains-any operator. */\n\n\nclass ce extends Xt {\n  constructor(t, e) {\n    super(t, \"array-contains-any\"\n    /* Operator.ARRAY_CONTAINS_ANY */\n    , e);\n  }\n\n  matches(t) {\n    const e = t.data.field(this.field);\n    return !(!Qt(e) || !e.arrayValue.values) && e.arrayValue.values.some(t => Lt(this.value.arrayValue, t));\n  }\n\n}\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * An ordering on a field, in some Direction. Direction defaults to ASCENDING.\n */\n\n\nclass ae {\n  constructor(t) {\n    let e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"asc\";\n    this.field = t, this.dir = e;\n  }\n\n}\n\nfunction he(t, e) {\n  return t.dir === e.dir && t.field.isEqual(e.field);\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A version of a document in Firestore. This corresponds to the version\n * timestamp, such as update_time or read_time.\n */\n\n\nclass le {\n  constructor(t) {\n    this.timestamp = t;\n  }\n\n  static fromTimestamp(t) {\n    return new le(t);\n  }\n\n  static min() {\n    return new le(new xt(0, 0));\n  }\n\n  static max() {\n    return new le(new xt(253402300799, 999999999));\n  }\n\n  compareTo(t) {\n    return this.timestamp._compareTo(t.timestamp);\n  }\n\n  isEqual(t) {\n    return this.timestamp.isEqual(t.timestamp);\n  }\n  /** Returns a number representation of the version for use in spec tests. */\n\n\n  toMicroseconds() {\n    // Convert to microseconds.\n    return 1e6 * this.timestamp.seconds + this.timestamp.nanoseconds / 1e3;\n  }\n\n  toString() {\n    return \"SnapshotVersion(\" + this.timestamp.toString() + \")\";\n  }\n\n  toTimestamp() {\n    return this.timestamp;\n  }\n\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// An immutable sorted map implementation, based on a Left-leaning Red-Black\n// tree.\n\n\nclass fe {\n  constructor(t, e) {\n    this.comparator = t, this.root = e || we.EMPTY;\n  } // Returns a copy of the map, with the specified key/value added or replaced.\n\n\n  insert(t, e) {\n    return new fe(this.comparator, this.root.insert(t, e, this.comparator).copy(null, null, we.BLACK, null, null));\n  } // Returns a copy of the map, with the specified key removed.\n\n\n  remove(t) {\n    return new fe(this.comparator, this.root.remove(t, this.comparator).copy(null, null, we.BLACK, null, null));\n  } // Returns the value of the node with the given key, or null.\n\n\n  get(t) {\n    let e = this.root;\n\n    for (; !e.isEmpty();) {\n      const n = this.comparator(t, e.key);\n      if (0 === n) return e.value;\n      n < 0 ? e = e.left : n > 0 && (e = e.right);\n    }\n\n    return null;\n  } // Returns the index of the element in this sorted map, or -1 if it doesn't\n  // exist.\n\n\n  indexOf(t) {\n    // Number of nodes that were pruned when descending right\n    let e = 0,\n        n = this.root;\n\n    for (; !n.isEmpty();) {\n      const r = this.comparator(t, n.key);\n      if (0 === r) return e + n.left.size;\n      r < 0 ? n = n.left : ( // Count all nodes left of the node plus the node itself\n      e += n.left.size + 1, n = n.right);\n    } // Node not found\n\n\n    return -1;\n  }\n\n  isEmpty() {\n    return this.root.isEmpty();\n  } // Returns the total number of nodes in the map.\n\n\n  get size() {\n    return this.root.size;\n  } // Returns the minimum key in the map.\n\n\n  minKey() {\n    return this.root.minKey();\n  } // Returns the maximum key in the map.\n\n\n  maxKey() {\n    return this.root.maxKey();\n  } // Traverses the map in key order and calls the specified action function\n  // for each key/value pair. If action returns true, traversal is aborted.\n  // Returns the first truthy value returned by action, or the last falsey\n  // value returned by action.\n\n\n  inorderTraversal(t) {\n    return this.root.inorderTraversal(t);\n  }\n\n  forEach(t) {\n    this.inorderTraversal((e, n) => (t(e, n), !1));\n  }\n\n  toString() {\n    const t = [];\n    return this.inorderTraversal((e, n) => (t.push(`${e}:${n}`), !1)), `{${t.join(\", \")}}`;\n  } // Traverses the map in reverse key order and calls the specified action\n  // function for each key/value pair. If action returns true, traversal is\n  // aborted.\n  // Returns the first truthy value returned by action, or the last falsey\n  // value returned by action.\n\n\n  reverseTraversal(t) {\n    return this.root.reverseTraversal(t);\n  } // Returns an iterator over the SortedMap.\n\n\n  getIterator() {\n    return new de(this.root, null, this.comparator, !1);\n  }\n\n  getIteratorFrom(t) {\n    return new de(this.root, t, this.comparator, !1);\n  }\n\n  getReverseIterator() {\n    return new de(this.root, null, this.comparator, !0);\n  }\n\n  getReverseIteratorFrom(t) {\n    return new de(this.root, t, this.comparator, !0);\n  }\n\n} // end SortedMap\n// An iterator over an LLRBNode.\n\n\nclass de {\n  constructor(t, e, n, r) {\n    this.isReverse = r, this.nodeStack = [];\n    let s = 1;\n\n    for (; !t.isEmpty();) if (s = e ? n(t.key, e) : 1, // flip the comparison if we're going in reverse\n    e && r && (s *= -1), s < 0) // This node is less than our start key. ignore it\n      t = this.isReverse ? t.left : t.right;else {\n      if (0 === s) {\n        // This node is exactly equal to our start key. Push it on the stack,\n        // but stop iterating;\n        this.nodeStack.push(t);\n        break;\n      } // This node is greater than our start key, add it to the stack and move\n      // to the next one\n\n\n      this.nodeStack.push(t), t = this.isReverse ? t.right : t.left;\n    }\n  }\n\n  getNext() {\n    let t = this.nodeStack.pop();\n    const e = {\n      key: t.key,\n      value: t.value\n    };\n    if (this.isReverse) for (t = t.left; !t.isEmpty();) this.nodeStack.push(t), t = t.right;else for (t = t.right; !t.isEmpty();) this.nodeStack.push(t), t = t.left;\n    return e;\n  }\n\n  hasNext() {\n    return this.nodeStack.length > 0;\n  }\n\n  peek() {\n    if (0 === this.nodeStack.length) return null;\n    const t = this.nodeStack[this.nodeStack.length - 1];\n    return {\n      key: t.key,\n      value: t.value\n    };\n  }\n\n} // end SortedMapIterator\n// Represents a node in a Left-leaning Red-Black tree.\n\n\nclass we {\n  constructor(t, e, n, r, s) {\n    this.key = t, this.value = e, this.color = null != n ? n : we.RED, this.left = null != r ? r : we.EMPTY, this.right = null != s ? s : we.EMPTY, this.size = this.left.size + 1 + this.right.size;\n  } // Returns a copy of the current node, optionally replacing pieces of it.\n\n\n  copy(t, e, n, r, s) {\n    return new we(null != t ? t : this.key, null != e ? e : this.value, null != n ? n : this.color, null != r ? r : this.left, null != s ? s : this.right);\n  }\n\n  isEmpty() {\n    return !1;\n  } // Traverses the tree in key order and calls the specified action function\n  // for each node. If action returns true, traversal is aborted.\n  // Returns the first truthy value returned by action, or the last falsey\n  // value returned by action.\n\n\n  inorderTraversal(t) {\n    return this.left.inorderTraversal(t) || t(this.key, this.value) || this.right.inorderTraversal(t);\n  } // Traverses the tree in reverse key order and calls the specified action\n  // function for each node. If action returns true, traversal is aborted.\n  // Returns the first truthy value returned by action, or the last falsey\n  // value returned by action.\n\n\n  reverseTraversal(t) {\n    return this.right.reverseTraversal(t) || t(this.key, this.value) || this.left.reverseTraversal(t);\n  } // Returns the minimum node in the tree.\n\n\n  min() {\n    return this.left.isEmpty() ? this : this.left.min();\n  } // Returns the maximum key in the tree.\n\n\n  minKey() {\n    return this.min().key;\n  } // Returns the maximum key in the tree.\n\n\n  maxKey() {\n    return this.right.isEmpty() ? this.key : this.right.maxKey();\n  } // Returns new tree, with the key/value added.\n\n\n  insert(t, e, n) {\n    let r = this;\n    const s = n(t, r.key);\n    return r = s < 0 ? r.copy(null, null, null, r.left.insert(t, e, n), null) : 0 === s ? r.copy(null, e, null, null, null) : r.copy(null, null, null, null, r.right.insert(t, e, n)), r.fixUp();\n  }\n\n  removeMin() {\n    if (this.left.isEmpty()) return we.EMPTY;\n    let t = this;\n    return t.left.isRed() || t.left.left.isRed() || (t = t.moveRedLeft()), t = t.copy(null, null, null, t.left.removeMin(), null), t.fixUp();\n  } // Returns new tree, with the specified item removed.\n\n\n  remove(t, e) {\n    let n,\n        r = this;\n    if (e(t, r.key) < 0) r.left.isEmpty() || r.left.isRed() || r.left.left.isRed() || (r = r.moveRedLeft()), r = r.copy(null, null, null, r.left.remove(t, e), null);else {\n      if (r.left.isRed() && (r = r.rotateRight()), r.right.isEmpty() || r.right.isRed() || r.right.left.isRed() || (r = r.moveRedRight()), 0 === e(t, r.key)) {\n        if (r.right.isEmpty()) return we.EMPTY;\n        n = r.right.min(), r = r.copy(n.key, n.value, null, null, r.right.removeMin());\n      }\n\n      r = r.copy(null, null, null, null, r.right.remove(t, e));\n    }\n    return r.fixUp();\n  }\n\n  isRed() {\n    return this.color;\n  } // Returns new tree after performing any needed rotations.\n\n\n  fixUp() {\n    let t = this;\n    return t.right.isRed() && !t.left.isRed() && (t = t.rotateLeft()), t.left.isRed() && t.left.left.isRed() && (t = t.rotateRight()), t.left.isRed() && t.right.isRed() && (t = t.colorFlip()), t;\n  }\n\n  moveRedLeft() {\n    let t = this.colorFlip();\n    return t.right.left.isRed() && (t = t.copy(null, null, null, null, t.right.rotateRight()), t = t.rotateLeft(), t = t.colorFlip()), t;\n  }\n\n  moveRedRight() {\n    let t = this.colorFlip();\n    return t.left.left.isRed() && (t = t.rotateRight(), t = t.colorFlip()), t;\n  }\n\n  rotateLeft() {\n    const t = this.copy(null, null, we.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, t, null);\n  }\n\n  rotateRight() {\n    const t = this.copy(null, null, we.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, t);\n  }\n\n  colorFlip() {\n    const t = this.left.copy(null, null, !this.left.color, null, null),\n          e = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, t, e);\n  } // For testing.\n\n\n  checkMaxDepth() {\n    const t = this.check();\n    return Math.pow(2, t) <= this.size + 1;\n  } // In a balanced RB tree, the black-depth (number of black nodes) from root to\n  // leaves is equal on both sides.  This function verifies that or asserts.\n\n\n  check() {\n    if (this.isRed() && this.left.isRed()) throw b();\n    if (this.right.isRed()) throw b();\n    const t = this.left.check();\n    if (t !== this.right.check()) throw b();\n    return t + (this.isRed() ? 0 : 1);\n  }\n\n} // end LLRBNode\n// Empty node is shared between all LLRB trees.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nwe.EMPTY = null, we.RED = !0, we.BLACK = !1; // end LLRBEmptyNode\n\nwe.EMPTY = new // Represents an empty node (a leaf node in the Red-Black Tree).\nclass {\n  constructor() {\n    this.size = 0;\n  }\n\n  get key() {\n    throw b();\n  }\n\n  get value() {\n    throw b();\n  }\n\n  get color() {\n    throw b();\n  }\n\n  get left() {\n    throw b();\n  }\n\n  get right() {\n    throw b();\n  } // Returns a copy of the current node.\n\n\n  copy(t, e, n, r, s) {\n    return this;\n  } // Returns a copy of the tree, with the specified key/value added.\n\n\n  insert(t, e, n) {\n    return new we(t, e);\n  } // Returns a copy of the tree, with the specified key removed.\n\n\n  remove(t, e) {\n    return this;\n  }\n\n  isEmpty() {\n    return !0;\n  }\n\n  inorderTraversal(t) {\n    return !1;\n  }\n\n  reverseTraversal(t) {\n    return !1;\n  }\n\n  minKey() {\n    return null;\n  }\n\n  maxKey() {\n    return null;\n  }\n\n  isRed() {\n    return !1;\n  } // For testing.\n\n\n  checkMaxDepth() {\n    return !0;\n  }\n\n  check() {\n    return 0;\n  }\n\n}();\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * SortedSet is an immutable (copy-on-write) collection that holds elements\n * in order specified by the provided comparator.\n *\n * NOTE: if provided comparator returns 0 for two elements, we consider them to\n * be equal!\n */\n\nclass me {\n  constructor(t) {\n    this.comparator = t, this.data = new fe(this.comparator);\n  }\n\n  has(t) {\n    return null !== this.data.get(t);\n  }\n\n  first() {\n    return this.data.minKey();\n  }\n\n  last() {\n    return this.data.maxKey();\n  }\n\n  get size() {\n    return this.data.size;\n  }\n\n  indexOf(t) {\n    return this.data.indexOf(t);\n  }\n  /** Iterates elements in order defined by \"comparator\" */\n\n\n  forEach(t) {\n    this.data.inorderTraversal((e, n) => (t(e), !1));\n  }\n  /** Iterates over `elem`s such that: range[0] &lt;= elem &lt; range[1]. */\n\n\n  forEachInRange(t, e) {\n    const n = this.data.getIteratorFrom(t[0]);\n\n    for (; n.hasNext();) {\n      const r = n.getNext();\n      if (this.comparator(r.key, t[1]) >= 0) return;\n      e(r.key);\n    }\n  }\n  /**\n   * Iterates over `elem`s such that: start &lt;= elem until false is returned.\n   */\n\n\n  forEachWhile(t, e) {\n    let n;\n\n    for (n = void 0 !== e ? this.data.getIteratorFrom(e) : this.data.getIterator(); n.hasNext();) {\n      if (!t(n.getNext().key)) return;\n    }\n  }\n  /** Finds the least element greater than or equal to `elem`. */\n\n\n  firstAfterOrEqual(t) {\n    const e = this.data.getIteratorFrom(t);\n    return e.hasNext() ? e.getNext().key : null;\n  }\n\n  getIterator() {\n    return new pe(this.data.getIterator());\n  }\n\n  getIteratorFrom(t) {\n    return new pe(this.data.getIteratorFrom(t));\n  }\n  /** Inserts or updates an element */\n\n\n  add(t) {\n    return this.copy(this.data.remove(t).insert(t, !0));\n  }\n  /** Deletes an element */\n\n\n  delete(t) {\n    return this.has(t) ? this.copy(this.data.remove(t)) : this;\n  }\n\n  isEmpty() {\n    return this.data.isEmpty();\n  }\n\n  unionWith(t) {\n    let e = this; // Make sure `result` always refers to the larger one of the two sets.\n\n    return e.size < t.size && (e = t, t = this), t.forEach(t => {\n      e = e.add(t);\n    }), e;\n  }\n\n  isEqual(t) {\n    if (!(t instanceof me)) return !1;\n    if (this.size !== t.size) return !1;\n    const e = this.data.getIterator(),\n          n = t.data.getIterator();\n\n    for (; e.hasNext();) {\n      const t = e.getNext().key,\n            r = n.getNext().key;\n      if (0 !== this.comparator(t, r)) return !1;\n    }\n\n    return !0;\n  }\n\n  toArray() {\n    const t = [];\n    return this.forEach(e => {\n      t.push(e);\n    }), t;\n  }\n\n  toString() {\n    const t = [];\n    return this.forEach(e => t.push(e)), \"SortedSet(\" + t.toString() + \")\";\n  }\n\n  copy(t) {\n    const e = new me(this.comparator);\n    return e.data = t, e;\n  }\n\n}\n\nclass pe {\n  constructor(t) {\n    this.iter = t;\n  }\n\n  getNext() {\n    return this.iter.getNext().key;\n  }\n\n  hasNext() {\n    return this.iter.hasNext();\n  }\n\n}\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Provides a set of fields that can be used to partially patch a document.\n * FieldMask is used in conjunction with ObjectValue.\n * Examples:\n *   foo - Overwrites foo entirely with the provided value. If foo is not\n *         present in the companion ObjectValue, the field is deleted.\n *   foo.bar - Overwrites only the field bar of the object foo.\n *             If foo is not an object, foo is replaced with an object\n *             containing foo\n */\n\n\nclass ye {\n  constructor(t) {\n    this.fields = t, // TODO(dimond): validation of FieldMask\n    // Sort the field mask to support `FieldMask.isEqual()` and assert below.\n    t.sort(nt.comparator);\n  }\n\n  static empty() {\n    return new ye([]);\n  }\n  /**\n   * Returns a new FieldMask object that is the result of adding all the given\n   * fields paths to this field mask.\n   */\n\n\n  unionWith(t) {\n    let e = new me(nt.comparator);\n\n    for (const t of this.fields) e = e.add(t);\n\n    for (const n of t) e = e.add(n);\n\n    return new ye(e.toArray());\n  }\n  /**\n   * Verifies that `fieldPath` is included by at least one field in this field\n   * mask.\n   *\n   * This is an O(n) operation, where `n` is the size of the field mask.\n   */\n\n\n  covers(t) {\n    for (const e of this.fields) if (e.isPrefixOf(t)) return !0;\n\n    return !1;\n  }\n\n  isEqual(t) {\n    return Tt(this.fields, t.fields, (t, e) => t.isEqual(e));\n  }\n\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * An ObjectValue represents a MapValue in the Firestore Proto and offers the\n * ability to add and remove fields (via the ObjectValueBuilder).\n */\n\n\nclass ge {\n  constructor(t) {\n    this.value = t;\n  }\n\n  static empty() {\n    return new ge({\n      mapValue: {}\n    });\n  }\n  /**\n   * Returns the value at the given path or null.\n   *\n   * @param path - the path to search\n   * @returns The value at the path or null if the path is not set.\n   */\n\n\n  field(t) {\n    if (t.isEmpty()) return this.value;\n    {\n      let e = this.value;\n\n      for (let n = 0; n < t.length - 1; ++n) if (e = (e.mapValue.fields || {})[t.get(n)], !Gt(e)) return null;\n\n      return e = (e.mapValue.fields || {})[t.lastSegment()], e || null;\n    }\n  }\n  /**\n   * Sets the field to the provided value.\n   *\n   * @param path - The field path to set.\n   * @param value - The value to set.\n   */\n\n\n  set(t, e) {\n    this.getFieldsMap(t.popLast())[t.lastSegment()] = Kt(e);\n  }\n  /**\n   * Sets the provided fields to the provided values.\n   *\n   * @param data - A map of fields to values (or null for deletes).\n   */\n\n\n  setAll(t) {\n    let e = nt.emptyPath(),\n        n = {},\n        r = [];\n    t.forEach((t, s) => {\n      if (!e.isImmediateParentOf(s)) {\n        // Insert the accumulated changes at this parent location\n        const t = this.getFieldsMap(e);\n        this.applyChanges(t, n, r), n = {}, r = [], e = s.popLast();\n      }\n\n      t ? n[s.lastSegment()] = Kt(t) : r.push(s.lastSegment());\n    });\n    const s = this.getFieldsMap(e);\n    this.applyChanges(s, n, r);\n  }\n  /**\n   * Removes the field at the specified path. If there is no field at the\n   * specified path, nothing is changed.\n   *\n   * @param path - The field path to remove.\n   */\n\n\n  delete(t) {\n    const e = this.field(t.popLast());\n    Gt(e) && e.mapValue.fields && delete e.mapValue.fields[t.lastSegment()];\n  }\n\n  isEqual(t) {\n    return Mt(this.value, t.value);\n  }\n  /**\n   * Returns the map that contains the leaf element of `path`. If the parent\n   * entry does not yet exist, or if it is not a map, a new map will be created.\n   */\n\n\n  getFieldsMap(t) {\n    let e = this.value;\n    e.mapValue.fields || (e.mapValue = {\n      fields: {}\n    });\n\n    for (let n = 0; n < t.length; ++n) {\n      let r = e.mapValue.fields[t.get(n)];\n      Gt(r) && r.mapValue.fields || (r = {\n        mapValue: {\n          fields: {}\n        }\n      }, e.mapValue.fields[t.get(n)] = r), e = r;\n    }\n\n    return e.mapValue.fields;\n  }\n  /**\n   * Modifies `fieldsMap` by adding, replacing or deleting the specified\n   * entries.\n   */\n\n\n  applyChanges(t, e, n) {\n    Rt(e, (e, n) => t[e] = n);\n\n    for (const e of n) delete t[e];\n  }\n\n  clone() {\n    return new ge(Kt(this.value));\n  }\n\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Represents a document in Firestore with a key, version, data and whether it\n * has local mutations applied to it.\n *\n * Documents can transition between states via `convertToFoundDocument()`,\n * `convertToNoDocument()` and `convertToUnknownDocument()`. If a document does\n * not transition to one of these states even after all mutations have been\n * applied, `isValidDocument()` returns false and the document should be removed\n * from all views.\n */\n\n\nclass _e {\n  constructor(t, e, n, r, s, i, o) {\n    this.key = t, this.documentType = e, this.version = n, this.readTime = r, this.createTime = s, this.data = i, this.documentState = o;\n  }\n  /**\n   * Creates a document with no known version or data, but which can serve as\n   * base document for mutations.\n   */\n\n\n  static newInvalidDocument(t) {\n    return new _e(t, 0\n    /* DocumentType.INVALID */\n    ,\n    /* version */\n    le.min(),\n    /* readTime */\n    le.min(),\n    /* createTime */\n    le.min(), ge.empty(), 0\n    /* DocumentState.SYNCED */\n    );\n  }\n  /**\n   * Creates a new document that is known to exist with the given data at the\n   * given version.\n   */\n\n\n  static newFoundDocument(t, e, n, r) {\n    return new _e(t, 1\n    /* DocumentType.FOUND_DOCUMENT */\n    ,\n    /* version */\n    e,\n    /* readTime */\n    le.min(),\n    /* createTime */\n    n, r, 0\n    /* DocumentState.SYNCED */\n    );\n  }\n  /** Creates a new document that is known to not exist at the given version. */\n\n\n  static newNoDocument(t, e) {\n    return new _e(t, 2\n    /* DocumentType.NO_DOCUMENT */\n    ,\n    /* version */\n    e,\n    /* readTime */\n    le.min(),\n    /* createTime */\n    le.min(), ge.empty(), 0\n    /* DocumentState.SYNCED */\n    );\n  }\n  /**\n   * Creates a new document that is known to exist at the given version but\n   * whose data is not known (e.g. a document that was updated without a known\n   * base document).\n   */\n\n\n  static newUnknownDocument(t, e) {\n    return new _e(t, 3\n    /* DocumentType.UNKNOWN_DOCUMENT */\n    ,\n    /* version */\n    e,\n    /* readTime */\n    le.min(),\n    /* createTime */\n    le.min(), ge.empty(), 2\n    /* DocumentState.HAS_COMMITTED_MUTATIONS */\n    );\n  }\n  /**\n   * Changes the document type to indicate that it exists and that its version\n   * and data are known.\n   */\n\n\n  convertToFoundDocument(t, e) {\n    // If a document is switching state from being an invalid or deleted\n    // document to a valid (FOUND_DOCUMENT) document, either due to receiving an\n    // update from Watch or due to applying a local set mutation on top\n    // of a deleted document, our best guess about its createTime would be the\n    // version at which the document transitioned to a FOUND_DOCUMENT.\n    return !this.createTime.isEqual(le.min()) || 2\n    /* DocumentType.NO_DOCUMENT */\n    !== this.documentType && 0\n    /* DocumentType.INVALID */\n    !== this.documentType || (this.createTime = t), this.version = t, this.documentType = 1\n    /* DocumentType.FOUND_DOCUMENT */\n    , this.data = e, this.documentState = 0\n    /* DocumentState.SYNCED */\n    , this;\n  }\n  /**\n   * Changes the document type to indicate that it doesn't exist at the given\n   * version.\n   */\n\n\n  convertToNoDocument(t) {\n    return this.version = t, this.documentType = 2\n    /* DocumentType.NO_DOCUMENT */\n    , this.data = ge.empty(), this.documentState = 0\n    /* DocumentState.SYNCED */\n    , this;\n  }\n  /**\n   * Changes the document type to indicate that it exists at a given version but\n   * that its data is not known (e.g. a document that was updated without a known\n   * base document).\n   */\n\n\n  convertToUnknownDocument(t) {\n    return this.version = t, this.documentType = 3\n    /* DocumentType.UNKNOWN_DOCUMENT */\n    , this.data = ge.empty(), this.documentState = 2\n    /* DocumentState.HAS_COMMITTED_MUTATIONS */\n    , this;\n  }\n\n  setHasCommittedMutations() {\n    return this.documentState = 2\n    /* DocumentState.HAS_COMMITTED_MUTATIONS */\n    , this;\n  }\n\n  setHasLocalMutations() {\n    return this.documentState = 1\n    /* DocumentState.HAS_LOCAL_MUTATIONS */\n    , this.version = le.min(), this;\n  }\n\n  setReadTime(t) {\n    return this.readTime = t, this;\n  }\n\n  get hasLocalMutations() {\n    return 1\n    /* DocumentState.HAS_LOCAL_MUTATIONS */\n    === this.documentState;\n  }\n\n  get hasCommittedMutations() {\n    return 2\n    /* DocumentState.HAS_COMMITTED_MUTATIONS */\n    === this.documentState;\n  }\n\n  get hasPendingWrites() {\n    return this.hasLocalMutations || this.hasCommittedMutations;\n  }\n\n  isValidDocument() {\n    return 0\n    /* DocumentType.INVALID */\n    !== this.documentType;\n  }\n\n  isFoundDocument() {\n    return 1\n    /* DocumentType.FOUND_DOCUMENT */\n    === this.documentType;\n  }\n\n  isNoDocument() {\n    return 2\n    /* DocumentType.NO_DOCUMENT */\n    === this.documentType;\n  }\n\n  isUnknownDocument() {\n    return 3\n    /* DocumentType.UNKNOWN_DOCUMENT */\n    === this.documentType;\n  }\n\n  isEqual(t) {\n    return t instanceof _e && this.key.isEqual(t.key) && this.version.isEqual(t.version) && this.documentType === t.documentType && this.documentState === t.documentState && this.data.isEqual(t.data);\n  }\n\n  mutableCopy() {\n    return new _e(this.key, this.documentType, this.version, this.readTime, this.createTime, this.data.clone(), this.documentState);\n  }\n\n  toString() {\n    return `Document(${this.key}, ${this.version}, ${JSON.stringify(this.data.value)}, {createTime: ${this.createTime}}), {documentType: ${this.documentType}}), {documentState: ${this.documentState}})`;\n  }\n\n}\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Visible for testing\n\n\nclass ve {\n  constructor(t) {\n    let e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    let r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    let s = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    let i = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n    let o = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;\n    this.path = t, this.collectionGroup = e, this.orderBy = n, this.filters = r, this.limit = s, this.startAt = i, this.endAt = o, this.S = null;\n  }\n\n}\n/**\n * Initializes a Target with a path and optional additional query constraints.\n * Path must currently be empty if this is a collection group query.\n *\n * NOTE: you should always construct `Target` from `Query.toTarget` instead of\n * using this factory method, because `Query` provides an implicit `orderBy`\n * property.\n */\n\n\nfunction be(t) {\n  let e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  let n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  let r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  let s = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n  let i = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n  let o = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;\n  return new ve(t, e, n, r, s, i, o);\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Query encapsulates all the query attributes we support in the SDK. It can\n * be run against the LocalStore, as well as be converted to a `Target` to\n * query the RemoteStore results.\n *\n * Visible for testing.\n */\n\n\nclass Ee {\n  /**\n   * Initializes a Query with a path and optional additional query constraints.\n   * Path must currently be empty if this is a collection group query.\n   */\n  constructor(t) {\n    let e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    let r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    let s = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    let i = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : \"F\";\n    let o = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;\n    let u = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;\n    this.path = t, this.collectionGroup = e, this.explicitOrderBy = n, this.filters = r, this.limit = s, this.limitType = i, this.startAt = o, this.endAt = u, this.q = null, // The corresponding `Target` of this `Query` instance.\n    this.O = null, this.startAt, this.endAt;\n  }\n\n}\n/** Creates a new Query for a query that matches all documents at `path` */\n\n\nfunction Ie(t) {\n  return t.explicitOrderBy.length > 0 ? t.explicitOrderBy[0].field : null;\n}\n\nfunction Te(t) {\n  for (const e of t.filters) {\n    const t = e.getFirstInequalityField();\n    if (null !== t) return t;\n  }\n\n  return null;\n}\n/**\n * Creates a new Query for a collection group query that matches all documents\n * within the provided collection group.\n */\n\n/**\n * Returns whether the query matches a collection group rather than a specific\n * collection.\n */\n\n\nfunction Ae(t) {\n  return null !== t.collectionGroup;\n}\n/**\n * Returns the implicit order by constraint that is used to execute the Query,\n * which can be different from the order by constraints the user provided (e.g.\n * the SDK and backend always orders by `__name__`).\n */\n\n\nfunction Re(t) {\n  const e = I(t);\n\n  if (null === e.q) {\n    e.q = [];\n    const t = Te(e),\n          n = Ie(e);\n    if (null !== t && null === n) // In order to implicitly add key ordering, we must also add the\n      // inequality filter field for it to be a valid query.\n      // Note that the default inequality field and key ordering is ascending.\n      t.isKeyField() || e.q.push(new ae(t)), e.q.push(new ae(nt.keyField(), \"asc\"\n      /* Direction.ASCENDING */\n      ));else {\n      let t = !1;\n\n      for (const n of e.explicitOrderBy) e.q.push(n), n.field.isKeyField() && (t = !0);\n\n      if (!t) {\n        // The order of the implicit key ordering always matches the last\n        // explicit order by\n        const t = e.explicitOrderBy.length > 0 ? e.explicitOrderBy[e.explicitOrderBy.length - 1].dir : \"asc\"\n        /* Direction.ASCENDING */\n        ;\n        e.q.push(new ae(nt.keyField(), t));\n      }\n    }\n  }\n\n  return e.q;\n}\n/**\n * Converts this `Query` instance to it's corresponding `Target` representation.\n */\n\n\nfunction Pe(t) {\n  const e = I(t);\n  if (!e.O) if (\"F\"\n  /* LimitType.First */\n  === e.limitType) e.O = be(e.path, e.collectionGroup, Re(e), e.filters, e.limit, e.startAt, e.endAt);else {\n    // Flip the orderBy directions since we want the last results\n    const t = [];\n\n    for (const n of Re(e)) {\n      const e = \"desc\"\n      /* Direction.DESCENDING */\n      === n.dir ? \"asc\"\n      /* Direction.ASCENDING */\n      : \"desc\"\n      /* Direction.DESCENDING */\n      ;\n      t.push(new ae(n.field, e));\n    } // We need to swap the cursors to match the now-flipped query ordering.\n\n\n    const n = e.endAt ? new Yt(e.endAt.position, e.endAt.inclusive) : null,\n          r = e.startAt ? new Yt(e.startAt.position, e.startAt.inclusive) : null; // Now return as a LimitType.First query.\n\n    e.O = be(e.path, e.collectionGroup, t, e.filters, e.limit, n, r);\n  }\n  return e.O;\n}\n\nfunction Ve(t, e) {\n  e.getFirstInequalityField(), Te(t);\n  const n = t.filters.concat([e]);\n  return new Ee(t.path, t.collectionGroup, t.explicitOrderBy.slice(), n, t.limit, t.limitType, t.startAt, t.endAt);\n}\n\nfunction $e(t, e) {\n  return function (t, e) {\n    if (t.limit !== e.limit) return !1;\n    if (t.orderBy.length !== e.orderBy.length) return !1;\n\n    for (let n = 0; n < t.orderBy.length; n++) if (!he(t.orderBy[n], e.orderBy[n])) return !1;\n\n    if (t.filters.length !== e.filters.length) return !1;\n\n    for (let n = 0; n < t.filters.length; n++) if (!te(t.filters[n], e.filters[n])) return !1;\n\n    return t.collectionGroup === e.collectionGroup && !!t.path.isEqual(e.path) && !!Ht(t.startAt, e.startAt) && Ht(t.endAt, e.endAt);\n  }(Pe(t), Pe(e)) && t.limitType === e.limitType;\n}\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns an DoubleValue for `value` that is encoded based the serializer's\n * `useProto3Json` setting.\n */\n\n/**\n * Returns a value for a number that's appropriate to put into a proto.\n * The return value is an IntegerValue if it can safely represent the value,\n * otherwise a DoubleValue is returned.\n */\n\n\nfunction Ne(t, e) {\n  return function (t) {\n    return \"number\" == typeof t && Number.isInteger(t) && !wt(t) && t <= Number.MAX_SAFE_INTEGER && t >= Number.MIN_SAFE_INTEGER;\n  }(e) ?\n  /**\n  * Returns an IntegerValue for `value`.\n  */\n  function (t) {\n    return {\n      integerValue: \"\" + t\n    };\n  }(e) : function (t, e) {\n    if (t.useProto3Json) {\n      if (isNaN(e)) return {\n        doubleValue: \"NaN\"\n      };\n      if (e === 1 / 0) return {\n        doubleValue: \"Infinity\"\n      };\n      if (e === -1 / 0) return {\n        doubleValue: \"-Infinity\"\n      };\n    }\n\n    return {\n      doubleValue: wt(e) ? \"-0\" : e\n    };\n  }(t, e);\n}\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Used to represent a field transform on a mutation. */\n\n\nclass De {\n  constructor() {\n    // Make sure that the structural type of `TransformOperation` is unique.\n    // See https://github.com/microsoft/TypeScript/issues/5451\n    this._ = void 0;\n  }\n\n}\n/** Transforms a value into a server-generated timestamp. */\n\n\nclass Fe extends De {}\n/** Transforms an array value via a union operation. */\n\n\nclass xe extends De {\n  constructor(t) {\n    super(), this.elements = t;\n  }\n\n}\n/** Transforms an array value via a remove operation. */\n\n\nclass Se extends De {\n  constructor(t) {\n    super(), this.elements = t;\n  }\n\n}\n/**\n * Implements the backend semantics for locally computed NUMERIC_ADD (increment)\n * transforms. Converts all field values to integers or doubles, but unlike the\n * backend does not cap integer values at 2^63. Instead, JavaScript number\n * arithmetic is used and precision loss can occur for values greater than 2^53.\n */\n\n\nclass qe extends De {\n  constructor(t, e) {\n    super(), this.serializer = t, this.k = e;\n  }\n\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** A field path and the TransformOperation to perform upon it. */\n\n\nclass Oe {\n  constructor(t, e) {\n    this.field = t, this.transform = e;\n  }\n\n}\n/**\n * Encodes a precondition for a mutation. This follows the model that the\n * backend accepts with the special case of an explicit \"empty\" precondition\n * (meaning no precondition).\n */\n\n\nclass ke {\n  constructor(t, e) {\n    this.updateTime = t, this.exists = e;\n  }\n  /** Creates a new empty Precondition. */\n\n\n  static none() {\n    return new ke();\n  }\n  /** Creates a new Precondition with an exists flag. */\n\n\n  static exists(t) {\n    return new ke(void 0, t);\n  }\n  /** Creates a new Precondition based on a version a document exists at. */\n\n\n  static updateTime(t) {\n    return new ke(t);\n  }\n  /** Returns whether this Precondition is empty. */\n\n\n  get isNone() {\n    return void 0 === this.updateTime && void 0 === this.exists;\n  }\n\n  isEqual(t) {\n    return this.exists === t.exists && (this.updateTime ? !!t.updateTime && this.updateTime.isEqual(t.updateTime) : !t.updateTime);\n  }\n\n}\n/**\n * A mutation describes a self-contained change to a document. Mutations can\n * create, replace, delete, and update subsets of documents.\n *\n * Mutations not only act on the value of the document but also its version.\n *\n * For local mutations (mutations that haven't been committed yet), we preserve\n * the existing version for Set and Patch mutations. For Delete mutations, we\n * reset the version to 0.\n *\n * Here's the expected transition table.\n *\n * MUTATION           APPLIED TO            RESULTS IN\n *\n * SetMutation        Document(v3)          Document(v3)\n * SetMutation        NoDocument(v3)        Document(v0)\n * SetMutation        InvalidDocument(v0)   Document(v0)\n * PatchMutation      Document(v3)          Document(v3)\n * PatchMutation      NoDocument(v3)        NoDocument(v3)\n * PatchMutation      InvalidDocument(v0)   UnknownDocument(v3)\n * DeleteMutation     Document(v3)          NoDocument(v0)\n * DeleteMutation     NoDocument(v3)        NoDocument(v0)\n * DeleteMutation     InvalidDocument(v0)   NoDocument(v0)\n *\n * For acknowledged mutations, we use the updateTime of the WriteResponse as\n * the resulting version for Set and Patch mutations. As deletes have no\n * explicit update time, we use the commitTime of the WriteResponse for\n * Delete mutations.\n *\n * If a mutation is acknowledged by the backend but fails the precondition check\n * locally, we transition to an `UnknownDocument` and rely on Watch to send us\n * the updated version.\n *\n * Field transforms are used only with Patch and Set Mutations. We use the\n * `updateTransforms` message to store transforms, rather than the `transforms`s\n * messages.\n *\n * ## Subclassing Notes\n *\n * Every type of mutation needs to implement its own applyToRemoteDocument() and\n * applyToLocalView() to implement the actual behavior of applying the mutation\n * to some source document (see `setMutationApplyToRemoteDocument()` for an\n * example).\n */\n\n\nclass Ce {}\n/**\n * A mutation that creates or replaces the document at the given key with the\n * object value contents.\n */\n\n\nclass Me extends Ce {\n  constructor(t, e, n) {\n    let r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    super(), this.key = t, this.value = e, this.precondition = n, this.fieldTransforms = r, this.type = 0\n    /* MutationType.Set */\n    ;\n  }\n\n  getFieldMask() {\n    return null;\n  }\n\n}\n/**\n * A mutation that modifies fields of the document at the given key with the\n * given values. The values are applied through a field mask:\n *\n *  * When a field is in both the mask and the values, the corresponding field\n *    is updated.\n *  * When a field is in neither the mask nor the values, the corresponding\n *    field is unmodified.\n *  * When a field is in the mask but not in the values, the corresponding field\n *    is deleted.\n *  * When a field is not in the mask but is in the values, the values map is\n *    ignored.\n */\n\n\nclass Le extends Ce {\n  constructor(t, e, n, r) {\n    let s = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n    super(), this.key = t, this.data = e, this.fieldMask = n, this.precondition = r, this.fieldTransforms = s, this.type = 1\n    /* MutationType.Patch */\n    ;\n  }\n\n  getFieldMask() {\n    return this.fieldMask;\n  }\n\n}\n/** A mutation that deletes the document at the given key. */\n\n\nclass Ue extends Ce {\n  constructor(t, e) {\n    super(), this.key = t, this.precondition = e, this.type = 2\n    /* MutationType.Delete */\n    , this.fieldTransforms = [];\n  }\n\n  getFieldMask() {\n    return null;\n  }\n\n}\n/**\n * A mutation that verifies the existence of the document at the given key with\n * the provided precondition.\n *\n * The `verify` operation is only used in Transactions, and this class serves\n * primarily to facilitate serialization into protos.\n */\n\n\nclass je extends Ce {\n  constructor(t, e) {\n    super(), this.key = t, this.precondition = e, this.type = 3\n    /* MutationType.Verify */\n    , this.fieldTransforms = [];\n  }\n\n  getFieldMask() {\n    return null;\n  }\n\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nconst Be = (() => {\n  const t = {\n    asc: \"ASCENDING\",\n    desc: \"DESCENDING\"\n  };\n  return t;\n})(),\n      Qe = (() => {\n  const t = {\n    \"<\": \"LESS_THAN\",\n    \"<=\": \"LESS_THAN_OR_EQUAL\",\n    \">\": \"GREATER_THAN\",\n    \">=\": \"GREATER_THAN_OR_EQUAL\",\n    \"==\": \"EQUAL\",\n    \"!=\": \"NOT_EQUAL\",\n    \"array-contains\": \"ARRAY_CONTAINS\",\n    in: \"IN\",\n    \"not-in\": \"NOT_IN\",\n    \"array-contains-any\": \"ARRAY_CONTAINS_ANY\"\n  };\n  return t;\n})(),\n      ze = (() => {\n  const t = {\n    and: \"AND\",\n    or: \"OR\"\n  };\n  return t;\n})();\n/**\n * This class generates JsonObject values for the Datastore API suitable for\n * sending to either GRPC stub methods or via the JSON/HTTP REST API.\n *\n * The serializer supports both Protobuf.js and Proto3 JSON formats. By\n * setting `useProto3Json` to true, the serializer will use the Proto3 JSON\n * format.\n *\n * For a description of the Proto3 JSON format check\n * https://developers.google.com/protocol-buffers/docs/proto3#json\n *\n * TODO(klimt): We can remove the databaseId argument if we keep the full\n * resource name in documents.\n */\n\n\nclass We {\n  constructor(t, e) {\n    this.databaseId = t, this.useProto3Json = e;\n  }\n\n}\n/**\n * Returns a value for a number (or null) that's appropriate to put into\n * a google.protobuf.Int32Value proto.\n * DO NOT USE THIS FOR ANYTHING ELSE.\n * This method cheats. It's typed as returning \"number\" because that's what\n * our generated proto interfaces say Int32Value must be. But GRPC actually\n * expects a { value: <number> } struct.\n */\n\n/**\n * Returns a value for a Date that's appropriate to put into a proto.\n */\n\n\nfunction Ge(t, e) {\n  if (t.useProto3Json) {\n    return `${new Date(1e3 * e.seconds).toISOString().replace(/\\.\\d*/, \"\").replace(\"Z\", \"\")}.${(\"000000000\" + e.nanoseconds).slice(-9)}Z`;\n  }\n\n  return {\n    seconds: \"\" + e.seconds,\n    nanos: e.nanoseconds\n  };\n}\n/**\n * Returns a value for bytes that's appropriate to put in a proto.\n *\n * Visible for testing.\n */\n\n\nfunction Ke(t, e) {\n  return t.useProto3Json ? e.toBase64() : e.toUint8Array();\n}\n\nfunction Ye(t, e) {\n  return Ge(t, e.toTimestamp());\n}\n\nfunction He(t) {\n  return E(!!t), le.fromTimestamp(function (t) {\n    const e = Nt(t);\n    return new xt(e.seconds, e.nanos);\n  }(t));\n}\n\nfunction Je(t, e) {\n  return function (t) {\n    return new tt([\"projects\", t.projectId, \"databases\", t.database]);\n  }(t).child(\"documents\").child(e).canonicalString();\n}\n\nfunction Xe(t, e) {\n  return Je(t.databaseId, e.path);\n}\n\nfunction Ze(t, e) {\n  const n = function (t) {\n    const e = tt.fromString(t);\n    return E(dn(e)), e;\n  }(e);\n\n  if (n.get(1) !== t.databaseId.projectId) throw new U(P, \"Tried to deserialize key from different project: \" + n.get(1) + \" vs \" + t.databaseId.projectId);\n  if (n.get(3) !== t.databaseId.database) throw new U(P, \"Tried to deserialize key from different database: \" + n.get(3) + \" vs \" + t.databaseId.database);\n  return new rt((E((r = n).length > 4 && \"documents\" === r.get(4)), r.popFirst(5)));\n  var r;\n  /** Creates a Document proto from key and fields (but no create/update time) */\n}\n\nfunction tn(t, e) {\n  return Je(t.databaseId, e);\n}\n\nfunction en(t) {\n  return new tt([\"projects\", t.databaseId.projectId, \"databases\", t.databaseId.database]).canonicalString();\n}\n\nfunction nn(t, e, n) {\n  return {\n    name: Xe(t, e),\n    fields: n.value.mapValue.fields\n  };\n}\n\nfunction rn(t, e) {\n  return \"found\" in e ? function (t, e) {\n    E(!!e.found), e.found.name, e.found.updateTime;\n    const n = Ze(t, e.found.name),\n          r = He(e.found.updateTime),\n          s = e.found.createTime ? He(e.found.createTime) : le.min(),\n          i = new ge({\n      mapValue: {\n        fields: e.found.fields\n      }\n    });\n    return _e.newFoundDocument(n, r, s, i);\n  }(t, e) : \"missing\" in e ? function (t, e) {\n    E(!!e.missing), E(!!e.readTime);\n    const n = Ze(t, e.missing),\n          r = He(e.readTime);\n    return _e.newNoDocument(n, r);\n  }(t, e) : b();\n}\n\nfunction sn(t, e) {\n  let n;\n  if (e instanceof Me) n = {\n    update: nn(t, e.key, e.value)\n  };else if (e instanceof Ue) n = {\n    delete: Xe(t, e.key)\n  };else if (e instanceof Le) n = {\n    update: nn(t, e.key, e.data),\n    updateMask: fn(e.fieldMask)\n  };else {\n    if (!(e instanceof je)) return b();\n    n = {\n      verify: Xe(t, e.key)\n    };\n  }\n  return e.fieldTransforms.length > 0 && (n.updateTransforms = e.fieldTransforms.map(t => function (t, e) {\n    const n = e.transform;\n    if (n instanceof Fe) return {\n      fieldPath: e.field.canonicalString(),\n      setToServerValue: \"REQUEST_TIME\"\n    };\n    if (n instanceof xe) return {\n      fieldPath: e.field.canonicalString(),\n      appendMissingElements: {\n        values: n.elements\n      }\n    };\n    if (n instanceof Se) return {\n      fieldPath: e.field.canonicalString(),\n      removeAllFromArray: {\n        values: n.elements\n      }\n    };\n    if (n instanceof qe) return {\n      fieldPath: e.field.canonicalString(),\n      increment: n.k\n    };\n    throw b();\n  }(0, t))), e.precondition.isNone || (n.currentDocument = function (t, e) {\n    return void 0 !== e.updateTime ? {\n      updateTime: Ye(t, e.updateTime)\n    } : void 0 !== e.exists ? {\n      exists: e.exists\n    } : b();\n  }(t, e.precondition)), n;\n}\n\nfunction on(t, e) {\n  // Dissect the path into parent, collectionId, and optional key filter.\n  const n = {\n    structuredQuery: {}\n  },\n        r = e.path;\n  null !== e.collectionGroup ? (n.parent = tn(t, r), n.structuredQuery.from = [{\n    collectionId: e.collectionGroup,\n    allDescendants: !0\n  }]) : (n.parent = tn(t, r.popLast()), n.structuredQuery.from = [{\n    collectionId: r.lastSegment()\n  }]);\n\n  const s = function (t) {\n    if (0 === t.length) return;\n    return ln(Zt.create(t, \"and\"\n    /* CompositeOperator.AND */\n    ));\n  }(e.filters);\n\n  s && (n.structuredQuery.where = s);\n\n  const i = function (t) {\n    if (0 === t.length) return;\n    return t.map(t => // visible for testing\n    function (t) {\n      return {\n        field: hn(t.field),\n        direction: un(t.dir)\n      };\n    } // visible for testing\n    (t));\n  }(e.orderBy);\n\n  i && (n.structuredQuery.orderBy = i);\n\n  const o = function (t, e) {\n    return t.useProto3Json || dt(e) ? e : {\n      value: e\n    };\n  }(t, e.limit);\n\n  var u;\n  return null !== o && (n.structuredQuery.limit = o), e.startAt && (n.structuredQuery.startAt = {\n    before: (u = e.startAt).inclusive,\n    values: u.position\n  }), e.endAt && (n.structuredQuery.endAt = function (t) {\n    return {\n      before: !t.inclusive,\n      values: t.position\n    };\n  } // visible for testing\n  (e.endAt)), n;\n}\n\nfunction un(t) {\n  return Be[t];\n} // visible for testing\n\n\nfunction cn(t) {\n  return Qe[t];\n}\n\nfunction an(t) {\n  return ze[t];\n}\n\nfunction hn(t) {\n  return {\n    fieldPath: t.canonicalString()\n  };\n}\n\nfunction ln(t) {\n  return t instanceof Xt ? function (t) {\n    if (\"==\"\n    /* Operator.EQUAL */\n    === t.op) {\n      if (Wt(t.value)) return {\n        unaryFilter: {\n          field: hn(t.field),\n          op: \"IS_NAN\"\n        }\n      };\n      if (zt(t.value)) return {\n        unaryFilter: {\n          field: hn(t.field),\n          op: \"IS_NULL\"\n        }\n      };\n    } else if (\"!=\"\n    /* Operator.NOT_EQUAL */\n    === t.op) {\n      if (Wt(t.value)) return {\n        unaryFilter: {\n          field: hn(t.field),\n          op: \"IS_NOT_NAN\"\n        }\n      };\n      if (zt(t.value)) return {\n        unaryFilter: {\n          field: hn(t.field),\n          op: \"IS_NOT_NULL\"\n        }\n      };\n    }\n\n    return {\n      fieldFilter: {\n        field: hn(t.field),\n        op: cn(t.op),\n        value: t.value\n      }\n    };\n  }(t) : t instanceof Zt ? function (t) {\n    const e = t.getFilters().map(t => ln(t));\n    if (1 === e.length) return e[0];\n    return {\n      compositeFilter: {\n        op: an(t.op),\n        filters: e\n      }\n    };\n  }(t) : b();\n}\n\nfunction fn(t) {\n  const e = [];\n  return t.fields.forEach(t => e.push(t.canonicalString())), {\n    fieldPaths: e\n  };\n}\n\nfunction dn(t) {\n  // Resource names have at least 4 components (project ID, database ID)\n  return t.length >= 4 && \"projects\" === t.get(0) && \"databases\" === t.get(2);\n}\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nfunction wn(t) {\n  return new We(t,\n  /* useProto3Json= */\n  !0);\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A helper for running delayed tasks following an exponential backoff curve\n * between attempts.\n *\n * Each delay is made up of a \"base\" delay which follows the exponential\n * backoff curve, and a +/- 50% \"jitter\" that is calculated and added to the\n * base delay. This prevents clients from accidentally synchronizing their\n * delays causing spikes of load to the backend.\n */\n\n\nclass mn {\n  constructor(\n  /**\n   * The AsyncQueue to run backoff operations on.\n   */\n  t,\n  /**\n   * The ID to use when scheduling backoff operations on the AsyncQueue.\n   */\n  e) {\n    let n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1e3;\n    let r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1.5;\n    let s = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 6e4;\n    this.C = t, this.timerId = e, this.M = n, this.L = r, this.U = s, this.j = 0, this.B = null,\n    /** The last backoff attempt, as epoch milliseconds. */\n    this.W = Date.now(), this.reset();\n  }\n  /**\n   * Resets the backoff delay.\n   *\n   * The very next backoffAndWait() will have no delay. If it is called again\n   * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and\n   * subsequent ones will increase according to the backoffFactor.\n   */\n\n\n  reset() {\n    this.j = 0;\n  }\n  /**\n   * Resets the backoff delay to the maximum delay (e.g. for use after a\n   * RESOURCE_EXHAUSTED error).\n   */\n\n\n  G() {\n    this.j = this.U;\n  }\n  /**\n   * Returns a promise that resolves after currentDelayMs, and increases the\n   * delay for any subsequent attempts. If there was a pending backoff operation\n   * already, it will be canceled.\n   */\n\n\n  K(t) {\n    // Cancel any pending backoff operation.\n    this.cancel(); // First schedule using the current base (which may be 0 and should be\n    // honored as such).\n\n    const e = Math.floor(this.j + this.Y()),\n          n = Math.max(0, Date.now() - this.W),\n          r = Math.max(0, e - n); // Guard against lastAttemptTime being in the future due to a clock change.\n\n    r > 0 && y(\"ExponentialBackoff\", `Backing off for ${r} ms (base delay: ${this.j} ms, delay with jitter: ${e} ms, last attempt: ${n} ms ago)`), this.B = this.C.enqueueAfterDelay(this.timerId, r, () => (this.W = Date.now(), t())), // Apply backoff factor to determine next delay and ensure it is within\n    // bounds.\n    this.j *= this.L, this.j < this.M && (this.j = this.M), this.j > this.U && (this.j = this.U);\n  }\n\n  H() {\n    null !== this.B && (this.B.skipDelay(), this.B = null);\n  }\n\n  cancel() {\n    null !== this.B && (this.B.cancel(), this.B = null);\n  }\n  /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */\n\n\n  Y() {\n    return (Math.random() - .5) * this.j;\n  }\n\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Datastore and its related methods are a wrapper around the external Google\n * Cloud Datastore grpc API, which provides an interface that is more convenient\n * for the rest of the client SDK architecture to consume.\n */\n\n/**\n * An implementation of Datastore that exposes additional state for internal\n * consumption.\n */\n\n\nclass pn extends class {} {\n  constructor(t, e, n, r) {\n    super(), this.authCredentials = t, this.appCheckCredentials = e, this.connection = n, this.serializer = r, this.J = !1;\n  }\n\n  X() {\n    if (this.J) throw new U(S, \"The client has already been terminated.\");\n  }\n  /** Invokes the provided RPC with auth and AppCheck tokens. */\n\n\n  v(t, e, n) {\n    return this.X(), Promise.all([this.authCredentials.getToken(), this.appCheckCredentials.getToken()]).then(_ref => {\n      let [r, s] = _ref;\n      return this.connection.v(t, e, n, r, s);\n    }).catch(t => {\n      throw \"FirebaseError\" === t.name ? (t.code === F && (this.authCredentials.invalidateToken(), this.appCheckCredentials.invalidateToken()), t) : new U(R, t.toString());\n    });\n  }\n  /** Invokes the provided RPC with streamed results with auth and AppCheck tokens. */\n\n\n  R(t, e, n, r) {\n    return this.X(), Promise.all([this.authCredentials.getToken(), this.appCheckCredentials.getToken()]).then(_ref2 => {\n      let [s, i] = _ref2;\n      return this.connection.R(t, e, n, s, i, r);\n    }).catch(t => {\n      throw \"FirebaseError\" === t.name ? (t.code === F && (this.authCredentials.invalidateToken(), this.appCheckCredentials.invalidateToken()), t) : new U(R, t.toString());\n    });\n  }\n\n  terminate() {\n    this.J = !0;\n  }\n\n} // TODO(firestorexp): Make sure there is only one Datastore instance per\n// firestore-exp client.\n\n\nasync function yn(t, e) {\n  const n = I(t),\n        r = en(n.serializer) + \"/documents\",\n        s = {\n    writes: e.map(t => sn(n.serializer, t))\n  };\n  await n.v(\"Commit\", r, s);\n}\n\nasync function gn(t, e) {\n  const n = I(t),\n        r = en(n.serializer) + \"/documents\",\n        s = {\n    documents: e.map(t => Xe(n.serializer, t))\n  },\n        i = await n.R(\"BatchGetDocuments\", r, s, e.length),\n        o = new Map();\n  i.forEach(t => {\n    const e = rn(n.serializer, t);\n    o.set(e.key.toString(), e);\n  });\n  const u = [];\n  return e.forEach(t => {\n    const e = o.get(t.toString());\n    E(!!e), u.push(e);\n  }), u;\n}\n\nasync function _n(t, e) {\n  const n = I(t),\n        r = on(n.serializer, Pe(e));\n  return (await n.R(\"RunQuery\", r.parent, {\n    structuredQuery: r.structuredQuery\n  })).filter(t => !!t.document).map(t => function (t, e, n) {\n    const r = Ze(t, e.name),\n          s = He(e.updateTime),\n          i = e.createTime ? He(e.createTime) : le.min(),\n          o = new ge({\n      mapValue: {\n        fields: e.fields\n      }\n    }),\n          u = _e.newFoundDocument(r, s, i, o);\n\n    return n && u.setHasCommittedMutations(), n ? u.setHasCommittedMutations() : u;\n  }(n.serializer, t.document, void 0));\n}\n\nasync function vn(t, e, n) {\n  var r;\n\n  const s = I(t),\n        {\n    request: i,\n    Z: o\n  } = function (t, e, n) {\n    const r = on(t, e),\n          s = {},\n          i = [];\n    let o = 0;\n    return n.forEach(t => {\n      // Map all client-side aliases to a unique short-form\n      // alias. This avoids issues with client-side aliases that\n      // exceed the 1500-byte string size limit.\n      const e = \"aggregate_\" + o++;\n      s[e] = t.alias, \"count\" === t.$ ? i.push({\n        alias: e,\n        count: {}\n      }) : \"avg\" === t.$ ? i.push({\n        alias: e,\n        avg: {\n          field: hn(t.fieldPath)\n        }\n      }) : \"sum\" === t.$ && i.push({\n        alias: e,\n        sum: {\n          field: hn(t.fieldPath)\n        }\n      });\n    }), {\n      request: {\n        structuredAggregationQuery: {\n          aggregations: i,\n          structuredQuery: r.structuredQuery\n        },\n        parent: r.parent\n      },\n      Z: s\n    };\n  }(s.serializer, Pe(e), n),\n        u = i.parent;\n\n  s.connection.g || delete i.parent;\n  const c = (await s.R(\"RunAggregationQuery\", u, i,\n  /*expectedResponseCount=*/\n  1)).filter(t => !!t.result); // Omit RunAggregationQueryResponse that only contain readTimes.\n\n  E(1 === c.length); // Remap the short-form aliases that were sent to the server\n  // to the client-side aliases. Users will access the results\n  // using the client-side alias.\n\n  const a = null === (r = c[0].result) || void 0 === r ? void 0 : r.aggregateFields;\n  return Object.keys(a).reduce((t, e) => (t[o[e]] = a[e], t), {});\n}\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nconst bn = new Map();\n/**\n * An instance map that ensures only one Datastore exists per Firestore\n * instance.\n */\n\n/**\n * Returns an initialized and started Datastore for the given Firestore\n * instance. Callers must invoke removeComponents() when the Firestore\n * instance is terminated.\n */\n\nfunction En(t) {\n  if (t._terminated) throw new U(S, \"The client has already been terminated.\");\n\n  if (!bn.has(t)) {\n    y(\"ComponentProvider\", \"Initializing Datastore\");\n\n    const i = function (t) {\n      return new _t(t, fetch.bind(null));\n    }((e = t._databaseId, n = t.app.options.appId || \"\", r = t._persistenceKey, s = t._freezeSettings(), new J(e, n, r, s.host, s.ssl, s.experimentalForceLongPolling, s.experimentalAutoDetectLongPolling, ht(s.experimentalLongPollingOptions), s.useFetchStreams))),\n          o = wn(t._databaseId),\n          u = function (t, e, n, r) {\n      return new pn(t, e, n, r);\n    }(t._authCredentials, t._appCheckCredentials, i, o);\n\n    bn.set(t, u);\n  }\n\n  var e, n, r, s;\n  /**\n  * @license\n  * Copyright 2018 Google LLC\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n\n  return bn.get(t);\n}\n/**\n * Removes all components associated with the provided instance. Must be called\n * when the `Firestore` instance is terminated.\n */\n\n/**\n * A concrete type describing all the values that can be applied via a\n * user-supplied `FirestoreSettings` object. This is a separate type so that\n * defaults can be supplied and the value can be checked for equality.\n */\n\n\nclass In {\n  constructor(t) {\n    var e, n;\n\n    if (void 0 === t.host) {\n      if (void 0 !== t.ssl) throw new U(P, \"Can't provide ssl option if host option is not set\");\n      this.host = \"firestore.googleapis.com\", this.ssl = true;\n    } else this.host = t.host, this.ssl = null === (e = t.ssl) || void 0 === e || e;\n\n    if (this.credentials = t.credentials, this.ignoreUndefinedProperties = !!t.ignoreUndefinedProperties, this.cache = t.localCache, void 0 === t.cacheSizeBytes) this.cacheSizeBytes = 41943040;else {\n      if (-1 !== t.cacheSizeBytes && t.cacheSizeBytes < 1048576) throw new U(P, \"cacheSizeBytes must be at least 1048576\");\n      this.cacheSizeBytes = t.cacheSizeBytes;\n    }\n    !function (t, e, n, r) {\n      if (!0 === e && !0 === r) throw new U(P, `${t} and ${n} cannot be used together.`);\n    }(\"experimentalForceLongPolling\", t.experimentalForceLongPolling, \"experimentalAutoDetectLongPolling\", t.experimentalAutoDetectLongPolling), this.experimentalForceLongPolling = !!t.experimentalForceLongPolling, this.experimentalForceLongPolling ? this.experimentalAutoDetectLongPolling = !1 : void 0 === t.experimentalAutoDetectLongPolling ? this.experimentalAutoDetectLongPolling = true : // For backwards compatibility, coerce the value to boolean even though\n    // the TypeScript compiler has narrowed the type to boolean already.\n    // noinspection PointlessBooleanExpressionJS\n    this.experimentalAutoDetectLongPolling = !!t.experimentalAutoDetectLongPolling, this.experimentalLongPollingOptions = ht(null !== (n = t.experimentalLongPollingOptions) && void 0 !== n ? n : {}), function (t) {\n      if (void 0 !== t.timeoutSeconds) {\n        if (isNaN(t.timeoutSeconds)) throw new U(P, `invalid long polling timeout: ${t.timeoutSeconds} (must not be NaN)`);\n        if (t.timeoutSeconds < 5) throw new U(P, `invalid long polling timeout: ${t.timeoutSeconds} (minimum allowed value is 5)`);\n        if (t.timeoutSeconds > 30) throw new U(P, `invalid long polling timeout: ${t.timeoutSeconds} (maximum allowed value is 30)`);\n      }\n    }\n    /**\n    * @license\n    * Copyright 2020 Google LLC\n    *\n    * Licensed under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License.\n    * You may obtain a copy of the License at\n    *\n    *   http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software\n    * distributed under the License is distributed on an \"AS IS\" BASIS,\n    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    * See the License for the specific language governing permissions and\n    * limitations under the License.\n    */\n\n    /**\n    * The Cloud Firestore service interface.\n    *\n    * Do not call this constructor directly. Instead, use {@link (getFirestore:1)}.\n    */\n    (this.experimentalLongPollingOptions), this.useFetchStreams = !!t.useFetchStreams;\n  }\n\n  isEqual(t) {\n    return this.host === t.host && this.ssl === t.ssl && this.credentials === t.credentials && this.cacheSizeBytes === t.cacheSizeBytes && this.experimentalForceLongPolling === t.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === t.experimentalAutoDetectLongPolling && (e = this.experimentalLongPollingOptions, n = t.experimentalLongPollingOptions, e.timeoutSeconds === n.timeoutSeconds) && this.ignoreUndefinedProperties === t.ignoreUndefinedProperties && this.useFetchStreams === t.useFetchStreams;\n    var e, n;\n  }\n\n}\n\nclass Tn {\n  /** @hideconstructor */\n  constructor(t, e, n, r) {\n    this._authCredentials = t, this._appCheckCredentials = e, this._databaseId = n, this._app = r,\n    /**\n     * Whether it's a Firestore or Firestore Lite instance.\n     */\n    this.type = \"firestore-lite\", this._persistenceKey = \"(lite)\", this._settings = new In({}), this._settingsFrozen = !1;\n  }\n  /**\n   * The {@link @firebase/app#FirebaseApp} associated with this `Firestore` service\n   * instance.\n   */\n\n\n  get app() {\n    if (!this._app) throw new U(S, \"Firestore was not initialized using the Firebase SDK. 'app' is not available\");\n    return this._app;\n  }\n\n  get _initialized() {\n    return this._settingsFrozen;\n  }\n\n  get _terminated() {\n    return void 0 !== this._terminateTask;\n  }\n\n  _setSettings(t) {\n    if (this._settingsFrozen) throw new U(S, \"Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.\");\n    this._settings = new In(t), void 0 !== t.credentials && (this._authCredentials = function (t) {\n      if (!t) return new Q();\n\n      switch (t.type) {\n        case \"firstParty\":\n          return new K(t.sessionIndex || \"0\", t.iamToken || null, t.authTokenFactory || null);\n\n        case \"provider\":\n          return t.client;\n\n        default:\n          throw new U(P, \"makeAuthCredentialsProvider failed due to invalid credential type\");\n      }\n    }(t.credentials));\n  }\n\n  _getSettings() {\n    return this._settings;\n  }\n\n  _freezeSettings() {\n    return this._settingsFrozen = !0, this._settings;\n  }\n\n  _delete() {\n    return this._terminateTask || (this._terminateTask = this._terminate()), this._terminateTask;\n  }\n  /** Returns a JSON-serializable representation of this `Firestore` instance. */\n\n\n  toJSON() {\n    return {\n      app: this._app,\n      databaseId: this._databaseId,\n      settings: this._settings\n    };\n  }\n  /**\n   * Terminates all components used by this client. Subclasses can override\n   * this method to clean up their own dependencies, but must also call this\n   * method.\n   *\n   * Only ever called once.\n   */\n\n\n  _terminate() {\n    return function (t) {\n      const e = bn.get(t);\n      e && (y(\"ComponentProvider\", \"Removing Datastore\"), bn.delete(t), e.terminate());\n    }(this), Promise.resolve();\n  }\n\n}\n\nfunction An(t, e, n) {\n  n || (n = \"(default)\");\n\n  const r = _getProvider(t, \"firestore/lite\");\n\n  if (r.isInitialized(n)) throw new U(S, \"Firestore can only be initialized once per app.\");\n  return r.initialize({\n    options: e,\n    instanceIdentifier: n\n  });\n}\n\nfunction Rn(e, n) {\n  const r = \"object\" == typeof e ? e : getApp(),\n        s = \"string\" == typeof e ? e : n || \"(default)\",\n        i = _getProvider(r, \"firestore/lite\").getImmediate({\n    identifier: s\n  });\n\n  if (!i._initialized) {\n    const t = getDefaultEmulatorHostnameAndPort(\"firestore\");\n    t && Pn(i, ...t);\n  }\n\n  return i;\n}\n/**\n * Modify this instance to communicate with the Cloud Firestore emulator.\n *\n * Note: This must be called before this instance has been used to do any\n * operations.\n *\n * @param firestore - The `Firestore` instance to configure to connect to the\n * emulator.\n * @param host - the emulator host (ex: localhost).\n * @param port - the emulator port (ex: 9000).\n * @param options.mockUserToken - the mock auth token to use for unit testing\n * Security Rules.\n */\n\n\nfunction Pn(t, e, n) {\n  let r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var s;\n\n  const i = (t = ct(t, Tn))._getSettings(),\n        o = `${e}:${n}`;\n\n  if (\"firestore.googleapis.com\" !== i.host && i.host !== o && _(\"Host has been set in both settings() and connectFirestoreEmulator(), emulator host will be used.\"), t._setSettings(Object.assign(Object.assign({}, i), {\n    host: o,\n    ssl: !1\n  })), r.mockUserToken) {\n    let e, n;\n    if (\"string\" == typeof r.mockUserToken) e = r.mockUserToken, n = d.MOCK_USER;else {\n      // Let createMockUserToken validate first (catches common mistakes like\n      // invalid field \"uid\" and missing field \"sub\" / \"user_id\".)\n      e = createMockUserToken(r.mockUserToken, null === (s = t._app) || void 0 === s ? void 0 : s.options.projectId);\n      const i = r.mockUserToken.sub || r.mockUserToken.user_id;\n      if (!i) throw new U(P, \"mockUserToken must contain 'sub' or 'user_id' field!\");\n      n = new d(i);\n    }\n    t._authCredentials = new z(new B(e, n));\n  }\n}\n/**\n * Terminates the provided `Firestore` instance.\n *\n * After calling `terminate()` only the `clearIndexedDbPersistence()` functions\n * may be used. Any other function will throw a `FirestoreError`. Termination\n * does not cancel any pending writes, and any promises that are awaiting a\n * response from the server will not be resolved.\n *\n * To restart after termination, create a new instance of `Firestore` with\n * {@link (getFirestore:1)}.\n *\n * Note: Under normal circumstances, calling `terminate()` is not required. This\n * function is useful only when you want to force this instance to release all of\n * its resources or in combination with {@link clearIndexedDbPersistence} to\n * ensure that all local state is destroyed between test runs.\n *\n * @param firestore - The `Firestore` instance to terminate.\n * @returns A `Promise` that is resolved when the instance has been successfully\n * terminated.\n */\n\n\nfunction Vn(t) {\n  return t = ct(t, Tn), _removeServiceInstance(t.app, \"firestore/lite\"), t._delete();\n}\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Represents an aggregation that can be performed by Firestore.\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\nclass $n {\n  /**\n   * Create a new AggregateField<T>\n   * @param _aggregateType Specifies the type of aggregation operation to perform.\n   * @param _internalFieldPath Optionally specifies the field that is aggregated.\n   * @internal\n   */\n  constructor() {\n    let t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"count\";\n    let e = arguments.length > 1 ? arguments[1] : undefined;\n    this._aggregateType = t, this._internalFieldPath = e,\n    /** A type string to uniquely identify instances of this class. */\n    this.type = \"AggregateField\";\n  }\n\n}\n/**\n * The results of executing an aggregation query.\n */\n\n\nclass Nn {\n  /** @hideconstructor */\n  constructor(t, e, n) {\n    this._userDataWriter = e, this._data = n,\n    /** A type string to uniquely identify instances of this class. */\n    this.type = \"AggregateQuerySnapshot\", this.query = t;\n  }\n  /**\n   * Returns the results of the aggregations performed over the underlying\n   * query.\n   *\n   * The keys of the returned object will be the same as those of the\n   * `AggregateSpec` object specified to the aggregation method, and the values\n   * will be the corresponding aggregation result.\n   *\n   * @returns The results of the aggregations performed over the underlying\n   * query.\n   */\n\n\n  data() {\n    return this._userDataWriter.convertObjectMap(this._data);\n  }\n\n}\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A `DocumentReference` refers to a document location in a Firestore database\n * and can be used to write, read, or listen to the location. The document at\n * the referenced location may or may not exist.\n */\n\n\nclass Dn {\n  /** @hideconstructor */\n  constructor(t,\n  /**\n   * If provided, the `FirestoreDataConverter` associated with this instance.\n   */\n  e, n) {\n    this.converter = e, this._key = n,\n    /** The type of this Firestore reference. */\n    this.type = \"document\", this.firestore = t;\n  }\n\n  get _path() {\n    return this._key.path;\n  }\n  /**\n   * The document's identifier within its collection.\n   */\n\n\n  get id() {\n    return this._key.path.lastSegment();\n  }\n  /**\n   * A string representing the path of the referenced document (relative\n   * to the root of the database).\n   */\n\n\n  get path() {\n    return this._key.path.canonicalString();\n  }\n  /**\n   * The collection this `DocumentReference` belongs to.\n   */\n\n\n  get parent() {\n    return new xn(this.firestore, this.converter, this._key.path.popLast());\n  }\n\n  withConverter(t) {\n    return new Dn(this.firestore, t, this._key);\n  }\n\n}\n/**\n * A `Query` refers to a query which you can read or listen to. You can also\n * construct refined `Query` objects by adding filters and ordering.\n */\n\n\nclass Fn {\n  // This is the lite version of the Query class in the main SDK.\n\n  /** @hideconstructor protected */\n  constructor(t,\n  /**\n   * If provided, the `FirestoreDataConverter` associated with this instance.\n   */\n  e, n) {\n    this.converter = e, this._query = n,\n    /** The type of this Firestore reference. */\n    this.type = \"query\", this.firestore = t;\n  }\n\n  withConverter(t) {\n    return new Fn(this.firestore, t, this._query);\n  }\n\n}\n/**\n * A `CollectionReference` object can be used for adding documents, getting\n * document references, and querying for documents (using {@link (query:1)}).\n */\n\n\nclass xn extends Fn {\n  /** @hideconstructor */\n  constructor(t, e, n) {\n    super(t, e, new Ee(n)), this._path = n,\n    /** The type of this Firestore reference. */\n    this.type = \"collection\";\n  }\n  /** The collection's identifier. */\n\n\n  get id() {\n    return this._query.path.lastSegment();\n  }\n  /**\n   * A string representing the path of the referenced collection (relative\n   * to the root of the database).\n   */\n\n\n  get path() {\n    return this._query.path.canonicalString();\n  }\n  /**\n   * A reference to the containing `DocumentReference` if this is a\n   * subcollection. If this isn't a subcollection, the reference is null.\n   */\n\n\n  get parent() {\n    const t = this._path.popLast();\n\n    return t.isEmpty() ? null : new Dn(this.firestore,\n    /* converter= */\n    null, new rt(t));\n  }\n\n  withConverter(t) {\n    return new xn(this.firestore, t, this._path);\n  }\n\n}\n\nfunction Sn(t, e) {\n  for (var _len5 = arguments.length, n = new Array(_len5 > 2 ? _len5 - 2 : 0), _key5 = 2; _key5 < _len5; _key5++) {\n    n[_key5 - 2] = arguments[_key5];\n  }\n\n  if (t = getModularInstance(t), st(\"collection\", \"path\", e), t instanceof Tn) {\n    const r = tt.fromString(e, ...n);\n    return ot(r), new xn(t,\n    /* converter= */\n    null, r);\n  }\n\n  {\n    if (!(t instanceof Dn || t instanceof xn)) throw new U(P, \"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore\");\n\n    const r = t._path.child(tt.fromString(e, ...n));\n\n    return ot(r), new xn(t.firestore,\n    /* converter= */\n    null, r);\n  }\n} // TODO(firestorelite): Consider using ErrorFactory -\n// https://github.com/firebase/firebase-js-sdk/blob/0131e1f/packages/util/src/errors.ts#L106\n\n/**\n * Creates and returns a new `Query` instance that includes all documents in the\n * database that are contained in a collection or subcollection with the\n * given `collectionId`.\n *\n * @param firestore - A reference to the root `Firestore` instance.\n * @param collectionId - Identifies the collections to query over. Every\n * collection or subcollection with this ID as the last segment of its path\n * will be included. Cannot contain a slash.\n * @returns The created `Query`.\n */\n\n\nfunction qn(t, e) {\n  if (t = ct(t, Tn), st(\"collectionGroup\", \"collection id\", e), e.indexOf(\"/\") >= 0) throw new U(P, `Invalid collection ID '${e}' passed to function collectionGroup(). Collection IDs must not contain '/'.`);\n  return new Fn(t,\n  /* converter= */\n  null, function (t) {\n    return new Ee(tt.emptyPath(), t);\n  }(e));\n}\n\nfunction On(t, e) {\n  for (var _len6 = arguments.length, n = new Array(_len6 > 2 ? _len6 - 2 : 0), _key6 = 2; _key6 < _len6; _key6++) {\n    n[_key6 - 2] = arguments[_key6];\n  }\n\n  if (t = getModularInstance(t), // We allow omission of 'pathString' but explicitly prohibit passing in both\n  // 'undefined' and 'null'.\n  1 === arguments.length && (e = Et.N()), st(\"doc\", \"path\", e), t instanceof Tn) {\n    const r = tt.fromString(e, ...n);\n    return it(r), new Dn(t,\n    /* converter= */\n    null, new rt(r));\n  }\n\n  {\n    if (!(t instanceof Dn || t instanceof xn)) throw new U(P, \"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore\");\n\n    const r = t._path.child(tt.fromString(e, ...n));\n\n    return it(r), new Dn(t.firestore, t instanceof xn ? t.converter : null, new rt(r));\n  }\n}\n/**\n * Returns true if the provided references are equal.\n *\n * @param left - A reference to compare.\n * @param right - A reference to compare.\n * @returns true if the references point to the same location in the same\n * Firestore database.\n */\n\n\nfunction kn(t, e) {\n  return t = getModularInstance(t), e = getModularInstance(e), (t instanceof Dn || t instanceof xn) && (e instanceof Dn || e instanceof xn) && t.firestore === e.firestore && t.path === e.path && t.converter === e.converter;\n}\n/**\n * Returns true if the provided queries point to the same collection and apply\n * the same constraints.\n *\n * @param left - A `Query` to compare.\n * @param right - A `Query` to compare.\n * @returns true if the references point to the same location in the same\n * Firestore database.\n */\n\n\nfunction Cn(t, e) {\n  return t = getModularInstance(t), e = getModularInstance(e), t instanceof Fn && e instanceof Fn && t.firestore === e.firestore && $e(t._query, e._query) && t.converter === e.converter;\n}\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * An immutable object representing an array of bytes.\n */\n\n\nclass Mn {\n  /** @hideconstructor */\n  constructor(t) {\n    this._byteString = t;\n  }\n  /**\n   * Creates a new `Bytes` object from the given Base64 string, converting it to\n   * bytes.\n   *\n   * @param base64 - The Base64 string used to create the `Bytes` object.\n   */\n\n\n  static fromBase64String(t) {\n    try {\n      return new Mn(Vt.fromBase64String(t));\n    } catch (t) {\n      throw new U(P, \"Failed to construct data from Base64 string: \" + t);\n    }\n  }\n  /**\n   * Creates a new `Bytes` object from the given Uint8Array.\n   *\n   * @param array - The Uint8Array used to create the `Bytes` object.\n   */\n\n\n  static fromUint8Array(t) {\n    return new Mn(Vt.fromUint8Array(t));\n  }\n  /**\n   * Returns the underlying bytes as a Base64-encoded string.\n   *\n   * @returns The Base64-encoded string created from the `Bytes` object.\n   */\n\n\n  toBase64() {\n    return this._byteString.toBase64();\n  }\n  /**\n   * Returns the underlying bytes in a new `Uint8Array`.\n   *\n   * @returns The Uint8Array created from the `Bytes` object.\n   */\n\n\n  toUint8Array() {\n    return this._byteString.toUint8Array();\n  }\n  /**\n   * Returns a string representation of the `Bytes` object.\n   *\n   * @returns A string representation of the `Bytes` object.\n   */\n\n\n  toString() {\n    return \"Bytes(base64: \" + this.toBase64() + \")\";\n  }\n  /**\n   * Returns true if this `Bytes` object is equal to the provided one.\n   *\n   * @param other - The `Bytes` object to compare against.\n   * @returns true if this `Bytes` object is equal to the provided one.\n   */\n\n\n  isEqual(t) {\n    return this._byteString.isEqual(t._byteString);\n  }\n\n}\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A `FieldPath` refers to a field in a document. The path may consist of a\n * single field name (referring to a top-level field in the document), or a\n * list of field names (referring to a nested field in the document).\n *\n * Create a `FieldPath` by providing field names. If more than one field\n * name is provided, the path will point to a nested field in a document.\n */\n\n\nclass Ln {\n  /**\n   * Creates a `FieldPath` from the provided field names. If more than one field\n   * name is provided, the path will point to a nested field in a document.\n   *\n   * @param fieldNames - A list of field names.\n   */\n  constructor() {\n    for (var _len7 = arguments.length, t = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      t[_key7] = arguments[_key7];\n    }\n\n    for (let e = 0; e < t.length; ++e) if (0 === t[e].length) throw new U(P, \"Invalid field name at argument $(i + 1). Field names must not be empty.\");\n\n    this._internalPath = new nt(t);\n  }\n  /**\n   * Returns true if this `FieldPath` is equal to the provided one.\n   *\n   * @param other - The `FieldPath` to compare against.\n   * @returns true if this `FieldPath` is equal to the provided one.\n   */\n\n\n  isEqual(t) {\n    return this._internalPath.isEqual(t._internalPath);\n  }\n\n}\n/**\n * Returns a special sentinel `FieldPath` to refer to the ID of a document.\n * It can be used in queries to sort or filter by the document ID.\n */\n\n\nfunction Un() {\n  return new Ln(\"__name__\");\n}\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Sentinel values that can be used when writing document fields with `set()`\n * or `update()`.\n */\n\n\nclass jn {\n  /**\n   * @param _methodName - The public API endpoint that returns this class.\n   * @hideconstructor\n   */\n  constructor(t) {\n    this._methodName = t;\n  }\n\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * An immutable object representing a geographic location in Firestore. The\n * location is represented as latitude/longitude pair.\n *\n * Latitude values are in the range of [-90, 90].\n * Longitude values are in the range of [-180, 180].\n */\n\n\nclass Bn {\n  /**\n   * Creates a new immutable `GeoPoint` object with the provided latitude and\n   * longitude values.\n   * @param latitude - The latitude as number between -90 and 90.\n   * @param longitude - The longitude as number between -180 and 180.\n   */\n  constructor(t, e) {\n    if (!isFinite(t) || t < -90 || t > 90) throw new U(P, \"Latitude must be a number between -90 and 90, but was: \" + t);\n    if (!isFinite(e) || e < -180 || e > 180) throw new U(P, \"Longitude must be a number between -180 and 180, but was: \" + e);\n    this._lat = t, this._long = e;\n  }\n  /**\n   * The latitude of this `GeoPoint` instance.\n   */\n\n\n  get latitude() {\n    return this._lat;\n  }\n  /**\n   * The longitude of this `GeoPoint` instance.\n   */\n\n\n  get longitude() {\n    return this._long;\n  }\n  /**\n   * Returns true if this `GeoPoint` is equal to the provided one.\n   *\n   * @param other - The `GeoPoint` to compare against.\n   * @returns true if this `GeoPoint` is equal to the provided one.\n   */\n\n\n  isEqual(t) {\n    return this._lat === t._lat && this._long === t._long;\n  }\n  /** Returns a JSON-serializable representation of this GeoPoint. */\n\n\n  toJSON() {\n    return {\n      latitude: this._lat,\n      longitude: this._long\n    };\n  }\n  /**\n   * Actually private to JS consumers of our API, so this function is prefixed\n   * with an underscore.\n   */\n\n\n  _compareTo(t) {\n    return It(this._lat, t._lat) || It(this._long, t._long);\n  }\n\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nconst Qn = /^__.*__$/;\n/** The result of parsing document data (e.g. for a setData call). */\n\nclass zn {\n  constructor(t, e, n) {\n    this.data = t, this.fieldMask = e, this.fieldTransforms = n;\n  }\n\n  toMutation(t, e) {\n    return null !== this.fieldMask ? new Le(t, this.data, this.fieldMask, e, this.fieldTransforms) : new Me(t, this.data, e, this.fieldTransforms);\n  }\n\n}\n/** The result of parsing \"update\" data (i.e. for an updateData call). */\n\n\nclass Wn {\n  constructor(t, // The fieldMask does not include document transforms.\n  e, n) {\n    this.data = t, this.fieldMask = e, this.fieldTransforms = n;\n  }\n\n  toMutation(t, e) {\n    return new Le(t, this.data, this.fieldMask, e, this.fieldTransforms);\n  }\n\n}\n\nfunction Gn(t) {\n  switch (t) {\n    case 0\n    /* UserDataSource.Set */\n    : // fall through\n\n    case 2\n    /* UserDataSource.MergeSet */\n    : // fall through\n\n    case 1\n    /* UserDataSource.Update */\n    :\n      return !0;\n\n    case 3\n    /* UserDataSource.Argument */\n    :\n    case 4\n    /* UserDataSource.ArrayArgument */\n    :\n      return !1;\n\n    default:\n      throw b();\n  }\n}\n/** A \"context\" object passed around while parsing user data. */\n\n\nclass Kn {\n  /**\n   * Initializes a ParseContext with the given source and path.\n   *\n   * @param settings - The settings for the parser.\n   * @param databaseId - The database ID of the Firestore instance.\n   * @param serializer - The serializer to use to generate the Value proto.\n   * @param ignoreUndefinedProperties - Whether to ignore undefined properties\n   * rather than throw.\n   * @param fieldTransforms - A mutable list of field transforms encountered\n   * while parsing the data.\n   * @param fieldMask - A mutable list of field paths encountered while parsing\n   * the data.\n   *\n   * TODO(b/34871131): We don't support array paths right now, so path can be\n   * null to indicate the context represents any location within an array (in\n   * which case certain features will not work and errors will be somewhat\n   * compromised).\n   */\n  constructor(t, e, n, r, s, i) {\n    this.settings = t, this.databaseId = e, this.serializer = n, this.ignoreUndefinedProperties = r, // Minor hack: If fieldTransforms is undefined, we assume this is an\n    // external call and we need to validate the entire path.\n    void 0 === s && this.tt(), this.fieldTransforms = s || [], this.fieldMask = i || [];\n  }\n\n  get path() {\n    return this.settings.path;\n  }\n\n  get et() {\n    return this.settings.et;\n  }\n  /** Returns a new context with the specified settings overwritten. */\n\n\n  nt(t) {\n    return new Kn(Object.assign(Object.assign({}, this.settings), t), this.databaseId, this.serializer, this.ignoreUndefinedProperties, this.fieldTransforms, this.fieldMask);\n  }\n\n  rt(t) {\n    var e;\n    const n = null === (e = this.path) || void 0 === e ? void 0 : e.child(t),\n          r = this.nt({\n      path: n,\n      st: !1\n    });\n    return r.it(t), r;\n  }\n\n  ot(t) {\n    var e;\n    const n = null === (e = this.path) || void 0 === e ? void 0 : e.child(t),\n          r = this.nt({\n      path: n,\n      st: !1\n    });\n    return r.tt(), r;\n  }\n\n  ut(t) {\n    // TODO(b/34871131): We don't support array paths right now; so make path\n    // undefined.\n    return this.nt({\n      path: void 0,\n      st: !0\n    });\n  }\n\n  ct(t) {\n    return wr(t, this.settings.methodName, this.settings.ht || !1, this.path, this.settings.lt);\n  }\n  /** Returns 'true' if 'fieldPath' was traversed when creating this context. */\n\n\n  contains(t) {\n    return void 0 !== this.fieldMask.find(e => t.isPrefixOf(e)) || void 0 !== this.fieldTransforms.find(e => t.isPrefixOf(e.field));\n  }\n\n  tt() {\n    // TODO(b/34871131): Remove null check once we have proper paths for fields\n    // within arrays.\n    if (this.path) for (let t = 0; t < this.path.length; t++) this.it(this.path.get(t));\n  }\n\n  it(t) {\n    if (0 === t.length) throw this.ct(\"Document fields must not be empty\");\n    if (Gn(this.et) && Qn.test(t)) throw this.ct('Document fields cannot begin and end with \"__\"');\n  }\n\n}\n/**\n * Helper for parsing raw user input (provided via the API) into internal model\n * classes.\n */\n\n\nclass Yn {\n  constructor(t, e, n) {\n    this.databaseId = t, this.ignoreUndefinedProperties = e, this.serializer = n || wn(t);\n  }\n  /** Creates a new top-level parse context. */\n\n\n  ft(t, e, n) {\n    let r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : !1;\n    return new Kn({\n      et: t,\n      methodName: e,\n      lt: n,\n      path: nt.emptyPath(),\n      st: !1,\n      ht: r\n    }, this.databaseId, this.serializer, this.ignoreUndefinedProperties);\n  }\n\n}\n\nfunction Hn(t) {\n  const e = t._freezeSettings(),\n        n = wn(t._databaseId);\n\n  return new Yn(t._databaseId, !!e.ignoreUndefinedProperties, n);\n}\n/** Parse document data from a set() call. */\n\n\nfunction Jn(t, e, n, r, s) {\n  let i = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n  const o = t.ft(i.merge || i.mergeFields ? 2\n  /* UserDataSource.MergeSet */\n  : 0\n  /* UserDataSource.Set */\n  , e, n, s);\n  hr(\"Data must be an object, but it was:\", o, r);\n  const u = cr(r, o);\n  let c, a;\n  if (i.merge) c = new ye(o.fieldMask), a = o.fieldTransforms;else if (i.mergeFields) {\n    const t = [];\n\n    for (const r of i.mergeFields) {\n      const s = lr(e, r, n);\n      if (!o.contains(s)) throw new U(P, `Field '${s}' is specified in your field mask but missing from your input data.`);\n      mr(t, s) || t.push(s);\n    }\n\n    c = new ye(t), a = o.fieldTransforms.filter(t => c.covers(t.field));\n  } else c = null, a = o.fieldTransforms;\n  return new zn(new ge(u), c, a);\n}\n\nclass Xn extends jn {\n  _toFieldTransform(t) {\n    if (2\n    /* UserDataSource.MergeSet */\n    !== t.et) throw 1\n    /* UserDataSource.Update */\n    === t.et ? t.ct(`${this._methodName}() can only appear at the top level of your update data`) : t.ct(`${this._methodName}() cannot be used with set() unless you pass {merge:true}`); // No transform to add for a delete, but we need to add it to our\n    // fieldMask so it gets deleted.\n\n    return t.fieldMask.push(t.path), null;\n  }\n\n  isEqual(t) {\n    return t instanceof Xn;\n  }\n\n}\n/**\n * Creates a child context for parsing SerializableFieldValues.\n *\n * This is different than calling `ParseContext.contextWith` because it keeps\n * the fieldTransforms and fieldMask separate.\n *\n * The created context has its `dataSource` set to `UserDataSource.Argument`.\n * Although these values are used with writes, any elements in these FieldValues\n * are not considered writes since they cannot contain any FieldValue sentinels,\n * etc.\n *\n * @param fieldValue - The sentinel FieldValue for which to create a child\n *     context.\n * @param context - The parent context.\n * @param arrayElement - Whether or not the FieldValue has an array.\n */\n\n\nfunction Zn(t, e, n) {\n  return new Kn({\n    et: 3\n    /* UserDataSource.Argument */\n    ,\n    lt: e.settings.lt,\n    methodName: t._methodName,\n    st: n\n  }, e.databaseId, e.serializer, e.ignoreUndefinedProperties);\n}\n\nclass tr extends jn {\n  _toFieldTransform(t) {\n    return new Oe(t.path, new Fe());\n  }\n\n  isEqual(t) {\n    return t instanceof tr;\n  }\n\n}\n\nclass er extends jn {\n  constructor(t, e) {\n    super(t), this.dt = e;\n  }\n\n  _toFieldTransform(t) {\n    const e = Zn(this, t,\n    /*array=*/\n    !0),\n          n = this.dt.map(t => ur(t, e)),\n          r = new xe(n);\n    return new Oe(t.path, r);\n  }\n\n  isEqual(t) {\n    // TODO(mrschmidt): Implement isEquals\n    return this === t;\n  }\n\n}\n\nclass nr extends jn {\n  constructor(t, e) {\n    super(t), this.dt = e;\n  }\n\n  _toFieldTransform(t) {\n    const e = Zn(this, t,\n    /*array=*/\n    !0),\n          n = this.dt.map(t => ur(t, e)),\n          r = new Se(n);\n    return new Oe(t.path, r);\n  }\n\n  isEqual(t) {\n    // TODO(mrschmidt): Implement isEquals\n    return this === t;\n  }\n\n}\n\nclass rr extends jn {\n  constructor(t, e) {\n    super(t), this.wt = e;\n  }\n\n  _toFieldTransform(t) {\n    const e = new qe(t.serializer, Ne(t.serializer, this.wt));\n    return new Oe(t.path, e);\n  }\n\n  isEqual(t) {\n    // TODO(mrschmidt): Implement isEquals\n    return this === t;\n  }\n\n}\n/** Parse update data from an update() call. */\n\n\nfunction sr(t, e, n, r) {\n  const s = t.ft(1\n  /* UserDataSource.Update */\n  , e, n);\n  hr(\"Data must be an object, but it was:\", s, r);\n  const i = [],\n        o = ge.empty();\n  Rt(r, (t, r) => {\n    const u = dr(e, t, n); // For Compat types, we have to \"extract\" the underlying types before\n    // performing validation.\n\n    r = getModularInstance(r);\n    const c = s.ot(u);\n    if (r instanceof Xn) // Add it to the field mask, but don't add anything to updateData.\n      i.push(u);else {\n      const t = ur(r, c);\n      null != t && (i.push(u), o.set(u, t));\n    }\n  });\n  const u = new ye(i);\n  return new Wn(o, u, s.fieldTransforms);\n}\n/** Parse update data from a list of field/value arguments. */\n\n\nfunction ir(t, e, n, r, s, i) {\n  const o = t.ft(1\n  /* UserDataSource.Update */\n  , e, n),\n        u = [lr(e, r, n)],\n        c = [s];\n  if (i.length % 2 != 0) throw new U(P, `Function ${e}() needs to be called with an even number of arguments that alternate between field names and values.`);\n\n  for (let t = 0; t < i.length; t += 2) u.push(lr(e, i[t])), c.push(i[t + 1]);\n\n  const a = [],\n        h = ge.empty(); // We iterate in reverse order to pick the last value for a field if the\n  // user specified the field multiple times.\n\n  for (let t = u.length - 1; t >= 0; --t) if (!mr(a, u[t])) {\n    const e = u[t];\n    let n = c[t]; // For Compat types, we have to \"extract\" the underlying types before\n    // performing validation.\n\n    n = getModularInstance(n);\n    const r = o.ot(e);\n    if (n instanceof Xn) // Add it to the field mask, but don't add anything to updateData.\n      a.push(e);else {\n      const t = ur(n, r);\n      null != t && (a.push(e), h.set(e, t));\n    }\n  }\n\n  const f = new ye(a);\n  return new Wn(h, f, o.fieldTransforms);\n}\n/**\n * Parse a \"query value\" (e.g. value in a where filter or a value in a cursor\n * bound).\n *\n * @param allowArrays - Whether the query value is an array that may directly\n * contain additional arrays (e.g. the operand of an `in` query).\n */\n\n\nfunction or(t, e, n) {\n  let r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : !1;\n  return ur(n, t.ft(r ? 4\n  /* UserDataSource.ArrayArgument */\n  : 3\n  /* UserDataSource.Argument */\n  , e));\n}\n/**\n * Parses user data to Protobuf Values.\n *\n * @param input - Data to be parsed.\n * @param context - A context object representing the current path being parsed,\n * the source of the data being parsed, etc.\n * @returns The parsed value, or null if the value was a FieldValue sentinel\n * that should not be included in the resulting parsed data.\n */\n\n\nfunction ur(t, e) {\n  if (ar( // Unwrap the API type from the Compat SDK. This will return the API type\n  // from firestore-exp.\n  t = getModularInstance(t))) return hr(\"Unsupported field value:\", e, t), cr(t, e);\n  if (t instanceof jn) // FieldValues usually parse into transforms (except deleteField())\n    // in which case we do not want to include this field in our parsed data\n    // (as doing so will overwrite the field directly prior to the transform\n    // trying to transform it). So we don't add this location to\n    // context.fieldMask and we return null as our parsing result.\n\n    /**\n    * \"Parses\" the provided FieldValueImpl, adding any necessary transforms to\n    * context.fieldTransforms.\n    */\n    return function (t, e) {\n      // Sentinels are only supported with writes, and not within arrays.\n      if (!Gn(e.et)) throw e.ct(`${t._methodName}() can only be used with update() and set()`);\n      if (!e.path) throw e.ct(`${t._methodName}() is not currently supported inside arrays`);\n\n      const n = t._toFieldTransform(e);\n\n      n && e.fieldTransforms.push(n);\n    }\n    /**\n    * Helper to parse a scalar value (i.e. not an Object, Array, or FieldValue)\n    *\n    * @returns The parsed value\n    */\n    (t, e), null;\n  if (void 0 === t && e.ignoreUndefinedProperties) // If the input is undefined it can never participate in the fieldMask, so\n    // don't handle this below. If `ignoreUndefinedProperties` is false,\n    // `parseScalarValue` will reject an undefined value.\n    return null;\n\n  if ( // If context.path is null we are inside an array and we don't support\n  // field mask paths more granular than the top-level array.\n  e.path && e.fieldMask.push(e.path), t instanceof Array) {\n    // TODO(b/34871131): Include the path containing the array in the error\n    // message.\n    // In the case of IN queries, the parsed data is an array (representing\n    // the set of values to be included for the IN query) that may directly\n    // contain additional arrays (each representing an individual field\n    // value), so we disable this validation.\n    if (e.settings.st && 4\n    /* UserDataSource.ArrayArgument */\n    !== e.et) throw e.ct(\"Nested arrays are not supported\");\n    return function (t, e) {\n      const n = [];\n      let r = 0;\n\n      for (const s of t) {\n        let t = ur(s, e.ut(r));\n        null == t && ( // Just include nulls in the array for fields being replaced with a\n        // sentinel.\n        t = {\n          nullValue: \"NULL_VALUE\"\n        }), n.push(t), r++;\n      }\n\n      return {\n        arrayValue: {\n          values: n\n        }\n      };\n    }(t, e);\n  }\n\n  return function (t, e) {\n    if (null === (t = getModularInstance(t))) return {\n      nullValue: \"NULL_VALUE\"\n    };\n    if (\"number\" == typeof t) return Ne(e.serializer, t);\n    if (\"boolean\" == typeof t) return {\n      booleanValue: t\n    };\n    if (\"string\" == typeof t) return {\n      stringValue: t\n    };\n\n    if (t instanceof Date) {\n      const n = xt.fromDate(t);\n      return {\n        timestampValue: Ge(e.serializer, n)\n      };\n    }\n\n    if (t instanceof xt) {\n      // Firestore backend truncates precision down to microseconds. To ensure\n      // offline mode works the same with regards to truncation, perform the\n      // truncation immediately without waiting for the backend to do that.\n      const n = new xt(t.seconds, 1e3 * Math.floor(t.nanoseconds / 1e3));\n      return {\n        timestampValue: Ge(e.serializer, n)\n      };\n    }\n\n    if (t instanceof Bn) return {\n      geoPointValue: {\n        latitude: t.latitude,\n        longitude: t.longitude\n      }\n    };\n    if (t instanceof Mn) return {\n      bytesValue: Ke(e.serializer, t._byteString)\n    };\n\n    if (t instanceof Dn) {\n      const n = e.databaseId,\n            r = t.firestore._databaseId;\n      if (!r.isEqual(n)) throw e.ct(`Document reference is for database ${r.projectId}/${r.database} but should be for database ${n.projectId}/${n.database}`);\n      return {\n        referenceValue: Je(t.firestore._databaseId || e.databaseId, t._key.path)\n      };\n    }\n\n    throw e.ct(`Unsupported field value: ${ut(t)}`);\n  }\n  /**\n  * Checks whether an object looks like a JSON object that should be converted\n  * into a struct. Normal class/prototype instances are considered to look like\n  * JSON objects since they should be converted to a struct value. Arrays, Dates,\n  * GeoPoints, etc. are not considered to look like JSON objects since they map\n  * to specific FieldValue types other than ObjectValue.\n  */\n  (t, e);\n}\n\nfunction cr(t, e) {\n  const n = {};\n  return !function (t) {\n    for (const e in t) if (Object.prototype.hasOwnProperty.call(t, e)) return !1;\n\n    return !0;\n  }(t) ? Rt(t, (t, r) => {\n    const s = ur(r, e.rt(t));\n    null != s && (n[t] = s);\n  }) : // If we encounter an empty object, we explicitly add it to the update\n  // mask to ensure that the server creates a map entry.\n  e.path && e.path.length > 0 && e.fieldMask.push(e.path), {\n    mapValue: {\n      fields: n\n    }\n  };\n}\n\nfunction ar(t) {\n  return !(\"object\" != typeof t || null === t || t instanceof Array || t instanceof Date || t instanceof xt || t instanceof Bn || t instanceof Mn || t instanceof Dn || t instanceof jn);\n}\n\nfunction hr(t, e, n) {\n  if (!ar(n) || !function (t) {\n    return \"object\" == typeof t && null !== t && (Object.getPrototypeOf(t) === Object.prototype || null === Object.getPrototypeOf(t));\n  }(n)) {\n    const r = ut(n);\n    throw \"an object\" === r ? e.ct(t + \" a custom object\") : e.ct(t + \" \" + r);\n  }\n}\n/**\n * Helper that calls fromDotSeparatedString() but wraps any error thrown.\n */\n\n\nfunction lr(t, e, n) {\n  if (( // If required, replace the FieldPath Compat class with with the firestore-exp\n  // FieldPath.\n  e = getModularInstance(e)) instanceof Ln) return e._internalPath;\n  if (\"string\" == typeof e) return dr(t, e);\n  throw wr(\"Field path arguments must be of type string or \", t,\n  /* hasConverter= */\n  !1,\n  /* path= */\n  void 0, n);\n}\n/**\n * Matches any characters in a field path string that are reserved.\n */\n\n\nconst fr = new RegExp(\"[~\\\\*/\\\\[\\\\]]\");\n/**\n * Wraps fromDotSeparatedString with an error message about the method that\n * was thrown.\n * @param methodName - The publicly visible method name\n * @param path - The dot-separated string form of a field path which will be\n * split on dots.\n * @param targetDoc - The document against which the field path will be\n * evaluated.\n */\n\nfunction dr(t, e, n) {\n  if (e.search(fr) >= 0) throw wr(`Invalid field path (${e}). Paths must not contain '~', '*', '/', '[', or ']'`, t,\n  /* hasConverter= */\n  !1,\n  /* path= */\n  void 0, n);\n\n  try {\n    return new Ln(...e.split(\".\"))._internalPath;\n  } catch (r) {\n    throw wr(`Invalid field path (${e}). Paths must not be empty, begin with '.', end with '.', or contain '..'`, t,\n    /* hasConverter= */\n    !1,\n    /* path= */\n    void 0, n);\n  }\n}\n\nfunction wr(t, e, n, r, s) {\n  const i = r && !r.isEmpty(),\n        o = void 0 !== s;\n  let u = `Function ${e}() called with invalid data`;\n  n && (u += \" (via `toFirestore()`)\"), u += \". \";\n  let c = \"\";\n  return (i || o) && (c += \" (found\", i && (c += ` in field ${r}`), o && (c += ` in document ${s}`), c += \")\"), new U(P, u + t + c);\n}\n/** Checks `haystack` if FieldPath `needle` is present. Runs in O(n). */\n\n\nfunction mr(t, e) {\n  return t.some(t => t.isEqual(e));\n}\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A `DocumentSnapshot` contains data read from a document in your Firestore\n * database. The data can be extracted with `.data()` or `.get(<field>)` to\n * get a specific field.\n *\n * For a `DocumentSnapshot` that points to a non-existing document, any data\n * access will return 'undefined'. You can use the `exists()` method to\n * explicitly verify a document's existence.\n */\n\n\nclass pr {\n  // Note: This class is stripped down version of the DocumentSnapshot in\n  // the legacy SDK. The changes are:\n  // - No support for SnapshotMetadata.\n  // - No support for SnapshotOptions.\n\n  /** @hideconstructor protected */\n  constructor(t, e, n, r, s) {\n    this._firestore = t, this._userDataWriter = e, this._key = n, this._document = r, this._converter = s;\n  }\n  /** Property of the `DocumentSnapshot` that provides the document's ID. */\n\n\n  get id() {\n    return this._key.path.lastSegment();\n  }\n  /**\n   * The `DocumentReference` for the document included in the `DocumentSnapshot`.\n   */\n\n\n  get ref() {\n    return new Dn(this._firestore, this._converter, this._key);\n  }\n  /**\n   * Signals whether or not the document at the snapshot's location exists.\n   *\n   * @returns true if the document exists.\n   */\n\n\n  exists() {\n    return null !== this._document;\n  }\n  /**\n   * Retrieves all fields in the document as an `Object`. Returns `undefined` if\n   * the document doesn't exist.\n   *\n   * @returns An `Object` containing all fields in the document or `undefined`\n   * if the document doesn't exist.\n   */\n\n\n  data() {\n    if (this._document) {\n      if (this._converter) {\n        // We only want to use the converter and create a new DocumentSnapshot\n        // if a converter has been provided.\n        const t = new yr(this._firestore, this._userDataWriter, this._key, this._document,\n        /* converter= */\n        null);\n        return this._converter.fromFirestore(t);\n      }\n\n      return this._userDataWriter.convertValue(this._document.data.value);\n    }\n  }\n  /**\n   * Retrieves the field specified by `fieldPath`. Returns `undefined` if the\n   * document or field doesn't exist.\n   *\n   * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific\n   * field.\n   * @returns The data at the specified field location or undefined if no such\n   * field exists in the document.\n   */\n  // We are using `any` here to avoid an explicit cast by our users.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  get(t) {\n    if (this._document) {\n      const e = this._document.data.field(vr(\"DocumentSnapshot.get\", t));\n\n      if (null !== e) return this._userDataWriter.convertValue(e);\n    }\n  }\n\n}\n/**\n * A `QueryDocumentSnapshot` contains data read from a document in your\n * Firestore database as part of a query. The document is guaranteed to exist\n * and its data can be extracted with `.data()` or `.get(<field>)` to get a\n * specific field.\n *\n * A `QueryDocumentSnapshot` offers the same API surface as a\n * `DocumentSnapshot`. Since query results contain only existing documents, the\n * `exists` property will always be true and `data()` will never return\n * 'undefined'.\n */\n\n\nclass yr extends pr {\n  /**\n   * Retrieves all fields in the document as an `Object`.\n   *\n   * @override\n   * @returns An `Object` containing all fields in the document.\n   */\n  data() {\n    return super.data();\n  }\n\n}\n/**\n * A `QuerySnapshot` contains zero or more `DocumentSnapshot` objects\n * representing the results of a query. The documents can be accessed as an\n * array via the `docs` property or enumerated using the `forEach` method. The\n * number of documents can be determined via the `empty` and `size`\n * properties.\n */\n\n\nclass gr {\n  /** @hideconstructor */\n  constructor(t, e) {\n    this._docs = e, this.query = t;\n  }\n  /** An array of all the documents in the `QuerySnapshot`. */\n\n\n  get docs() {\n    return [...this._docs];\n  }\n  /** The number of documents in the `QuerySnapshot`. */\n\n\n  get size() {\n    return this.docs.length;\n  }\n  /** True if there are no documents in the `QuerySnapshot`. */\n\n\n  get empty() {\n    return 0 === this.docs.length;\n  }\n  /**\n   * Enumerates all of the documents in the `QuerySnapshot`.\n   *\n   * @param callback - A callback to be called with a `QueryDocumentSnapshot` for\n   * each document in the snapshot.\n   * @param thisArg - The `this` binding for the callback.\n   */\n\n\n  forEach(t, e) {\n    this._docs.forEach(t, e);\n  }\n\n}\n/**\n * Returns true if the provided snapshots are equal.\n *\n * @param left - A snapshot to compare.\n * @param right - A snapshot to compare.\n * @returns true if the snapshots are equal.\n */\n\n\nfunction _r(t, e) {\n  return t = getModularInstance(t), e = getModularInstance(e), t instanceof pr && e instanceof pr ? t._firestore === e._firestore && t._key.isEqual(e._key) && (null === t._document ? null === e._document : t._document.isEqual(e._document)) && t._converter === e._converter : t instanceof gr && e instanceof gr && Cn(t.query, e.query) && Tt(t.docs, e.docs, _r);\n}\n/**\n * Helper that calls `fromDotSeparatedString()` but wraps any error thrown.\n */\n\n\nfunction vr(t, e) {\n  return \"string\" == typeof e ? dr(t, e) : e instanceof Ln ? e._internalPath : e._delegate._internalPath;\n}\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * An `AppliableConstraint` is an abstraction of a constraint that can be applied\n * to a Firestore query.\n */\n\n\nclass br {}\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Firestore query. `QueryConstraint`s are created by invoking {@link where},\n * {@link orderBy}, {@link (startAt:1)}, {@link (startAfter:1)}, {@link\n * (endBefore:1)}, {@link (endAt:1)}, {@link limit}, {@link limitToLast} and\n * can then be passed to {@link (query:1)} to create a new query instance that\n * also contains this `QueryConstraint`.\n */\n\n\nclass Er extends br {}\n\nfunction Ir(t, e) {\n  let r = [];\n\n  for (var _len8 = arguments.length, n = new Array(_len8 > 2 ? _len8 - 2 : 0), _key8 = 2; _key8 < _len8; _key8++) {\n    n[_key8 - 2] = arguments[_key8];\n  }\n\n  e instanceof br && r.push(e), r = r.concat(n), function (t) {\n    const e = t.filter(t => t instanceof Rr).length,\n          n = t.filter(t => t instanceof Tr).length;\n    if (e > 1 || e > 0 && n > 0) throw new U(P, \"InvalidQuery. When using composite filters, you cannot use more than one filter at the top level. Consider nesting the multiple filters within an `and(...)` statement. For example: change `query(query, where(...), or(...))` to `query(query, and(where(...), or(...)))`.\");\n  }\n  /**\n  * @license\n  * Copyright 2020 Google LLC\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n\n  /**\n  * Converts Firestore's internal types to the JavaScript types that we expose\n  * to the user.\n  *\n  * @internal\n  */\n  (r);\n\n  for (const e of r) t = e._apply(t);\n\n  return t;\n}\n/**\n * A `QueryFieldFilterConstraint` is used to narrow the set of documents returned by\n * a Firestore query by filtering on one or more document fields.\n * `QueryFieldFilterConstraint`s are created by invoking {@link where} and can then\n * be passed to {@link (query:1)} to create a new query instance that also contains\n * this `QueryFieldFilterConstraint`.\n */\n\n\nclass Tr extends Er {\n  /**\n   * @internal\n   */\n  constructor(t, e, n) {\n    super(), this._field = t, this._op = e, this._value = n,\n    /** The type of this query constraint */\n    this.type = \"where\";\n  }\n\n  static _create(t, e, n) {\n    return new Tr(t, e, n);\n  }\n\n  _apply(t) {\n    const e = this._parse(t);\n\n    return Br(t._query, e), new Fn(t.firestore, t.converter, Ve(t._query, e));\n  }\n\n  _parse(t) {\n    const e = Hn(t.firestore),\n          n = function (t, e, n, r, s, i, o) {\n      let u;\n\n      if (s.isKeyField()) {\n        if (\"array-contains\"\n        /* Operator.ARRAY_CONTAINS */\n        === i || \"array-contains-any\"\n        /* Operator.ARRAY_CONTAINS_ANY */\n        === i) throw new U(P, `Invalid Query. You can't perform '${i}' queries on documentId().`);\n\n        if (\"in\"\n        /* Operator.IN */\n        === i || \"not-in\"\n        /* Operator.NOT_IN */\n        === i) {\n          jr(o, i);\n          const e = [];\n\n          for (const n of o) e.push(Ur(r, t, n));\n\n          u = {\n            arrayValue: {\n              values: e\n            }\n          };\n        } else u = Ur(r, t, o);\n      } else \"in\"\n      /* Operator.IN */\n      !== i && \"not-in\"\n      /* Operator.NOT_IN */\n      !== i && \"array-contains-any\"\n      /* Operator.ARRAY_CONTAINS_ANY */\n      !== i || jr(o, i), u = or(n, e, o,\n      /* allowArrays= */\n      \"in\"\n      /* Operator.IN */\n      === i || \"not-in\"\n      /* Operator.NOT_IN */\n      === i);\n\n      return Xt.create(s, i, u);\n    }(t._query, \"where\", e, t.firestore._databaseId, this._field, this._op, this._value);\n\n    return n;\n  }\n\n}\n/**\n * Creates a {@link QueryFieldFilterConstraint} that enforces that documents\n * must contain the specified field and that the value should satisfy the\n * relation constraint provided.\n *\n * @param fieldPath - The path to compare\n * @param opStr - The operation string (e.g \"&lt;\", \"&lt;=\", \"==\", \"&lt;\",\n *   \"&lt;=\", \"!=\").\n * @param value - The value for comparison\n * @returns The created {@link QueryFieldFilterConstraint}.\n */\n\n\nfunction Ar(t, e, n) {\n  const r = e,\n        s = vr(\"where\", t);\n  return Tr._create(s, r, n);\n}\n/**\n * A `QueryCompositeFilterConstraint` is used to narrow the set of documents\n * returned by a Firestore query by performing the logical OR or AND of multiple\n * {@link QueryFieldFilterConstraint}s or {@link QueryCompositeFilterConstraint}s.\n * `QueryCompositeFilterConstraint`s are created by invoking {@link or} or\n * {@link and} and can then be passed to {@link (query:1)} to create a new query\n * instance that also contains the `QueryCompositeFilterConstraint`.\n */\n\n\nclass Rr extends br {\n  /**\n   * @internal\n   */\n  constructor(\n  /** The type of this query constraint */\n  t, e) {\n    super(), this.type = t, this._queryConstraints = e;\n  }\n\n  static _create(t, e) {\n    return new Rr(t, e);\n  }\n\n  _parse(t) {\n    const e = this._queryConstraints.map(e => e._parse(t)).filter(t => t.getFilters().length > 0);\n\n    return 1 === e.length ? e[0] : Zt.create(e, this._getOperator());\n  }\n\n  _apply(t) {\n    const e = this._parse(t);\n\n    return 0 === e.getFilters().length ? t : (function (t, e) {\n      let n = t;\n      const r = e.getFlattenedFilters();\n\n      for (const t of r) Br(n, t), n = Ve(n, t);\n    } // Checks if any of the provided filter operators are included in the given list of filters and\n    // returns the first one that is, or null if none are.\n    (t._query, e), new Fn(t.firestore, t.converter, Ve(t._query, e)));\n  }\n\n  _getQueryConstraints() {\n    return this._queryConstraints;\n  }\n\n  _getOperator() {\n    return \"and\" === this.type ? \"and\"\n    /* CompositeOperator.AND */\n    : \"or\"\n    /* CompositeOperator.OR */\n    ;\n  }\n\n}\n/**\n * Creates a new {@link QueryCompositeFilterConstraint} that is a disjunction of\n * the given filter constraints. A disjunction filter includes a document if it\n * satisfies any of the given filters.\n *\n * @param queryConstraints - Optional. The list of\n * {@link QueryFilterConstraint}s to perform a disjunction for. These must be\n * created with calls to {@link where}, {@link or}, or {@link and}.\n * @returns The newly created {@link QueryCompositeFilterConstraint}.\n */\n\n\nfunction Pr() {\n  for (var _len9 = arguments.length, t = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n    t[_key9] = arguments[_key9];\n  }\n\n  // Only support QueryFilterConstraints\n  return t.forEach(t => zr(\"or\", t)), Rr._create(\"or\"\n  /* CompositeOperator.OR */\n  , t);\n}\n/**\n * Creates a new {@link QueryCompositeFilterConstraint} that is a conjunction of\n * the given filter constraints. A conjunction filter includes a document if it\n * satisfies all of the given filters.\n *\n * @param queryConstraints - Optional. The list of\n * {@link QueryFilterConstraint}s to perform a conjunction for. These must be\n * created with calls to {@link where}, {@link or}, or {@link and}.\n * @returns The newly created {@link QueryCompositeFilterConstraint}.\n */\n\n\nfunction Vr() {\n  for (var _len10 = arguments.length, t = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n    t[_key10] = arguments[_key10];\n  }\n\n  // Only support QueryFilterConstraints\n  return t.forEach(t => zr(\"and\", t)), Rr._create(\"and\"\n  /* CompositeOperator.AND */\n  , t);\n}\n/**\n * A `QueryOrderByConstraint` is used to sort the set of documents returned by a\n * Firestore query. `QueryOrderByConstraint`s are created by invoking\n * {@link orderBy} and can then be passed to {@link (query:1)} to create a new query\n * instance that also contains this `QueryOrderByConstraint`.\n *\n * Note: Documents that do not contain the orderBy field will not be present in\n * the query result.\n */\n\n\nclass $r extends Er {\n  /**\n   * @internal\n   */\n  constructor(t, e) {\n    super(), this._field = t, this._direction = e,\n    /** The type of this query constraint */\n    this.type = \"orderBy\";\n  }\n\n  static _create(t, e) {\n    return new $r(t, e);\n  }\n\n  _apply(t) {\n    const e = function (t, e, n) {\n      if (null !== t.startAt) throw new U(P, \"Invalid query. You must not call startAt() or startAfter() before calling orderBy().\");\n      if (null !== t.endAt) throw new U(P, \"Invalid query. You must not call endAt() or endBefore() before calling orderBy().\");\n      const r = new ae(e, n);\n      return function (t, e) {\n        if (null === Ie(t)) {\n          // This is the first order by. It must match any inequality.\n          const n = Te(t);\n          null !== n && Qr(t, n, e.field);\n        }\n      }(t, r), r;\n    }\n    /**\n    * Create a `Bound` from a query and a document.\n    *\n    * Note that the `Bound` will always include the key of the document\n    * and so only the provided document will compare equal to the returned\n    * position.\n    *\n    * Will throw if the document does not contain all fields of the order by\n    * of the query or if any of the fields in the order by are an uncommitted\n    * server timestamp.\n    */\n    (t._query, this._field, this._direction);\n\n    return new Fn(t.firestore, t.converter, function (t, e) {\n      // TODO(dimond): validate that orderBy does not list the same key twice.\n      const n = t.explicitOrderBy.concat([e]);\n      return new Ee(t.path, t.collectionGroup, n, t.filters.slice(), t.limit, t.limitType, t.startAt, t.endAt);\n    }(t._query, e));\n  }\n\n}\n/**\n * Creates a {@link QueryOrderByConstraint} that sorts the query result by the\n * specified field, optionally in descending order instead of ascending.\n *\n * Note: Documents that do not contain the specified field will not be present\n * in the query result.\n *\n * @param fieldPath - The field to sort by.\n * @param directionStr - Optional direction to sort by ('asc' or 'desc'). If\n * not specified, order will be ascending.\n * @returns The created {@link QueryOrderByConstraint}.\n */\n\n\nfunction Nr(t) {\n  let e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"asc\";\n  const n = e,\n        r = vr(\"orderBy\", t);\n  return $r._create(r, n);\n}\n/**\n * A `QueryLimitConstraint` is used to limit the number of documents returned by\n * a Firestore query.\n * `QueryLimitConstraint`s are created by invoking {@link limit} or\n * {@link limitToLast} and can then be passed to {@link (query:1)} to create a new\n * query instance that also contains this `QueryLimitConstraint`.\n */\n\n\nclass Dr extends Er {\n  /**\n   * @internal\n   */\n  constructor(\n  /** The type of this query constraint */\n  t, e, n) {\n    super(), this.type = t, this._limit = e, this._limitType = n;\n  }\n\n  static _create(t, e, n) {\n    return new Dr(t, e, n);\n  }\n\n  _apply(t) {\n    return new Fn(t.firestore, t.converter, function (t, e, n) {\n      return new Ee(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), e, n, t.startAt, t.endAt);\n    }(t._query, this._limit, this._limitType));\n  }\n\n}\n/**\n * Creates a {@link QueryLimitConstraint} that only returns the first matching\n * documents.\n *\n * @param limit - The maximum number of items to return.\n * @returns The created {@link QueryLimitConstraint}.\n */\n\n\nfunction Fr(t) {\n  return at(\"limit\", t), Dr._create(\"limit\", t, \"F\"\n  /* LimitType.First */\n  );\n}\n/**\n * Creates a {@link QueryLimitConstraint} that only returns the last matching\n * documents.\n *\n * You must specify at least one `orderBy` clause for `limitToLast` queries,\n * otherwise an exception will be thrown during execution.\n *\n * @param limit - The maximum number of items to return.\n * @returns The created {@link QueryLimitConstraint}.\n */\n\n\nfunction xr(t) {\n  return at(\"limitToLast\", t), Dr._create(\"limitToLast\", t, \"L\"\n  /* LimitType.Last */\n  );\n}\n/**\n * A `QueryStartAtConstraint` is used to exclude documents from the start of a\n * result set returned by a Firestore query.\n * `QueryStartAtConstraint`s are created by invoking {@link (startAt:1)} or\n * {@link (startAfter:1)} and can then be passed to {@link (query:1)} to create a\n * new query instance that also contains this `QueryStartAtConstraint`.\n */\n\n\nclass Sr extends Er {\n  /**\n   * @internal\n   */\n  constructor(\n  /** The type of this query constraint */\n  t, e, n) {\n    super(), this.type = t, this._docOrFields = e, this._inclusive = n;\n  }\n\n  static _create(t, e, n) {\n    return new Sr(t, e, n);\n  }\n\n  _apply(t) {\n    const e = Lr(t, this.type, this._docOrFields, this._inclusive);\n    return new Fn(t.firestore, t.converter, function (t, e) {\n      return new Ee(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), t.limit, t.limitType, e, t.endAt);\n    }(t._query, e));\n  }\n\n}\n\nfunction qr() {\n  for (var _len11 = arguments.length, t = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {\n    t[_key11] = arguments[_key11];\n  }\n\n  return Sr._create(\"startAt\", t,\n  /*inclusive=*/\n  !0);\n}\n\nfunction Or() {\n  for (var _len12 = arguments.length, t = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {\n    t[_key12] = arguments[_key12];\n  }\n\n  return Sr._create(\"startAfter\", t,\n  /*inclusive=*/\n  !1);\n}\n/**\n * A `QueryEndAtConstraint` is used to exclude documents from the end of a\n * result set returned by a Firestore query.\n * `QueryEndAtConstraint`s are created by invoking {@link (endAt:1)} or\n * {@link (endBefore:1)} and can then be passed to {@link (query:1)} to create a new\n * query instance that also contains this `QueryEndAtConstraint`.\n */\n\n\nclass kr extends Er {\n  /**\n   * @internal\n   */\n  constructor(\n  /** The type of this query constraint */\n  t, e, n) {\n    super(), this.type = t, this._docOrFields = e, this._inclusive = n;\n  }\n\n  static _create(t, e, n) {\n    return new kr(t, e, n);\n  }\n\n  _apply(t) {\n    const e = Lr(t, this.type, this._docOrFields, this._inclusive);\n    return new Fn(t.firestore, t.converter, function (t, e) {\n      return new Ee(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), t.limit, t.limitType, t.startAt, e);\n    }(t._query, e));\n  }\n\n}\n\nfunction Cr() {\n  for (var _len13 = arguments.length, t = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {\n    t[_key13] = arguments[_key13];\n  }\n\n  return kr._create(\"endBefore\", t,\n  /*inclusive=*/\n  !1);\n}\n\nfunction Mr() {\n  for (var _len14 = arguments.length, t = new Array(_len14), _key14 = 0; _key14 < _len14; _key14++) {\n    t[_key14] = arguments[_key14];\n  }\n\n  return kr._create(\"endAt\", t,\n  /*inclusive=*/\n  !0);\n}\n/** Helper function to create a bound from a document or fields */\n\n\nfunction Lr(t, e, n, r) {\n  if (n[0] = getModularInstance(n[0]), n[0] instanceof pr) return function (t, e, n, r, s) {\n    if (!r) throw new U($, `Can't use a DocumentSnapshot that doesn't exist for ${n}().`);\n    const i = []; // Because people expect to continue/end a query at the exact document\n    // provided, we need to use the implicit sort order rather than the explicit\n    // sort order, because it's guaranteed to contain the document key. That way\n    // the position becomes unambiguous and the query continues/ends exactly at\n    // the provided document. Without the key (by using the explicit sort\n    // orders), multiple documents could match the position, yielding duplicate\n    // results.\n\n    for (const n of Re(t)) if (n.field.isKeyField()) i.push(Bt(e, r.key));else {\n      const t = r.data.field(n.field);\n      if (St(t)) throw new U(P, 'Invalid query. You are trying to start or end a query using a document for which the field \"' + n.field + '\" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');\n\n      if (null === t) {\n        const t = n.field.canonicalString();\n        throw new U(P, `Invalid query. You are trying to start or end a query using a document for which the field '${t}' (used as the orderBy) does not exist.`);\n      }\n\n      i.push(t);\n    }\n\n    return new Yt(i, s);\n  }\n  /**\n  * Converts a list of field values to a `Bound` for the given query.\n  */\n  (t._query, t.firestore._databaseId, e, n[0]._document, r);\n  {\n    const s = Hn(t.firestore);\n    return function (t, e, n, r, s, i) {\n      // Use explicit order by's because it has to match the query the user made\n      const o = t.explicitOrderBy;\n      if (s.length > o.length) throw new U(P, `Too many arguments provided to ${r}(). The number of arguments must be less than or equal to the number of orderBy() clauses`);\n      const u = [];\n\n      for (let i = 0; i < s.length; i++) {\n        const c = s[i];\n\n        if (o[i].field.isKeyField()) {\n          if (\"string\" != typeof c) throw new U(P, `Invalid query. Expected a string for document ID in ${r}(), but got a ${typeof c}`);\n          if (!Ae(t) && -1 !== c.indexOf(\"/\")) throw new U(P, `Invalid query. When querying a collection and ordering by documentId(), the value passed to ${r}() must be a plain document ID, but '${c}' contains a slash.`);\n          const n = t.path.child(tt.fromString(c));\n          if (!rt.isDocumentKey(n)) throw new U(P, `Invalid query. When querying a collection group and ordering by documentId(), the value passed to ${r}() must result in a valid document path, but '${n}' is not because it contains an odd number of segments.`);\n          const s = new rt(n);\n          u.push(Bt(e, s));\n        } else {\n          const t = or(n, r, c);\n          u.push(t);\n        }\n      }\n\n      return new Yt(u, i);\n    }\n    /**\n    * Parses the given `documentIdValue` into a `ReferenceValue`, throwing\n    * appropriate errors if the value is anything other than a `DocumentReference`\n    * or `string`, or if the string is malformed.\n    */\n    (t._query, t.firestore._databaseId, s, e, n, r);\n  }\n}\n\nfunction Ur(t, e, n) {\n  if (\"string\" == typeof (n = getModularInstance(n))) {\n    if (\"\" === n) throw new U(P, \"Invalid query. When querying with documentId(), you must provide a valid document ID, but it was an empty string.\");\n    if (!Ae(e) && -1 !== n.indexOf(\"/\")) throw new U(P, `Invalid query. When querying a collection by documentId(), you must provide a plain document ID, but '${n}' contains a '/' character.`);\n    const r = e.path.child(tt.fromString(n));\n    if (!rt.isDocumentKey(r)) throw new U(P, `Invalid query. When querying a collection group by documentId(), the value provided must result in a valid document path, but '${r}' is not because it has an odd number of segments (${r.length}).`);\n    return Bt(t, new rt(r));\n  }\n\n  if (n instanceof Dn) return Bt(t, n._key);\n  throw new U(P, `Invalid query. When querying with documentId(), you must provide a valid string or a DocumentReference, but it was: ${ut(n)}.`);\n}\n/**\n * Validates that the value passed into a disjunctive filter satisfies all\n * array requirements.\n */\n\n\nfunction jr(t, e) {\n  if (!Array.isArray(t) || 0 === t.length) throw new U(P, `Invalid Query. A non-empty array is required for '${e.toString()}' filters.`);\n}\n/**\n * Given an operator, returns the set of operators that cannot be used with it.\n *\n * This is not a comprehensive check, and this function should be removed in the\n * long term. Validations should occur in the Firestore backend.\n *\n * Operators in a query must adhere to the following set of rules:\n * 1. Only one inequality per query.\n * 2. `NOT_IN` cannot be used with array, disjunctive, or `NOT_EQUAL` operators.\n */\n\n\nfunction Br(t, e) {\n  if (e.isInequality()) {\n    const n = Te(t),\n          r = e.field;\n    if (null !== n && !n.isEqual(r)) throw new U(P, `Invalid query. All where filters with an inequality (<, <=, !=, not-in, >, or >=) must be on the same field. But you have inequality filters on '${n.toString()}' and '${r.toString()}'`);\n    const s = Ie(t);\n    null !== s && Qr(t, r, s);\n  }\n\n  const n = function (t, e) {\n    for (const n of t) for (const t of n.getFlattenedFilters()) if (e.indexOf(t.op) >= 0) return t.op;\n\n    return null;\n  }(t.filters, function (t) {\n    switch (t) {\n      case \"!=\"\n      /* Operator.NOT_EQUAL */\n      :\n        return [\"!=\"\n        /* Operator.NOT_EQUAL */\n        , \"not-in\"\n        /* Operator.NOT_IN */\n        ];\n\n      case \"array-contains-any\"\n      /* Operator.ARRAY_CONTAINS_ANY */\n      :\n      case \"in\"\n      /* Operator.IN */\n      :\n        return [\"not-in\"\n        /* Operator.NOT_IN */\n        ];\n\n      case \"not-in\"\n      /* Operator.NOT_IN */\n      :\n        return [\"array-contains-any\"\n        /* Operator.ARRAY_CONTAINS_ANY */\n        , \"in\"\n        /* Operator.IN */\n        , \"not-in\"\n        /* Operator.NOT_IN */\n        , \"!=\"\n        /* Operator.NOT_EQUAL */\n        ];\n\n      default:\n        return [];\n    }\n  }(e.op));\n\n  if (null !== n) // Special case when it's a duplicate op to give a slightly clearer error message.\n    throw n === e.op ? new U(P, `Invalid query. You cannot use more than one '${e.op.toString()}' filter.`) : new U(P, `Invalid query. You cannot use '${e.op.toString()}' filters with '${n.toString()}' filters.`);\n}\n\nfunction Qr(t, e, n) {\n  if (!n.isEqual(e)) throw new U(P, `Invalid query. You have a where filter with an inequality (<, <=, !=, not-in, >, or >=) on field '${e.toString()}' and so you must also use '${e.toString()}' as your first argument to orderBy(), but your first orderBy() is on field '${n.toString()}' instead.`);\n}\n\nfunction zr(t, e) {\n  if (!(e instanceof Tr || e instanceof Rr)) throw new U(P, `Function ${t}() requires AppliableConstraints created with a call to 'where(...)', 'or(...)', or 'and(...)'.`);\n}\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Converts custom model object of type T into `DocumentData` by applying the\n * converter if it exists.\n *\n * This function is used when converting user objects to `DocumentData`\n * because we want to provide the user with a more specific error message if\n * their `set()` or fails due to invalid data originating from a `toFirestore()`\n * call.\n */\n\n\nfunction Wr(t, e, n) {\n  let r; // Cast to `any` in order to satisfy the union type constraint on\n  // toFirestore().\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  return r = t ? n && (n.merge || n.mergeFields) ? t.toFirestore(e, n) : t.toFirestore(e) : e, r;\n}\n\nclass Gr extends class {\n  convertValue(t) {\n    let e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"none\";\n\n    switch (Ct(t)) {\n      case 0\n      /* TypeOrder.NullValue */\n      :\n        return null;\n\n      case 1\n      /* TypeOrder.BooleanValue */\n      :\n        return t.booleanValue;\n\n      case 2\n      /* TypeOrder.NumberValue */\n      :\n        return Dt(t.integerValue || t.doubleValue);\n\n      case 3\n      /* TypeOrder.TimestampValue */\n      :\n        return this.convertTimestamp(t.timestampValue);\n\n      case 4\n      /* TypeOrder.ServerTimestampValue */\n      :\n        return this.convertServerTimestamp(t, e);\n\n      case 5\n      /* TypeOrder.StringValue */\n      :\n        return t.stringValue;\n\n      case 6\n      /* TypeOrder.BlobValue */\n      :\n        return this.convertBytes(Ft(t.bytesValue));\n\n      case 7\n      /* TypeOrder.RefValue */\n      :\n        return this.convertReference(t.referenceValue);\n\n      case 8\n      /* TypeOrder.GeoPointValue */\n      :\n        return this.convertGeoPoint(t.geoPointValue);\n\n      case 9\n      /* TypeOrder.ArrayValue */\n      :\n        return this.convertArray(t.arrayValue, e);\n\n      case 10\n      /* TypeOrder.ObjectValue */\n      :\n        return this.convertObject(t.mapValue, e);\n\n      default:\n        throw b();\n    }\n  }\n\n  convertObject(t, e) {\n    return this.convertObjectMap(t.fields, e);\n  }\n  /**\n   * @internal\n   */\n\n\n  convertObjectMap(t) {\n    let e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"none\";\n    const n = {};\n    return Rt(t, (t, r) => {\n      n[t] = this.convertValue(r, e);\n    }), n;\n  }\n\n  convertGeoPoint(t) {\n    return new Bn(Dt(t.latitude), Dt(t.longitude));\n  }\n\n  convertArray(t, e) {\n    return (t.values || []).map(t => this.convertValue(t, e));\n  }\n\n  convertServerTimestamp(t, e) {\n    switch (e) {\n      case \"previous\":\n        const n = qt(t);\n        return null == n ? null : this.convertValue(n, e);\n\n      case \"estimate\":\n        return this.convertTimestamp(Ot(t));\n\n      default:\n        return null;\n    }\n  }\n\n  convertTimestamp(t) {\n    const e = Nt(t);\n    return new xt(e.seconds, e.nanos);\n  }\n\n  convertDocumentKey(t, e) {\n    const n = tt.fromString(t);\n    E(dn(n));\n    const r = new X(n.get(1), n.get(3)),\n          s = new rt(n.popFirst(5));\n    return r.isEqual(e) || // TODO(b/64130202): Somehow support foreign references.\n    g(`Document ${s} contains a document reference within a different database (${r.projectId}/${r.database}) which is not supported. It will be treated as a reference in the current database (${e.projectId}/${e.database}) instead.`), s;\n  }\n\n} {\n  constructor(t) {\n    super(), this.firestore = t;\n  }\n\n  convertBytes(t) {\n    return new Mn(t);\n  }\n\n  convertReference(t) {\n    const e = this.convertDocumentKey(t, this.firestore._databaseId);\n    return new Dn(this.firestore,\n    /* converter= */\n    null, e);\n  }\n\n}\n/**\n * Reads the document referred to by the specified document reference.\n *\n * All documents are directly fetched from the server, even if the document was\n * previously read or modified. Recent modifications are only reflected in the\n * retrieved `DocumentSnapshot` if they have already been applied by the\n * backend. If the client is offline, the read fails. If you like to use\n * caching or see local modifications, please use the full Firestore SDK.\n *\n * @param reference - The reference of the document to fetch.\n * @returns A Promise resolved with a `DocumentSnapshot` containing the current\n * document contents.\n */\n\n\nfunction Kr(t) {\n  const e = En((t = ct(t, Dn)).firestore),\n        n = new Gr(t.firestore);\n  return gn(e, [t._key]).then(e => {\n    E(1 === e.length);\n    const r = e[0];\n    return new pr(t.firestore, n, t._key, r.isFoundDocument() ? r : null, t.converter);\n  });\n}\n/**\n * Executes the query and returns the results as a {@link QuerySnapshot}.\n *\n * All queries are executed directly by the server, even if the the query was\n * previously executed. Recent modifications are only reflected in the retrieved\n * results if they have already been applied by the backend. If the client is\n * offline, the operation fails. To see previously cached result and local\n * modifications, use the full Firestore SDK.\n *\n * @param query - The `Query` to execute.\n * @returns A Promise that will be resolved with the results of the query.\n */\n\n\nfunction Yr(t) {\n  !function (t) {\n    if (\"L\"\n    /* LimitType.Last */\n    === t.limitType && 0 === t.explicitOrderBy.length) throw new U(k, \"limitToLast() queries require specifying at least one orderBy() clause\");\n  }((t = ct(t, Fn))._query);\n  const e = En(t.firestore),\n        n = new Gr(t.firestore);\n  return _n(e, t._query).then(e => {\n    const r = e.map(e => new yr(t.firestore, n, e.key, e, t.converter));\n    return \"L\"\n    /* LimitType.Last */\n    === t._query.limitType && // Limit to last queries reverse the orderBy constraint that was\n    // specified by the user. As such, we need to reverse the order of the\n    // results to return the documents in the expected order.\n    r.reverse(), new gr(t, r);\n  });\n}\n\nfunction Hr(t, e, n) {\n  const r = Wr((t = ct(t, Dn)).converter, e, n),\n        s = Jn(Hn(t.firestore), \"setDoc\", t._key, r, null !== t.converter, n);\n  return yn(En(t.firestore), [s.toMutation(t._key, ke.none())]);\n}\n\nfunction Jr(t, e, n) {\n  const s = Hn((t = ct(t, Dn)).firestore); // For Compat types, we have to \"extract\" the underlying types before\n  // performing validation.\n\n  let i;\n\n  for (var _len15 = arguments.length, r = new Array(_len15 > 3 ? _len15 - 3 : 0), _key15 = 3; _key15 < _len15; _key15++) {\n    r[_key15 - 3] = arguments[_key15];\n  }\n\n  i = \"string\" == typeof (e = getModularInstance(e)) || e instanceof Ln ? ir(s, \"updateDoc\", t._key, e, n, r) : sr(s, \"updateDoc\", t._key, e);\n  return yn(En(t.firestore), [i.toMutation(t._key, ke.exists(!0))]);\n}\n/**\n * Deletes the document referred to by the specified `DocumentReference`.\n *\n * The deletion will only be reflected in document reads that occur after the\n * returned promise resolves. If the client is offline, the\n * delete fails. If you would like to see local modifications or buffer writes\n * until the client is online, use the full Firestore SDK.\n *\n * @param reference - A reference to the document to delete.\n * @returns A `Promise` resolved once the document has been successfully\n * deleted from the backend.\n */\n\n\nfunction Xr(t) {\n  return yn(En((t = ct(t, Dn)).firestore), [new Ue(t._key, ke.none())]);\n}\n/**\n * Add a new document to specified `CollectionReference` with the given data,\n * assigning it a document ID automatically.\n *\n * The result of this write will only be reflected in document reads that occur\n * after the returned promise resolves. If the client is offline, the\n * write fails. If you would like to see local modifications or buffer writes\n * until the client is online, use the full Firestore SDK.\n *\n * @param reference - A reference to the collection to add this document to.\n * @param data - An Object containing the data for the new document.\n * @throws Error - If the provided input is not a valid Firestore document.\n * @returns A `Promise` resolved with a `DocumentReference` pointing to the\n * newly created document after it has been written to the backend.\n */\n\n\nfunction Zr(t, e) {\n  const n = On(t = ct(t, xn)),\n        r = Wr(t.converter, e),\n        s = Jn(Hn(t.firestore), \"addDoc\", n._key, r, null !== n.converter, {});\n  return yn(En(t.firestore), [s.toMutation(n._key, ke.exists(!1))]).then(() => n);\n}\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Calculates the number of documents in the result set of the given query,\n * without actually downloading the documents.\n *\n * Using this function to count the documents is efficient because only the\n * final count, not the documents' data, is downloaded. This function can even\n * count the documents if the result set would be prohibitively large to\n * download entirely (e.g. thousands of documents).\n *\n * @param query - The query whose result set size to calculate.\n * @returns A Promise that will be resolved with the count; the count can be\n * retrieved from `snapshot.data().count`, where `snapshot` is the\n * `AggregateQuerySnapshot` to which the returned Promise resolves.\n */\n\n\nfunction ts(t) {\n  return es(t, {\n    count: ss()\n  });\n}\n/**\n * Calculates the specified aggregations over the documents in the result\n * set of the given query, without actually downloading the documents.\n *\n * Using this function to perform aggregations is efficient because only the\n * final aggregation values, not the documents' data, is downloaded. This\n * function can even perform aggregations of the documents if the result set\n * would be prohibitively large to download entirely (e.g. thousands of documents).\n *\n * @param query The query whose result set to aggregate over.\n * @param aggregateSpec An `AggregateSpec` object that specifies the aggregates\n * to perform over the result set. The AggregateSpec specifies aliases for each\n * aggregate, which can be used to retrieve the aggregate result.\n * @example\n * ```typescript\n * const aggregateSnapshot = await getAggregate(query, {\n *   countOfDocs: count(),\n *   totalHours: sum('hours'),\n *   averageScore: average('score')\n * });\n *\n * const countOfDocs: number = aggregateSnapshot.data().countOfDocs;\n * const totalHours: number = aggregateSnapshot.data().totalHours;\n * const averageScore: number | null = aggregateSnapshot.data().averageScore;\n * ```\n * @internal TODO (sum/avg) remove when public\n */\n\n\nfunction es(t, e) {\n  const n = ct(t.firestore, Tn),\n        r = En(n),\n        s = function (t, e) {\n    const n = [];\n\n    for (const r in t) Object.prototype.hasOwnProperty.call(t, r) && n.push(e(t[r], r, t));\n\n    return n;\n  }(e, (t, e) => new vt(e, t._aggregateType, t._internalFieldPath)); // Run the aggregation and convert the results\n\n\n  return vn(r, t._query, s).then(e => function (t, e, n) {\n    const r = new Gr(t);\n    return new Nn(e, r, n);\n  }\n  /**\n  * Create an AggregateField object that can be used to compute the sum of\n  * a specified field over a range of documents in the result set of a query.\n  * @param field Specifies the field to sum across the result set.\n  * @internal TODO (sum/avg) remove when public\n  */\n  (n, t, e));\n}\n\nfunction ns(t) {\n  return new $n(\"sum\", lr(\"sum\", t));\n}\n/**\n * Create an AggregateField object that can be used to compute the average of\n * a specified field over a range of documents in the result set of a query.\n * @param field Specifies the field to average across the result set.\n * @internal TODO (sum/avg) remove when public\n */\n\n\nfunction rs(t) {\n  return new $n(\"avg\", lr(\"average\", t));\n}\n/**\n * Create an AggregateField object that can be used to compute the count of\n * documents in the result set of a query.\n * @internal TODO (sum/avg) remove when public\n */\n\n\nfunction ss() {\n  return new $n(\"count\");\n}\n/**\n * Compares two 'AggregateField` instances for equality.\n *\n * @param left Compare this AggregateField to the `right`.\n * @param right Compare this AggregateField to the `left`.\n * @internal TODO (sum/avg) remove when public\n */\n\n\nfunction is(t, e) {\n  var n, r;\n  return t instanceof $n && e instanceof $n && t._aggregateType === e._aggregateType && (null === (n = t._internalFieldPath) || void 0 === n ? void 0 : n.canonicalString()) === (null === (r = e._internalFieldPath) || void 0 === r ? void 0 : r.canonicalString());\n}\n/**\n * Compares two `AggregateQuerySnapshot` instances for equality.\n *\n * Two `AggregateQuerySnapshot` instances are considered \"equal\" if they have\n * underlying queries that compare equal, and the same data.\n *\n * @param left - The first `AggregateQuerySnapshot` to compare.\n * @param right - The second `AggregateQuerySnapshot` to compare.\n *\n * @returns `true` if the objects are \"equal\", as defined above, or `false`\n * otherwise.\n */\n\n\nfunction os(t, e) {\n  return Cn(t.query, e.query) && deepEqual(t.data(), e.data());\n}\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a sentinel for use with {@link @firebase/firestore/lite#(updateDoc:1)} or\n * {@link @firebase/firestore/lite#(setDoc:1)} with `{merge: true}` to mark a field for deletion.\n */\n\n\nfunction us() {\n  return new Xn(\"deleteField\");\n}\n/**\n * Returns a sentinel used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link @firebase/firestore/lite#(updateDoc:1)} to\n * include a server-generated timestamp in the written data.\n */\n\n\nfunction cs() {\n  return new tr(\"serverTimestamp\");\n}\n/**\n * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link\n * @firebase/firestore/lite#(updateDoc:1)} that tells the server to union the given elements with any array\n * value that already exists on the server. Each specified element that doesn't\n * already exist in the array will be added to the end. If the field being\n * modified is not already an array it will be overwritten with an array\n * containing exactly the specified elements.\n *\n * @param elements - The elements to union into the array.\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\n * `updateDoc()`.\n */\n\n\nfunction as() {\n  for (var _len16 = arguments.length, t = new Array(_len16), _key16 = 0; _key16 < _len16; _key16++) {\n    t[_key16] = arguments[_key16];\n  }\n\n  // NOTE: We don't actually parse the data until it's used in set() or\n  // update() since we'd need the Firestore instance to do this.\n  return new er(\"arrayUnion\", t);\n}\n/**\n * Returns a special value that can be used with {@link (setDoc:1)} or {@link\n * updateDoc:1} that tells the server to remove the given elements from any\n * array value that already exists on the server. All instances of each element\n * specified will be removed from the array. If the field being modified is not\n * already an array it will be overwritten with an empty array.\n *\n * @param elements - The elements to remove from the array.\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\n * `updateDoc()`\n */\n\n\nfunction hs() {\n  for (var _len17 = arguments.length, t = new Array(_len17), _key17 = 0; _key17 < _len17; _key17++) {\n    t[_key17] = arguments[_key17];\n  }\n\n  // NOTE: We don't actually parse the data until it's used in set() or\n  // update() since we'd need the Firestore instance to do this.\n  return new nr(\"arrayRemove\", t);\n}\n/**\n * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link\n * @firebase/firestore/lite#(updateDoc:1)} that tells the server to increment the field's current value by\n * the given value.\n *\n * If either the operand or the current field value uses floating point\n * precision, all arithmetic follows IEEE 754 semantics. If both values are\n * integers, values outside of JavaScript's safe number range\n * (`Number.MIN_SAFE_INTEGER` to `Number.MAX_SAFE_INTEGER`) are also subject to\n * precision loss. Furthermore, once processed by the Firestore backend, all\n * integer operations are capped between -2^63 and 2^63-1.\n *\n * If the current field value is not of type `number`, or if the field does not\n * yet exist, the transformation sets the field to the given value.\n *\n * @param n - The value to increment by.\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\n * `updateDoc()`\n */\n\n\nfunction ls(t) {\n  return new rr(\"increment\", t);\n}\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A write batch, used to perform multiple writes as a single atomic unit.\n *\n * A `WriteBatch` object can be acquired by calling {@link writeBatch}. It\n * provides methods for adding writes to the write batch. None of the writes\n * will be committed (or visible locally) until {@link WriteBatch.commit} is\n * called.\n */\n\n\nclass fs {\n  /** @hideconstructor */\n  constructor(t, e) {\n    this._firestore = t, this._commitHandler = e, this._mutations = [], this._committed = !1, this._dataReader = Hn(t);\n  }\n\n  set(t, e, n) {\n    this._verifyNotCommitted();\n\n    const r = ds(t, this._firestore),\n          s = Wr(r.converter, e, n),\n          i = Jn(this._dataReader, \"WriteBatch.set\", r._key, s, null !== r.converter, n);\n    return this._mutations.push(i.toMutation(r._key, ke.none())), this;\n  }\n\n  update(t, e, n) {\n    this._verifyNotCommitted();\n\n    const s = ds(t, this._firestore); // For Compat types, we have to \"extract\" the underlying types before\n    // performing validation.\n\n    let i;\n\n    for (var _len18 = arguments.length, r = new Array(_len18 > 3 ? _len18 - 3 : 0), _key18 = 3; _key18 < _len18; _key18++) {\n      r[_key18 - 3] = arguments[_key18];\n    }\n\n    return i = \"string\" == typeof (e = getModularInstance(e)) || e instanceof Ln ? ir(this._dataReader, \"WriteBatch.update\", s._key, e, n, r) : sr(this._dataReader, \"WriteBatch.update\", s._key, e), this._mutations.push(i.toMutation(s._key, ke.exists(!0))), this;\n  }\n  /**\n   * Deletes the document referred to by the provided {@link DocumentReference}.\n   *\n   * @param documentRef - A reference to the document to be deleted.\n   * @returns This `WriteBatch` instance. Used for chaining method calls.\n   */\n\n\n  delete(t) {\n    this._verifyNotCommitted();\n\n    const e = ds(t, this._firestore);\n    return this._mutations = this._mutations.concat(new Ue(e._key, ke.none())), this;\n  }\n  /**\n   * Commits all of the writes in this write batch as a single atomic unit.\n   *\n   * The result of these writes will only be reflected in document reads that\n   * occur after the returned promise resolves. If the client is offline, the\n   * write fails. If you would like to see local modifications or buffer writes\n   * until the client is online, use the full Firestore SDK.\n   *\n   * @returns A `Promise` resolved once all of the writes in the batch have been\n   * successfully written to the backend as an atomic unit (note that it won't\n   * resolve while you're offline).\n   */\n\n\n  commit() {\n    return this._verifyNotCommitted(), this._committed = !0, this._mutations.length > 0 ? this._commitHandler(this._mutations) : Promise.resolve();\n  }\n\n  _verifyNotCommitted() {\n    if (this._committed) throw new U(S, \"A write batch can no longer be used after commit() has been called.\");\n  }\n\n}\n\nfunction ds(t, e) {\n  if ((t = getModularInstance(t)).firestore !== e) throw new U(P, \"Provided document reference is from a different Firestore instance.\");\n  return t;\n}\n/**\n * Creates a write batch, used for performing multiple writes as a single\n * atomic operation. The maximum number of writes allowed in a single WriteBatch\n * is 500.\n *\n * The result of these writes will only be reflected in document reads that\n * occur after the returned promise resolves. If the client is offline, the\n * write fails. If you would like to see local modifications or buffer writes\n * until the client is online, use the full Firestore SDK.\n *\n * @returns A `WriteBatch` that can be used to atomically execute multiple\n * writes.\n */\n\n\nfunction ws(t) {\n  const e = En(t = ct(t, Tn));\n  return new fs(t, t => yn(e, t));\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Internal transaction object responsible for accumulating the mutations to\n * perform and the base versions for any documents read.\n */\n\n\nclass ms {\n  constructor(t) {\n    this.datastore = t, // The version of each document that was read during this transaction.\n    this.readVersions = new Map(), this.mutations = [], this.committed = !1,\n    /**\n     * A deferred usage error that occurred previously in this transaction that\n     * will cause the transaction to fail once it actually commits.\n     */\n    this.lastWriteError = null,\n    /**\n     * Set of documents that have been written in the transaction.\n     *\n     * When there's more than one write to the same key in a transaction, any\n     * writes after the first are handled differently.\n     */\n    this.writtenDocs = new Set();\n  }\n\n  async lookup(t) {\n    if (this.ensureCommitNotCalled(), this.mutations.length > 0) throw new U(P, \"Firestore transactions require all reads to be executed before all writes.\");\n    const e = await gn(this.datastore, t);\n    return e.forEach(t => this.recordVersion(t)), e;\n  }\n\n  set(t, e) {\n    this.write(e.toMutation(t, this.precondition(t))), this.writtenDocs.add(t.toString());\n  }\n\n  update(t, e) {\n    try {\n      this.write(e.toMutation(t, this.preconditionForUpdate(t)));\n    } catch (t) {\n      this.lastWriteError = t;\n    }\n\n    this.writtenDocs.add(t.toString());\n  }\n\n  delete(t) {\n    this.write(new Ue(t, this.precondition(t))), this.writtenDocs.add(t.toString());\n  }\n\n  async commit() {\n    if (this.ensureCommitNotCalled(), this.lastWriteError) throw this.lastWriteError;\n    const t = this.readVersions; // For each mutation, note that the doc was written.\n\n    this.mutations.forEach(e => {\n      t.delete(e.key.toString());\n    }), // For each document that was read but not written to, we want to perform\n    // a `verify` operation.\n    t.forEach((t, e) => {\n      const n = rt.fromPath(e);\n      this.mutations.push(new je(n, this.precondition(n)));\n    }), await yn(this.datastore, this.mutations), this.committed = !0;\n  }\n\n  recordVersion(t) {\n    let e;\n    if (t.isFoundDocument()) e = t.version;else {\n      if (!t.isNoDocument()) throw b(); // Represent a deleted doc using SnapshotVersion.min().\n\n      e = le.min();\n    }\n    const n = this.readVersions.get(t.key.toString());\n\n    if (n) {\n      if (!e.isEqual(n)) // This transaction will fail no matter what.\n        throw new U(q, \"Document version changed between two reads.\");\n    } else this.readVersions.set(t.key.toString(), e);\n  }\n  /**\n   * Returns the version of this document when it was read in this transaction,\n   * as a precondition, or no precondition if it was not read.\n   */\n\n\n  precondition(t) {\n    const e = this.readVersions.get(t.toString());\n    return !this.writtenDocs.has(t.toString()) && e ? e.isEqual(le.min()) ? ke.exists(!1) : ke.updateTime(e) : ke.none();\n  }\n  /**\n   * Returns the precondition for a document if the operation is an update.\n   */\n\n\n  preconditionForUpdate(t) {\n    const e = this.readVersions.get(t.toString()); // The first time a document is written, we want to take into account the\n    // read time and existence\n\n    if (!this.writtenDocs.has(t.toString()) && e) {\n      if (e.isEqual(le.min())) // The document doesn't exist, so fail the transaction.\n        // This has to be validated locally because you can't send a\n        // precondition that a document does not exist without changing the\n        // semantics of the backend write to be an insert. This is the reverse\n        // of what we want, since we want to assert that the document doesn't\n        // exist but then send the update and have it fail. Since we can't\n        // express that to the backend, we have to validate locally.\n        // Note: this can change once we can send separate verify writes in the\n        // transaction.\n        throw new U(P, \"Can't update a document that doesn't exist.\"); // Document exists, base precondition on document update time.\n\n      return ke.updateTime(e);\n    } // Document was not read, so we just use the preconditions for a blind\n    // update.\n\n\n    return ke.exists(!0);\n  }\n\n  write(t) {\n    this.ensureCommitNotCalled(), this.mutations.push(t);\n  }\n\n  ensureCommitNotCalled() {}\n\n}\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nconst ps = {\n  maxAttempts: 5\n};\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * TransactionRunner encapsulates the logic needed to run and retry transactions\n * with backoff.\n */\n\nclass ys {\n  constructor(t, e, n, r, s) {\n    this.asyncQueue = t, this.datastore = e, this.options = n, this.updateFunction = r, this.deferred = s, this.yt = n.maxAttempts, this.gt = new mn(this.asyncQueue, \"transaction_retry\"\n    /* TimerId.TransactionRetry */\n    );\n  }\n  /** Runs the transaction and sets the result on deferred. */\n\n\n  run() {\n    this.yt -= 1, this._t();\n  }\n\n  _t() {\n    this.gt.K(async () => {\n      const t = new ms(this.datastore),\n            e = this.vt(t);\n      e && e.then(e => {\n        this.asyncQueue.enqueueAndForget(() => t.commit().then(() => {\n          this.deferred.resolve(e);\n        }).catch(t => {\n          this.bt(t);\n        }));\n      }).catch(t => {\n        this.bt(t);\n      });\n    });\n  }\n\n  vt(t) {\n    try {\n      const e = this.updateFunction(t);\n      return !dt(e) && e.catch && e.then ? e : (this.deferred.reject(Error(\"Transaction callback must return a Promise\")), null);\n    } catch (t) {\n      // Do not retry errors thrown by user provided updateFunction.\n      return this.deferred.reject(t), null;\n    }\n  }\n\n  bt(t) {\n    this.yt > 0 && this.Et(t) ? (this.yt -= 1, this.asyncQueue.enqueueAndForget(() => (this._t(), Promise.resolve()))) : this.deferred.reject(t);\n  }\n\n  Et(t) {\n    if (\"FirebaseError\" === t.name) {\n      // In transactions, the backend will fail outdated reads with FAILED_PRECONDITION and\n      // non-matching document versions with ABORTED. These errors should be retried.\n      const e = t.code;\n      return \"aborted\" === e || \"failed-precondition\" === e || \"already-exists\" === e || !\n      /**\n      * Determines whether an error code represents a permanent error when received\n      * in response to a non-write operation.\n      *\n      * See isPermanentWriteError for classifying write errors.\n      */\n      function (t) {\n        switch (t) {\n          default:\n            return b();\n\n          case A:\n          case R:\n          case V:\n          case x:\n          case C:\n          case M: // Unauthenticated means something went wrong with our token and we need\n          // to retry with new credentials which will happen automatically.\n\n          case F:\n            return !1;\n\n          case P:\n          case $:\n          case N:\n          case D:\n          case S: // Aborted might be retried in some scenarios, but that is dependant on\n          // the context and should handled individually by the calling code.\n          // See https://cloud.google.com/apis/design/errors.\n\n          case q:\n          case O:\n          case k:\n          case L:\n            return !0;\n        }\n      }(e);\n    }\n\n    return !1;\n  }\n\n}\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The Platform's 'document' implementation or null if not available. */\n\n\nfunction gs() {\n  // `document` is not always available, e.g. in ReactNative and WebWorkers.\n  // eslint-disable-next-line no-restricted-globals\n  return \"undefined\" != typeof document ? document : null;\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Represents an operation scheduled to be run in the future on an AsyncQueue.\n *\n * It is created via DelayedOperation.createAndSchedule().\n *\n * Supports cancellation (via cancel()) and early execution (via skipDelay()).\n *\n * Note: We implement `PromiseLike` instead of `Promise`, as the `Promise` type\n * in newer versions of TypeScript defines `finally`, which is not available in\n * IE.\n */\n\n\nclass _s {\n  constructor(t, e, n, r, s) {\n    this.asyncQueue = t, this.timerId = e, this.targetTimeMs = n, this.op = r, this.removalCallback = s, this.deferred = new j(), this.then = this.deferred.promise.then.bind(this.deferred.promise), // It's normal for the deferred promise to be canceled (due to cancellation)\n    // and so we attach a dummy catch callback to avoid\n    // 'UnhandledPromiseRejectionWarning' log spam.\n    this.deferred.promise.catch(t => {});\n  }\n  /**\n   * Creates and returns a DelayedOperation that has been scheduled to be\n   * executed on the provided asyncQueue after the provided delayMs.\n   *\n   * @param asyncQueue - The queue to schedule the operation on.\n   * @param id - A Timer ID identifying the type of operation this is.\n   * @param delayMs - The delay (ms) before the operation should be scheduled.\n   * @param op - The operation to run.\n   * @param removalCallback - A callback to be called synchronously once the\n   *   operation is executed or canceled, notifying the AsyncQueue to remove it\n   *   from its delayedOperations list.\n   *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and\n   *   the DelayedOperation class public.\n   */\n\n\n  static createAndSchedule(t, e, n, r, s) {\n    const i = Date.now() + n,\n          o = new _s(t, e, i, r, s);\n    return o.start(n), o;\n  }\n  /**\n   * Starts the timer. This is called immediately after construction by\n   * createAndSchedule().\n   */\n\n\n  start(t) {\n    this.timerHandle = setTimeout(() => this.handleDelayElapsed(), t);\n  }\n  /**\n   * Queues the operation to run immediately (if it hasn't already been run or\n   * canceled).\n   */\n\n\n  skipDelay() {\n    return this.handleDelayElapsed();\n  }\n  /**\n   * Cancels the operation if it hasn't already been executed or canceled. The\n   * promise will be rejected.\n   *\n   * As long as the operation has not yet been run, calling cancel() provides a\n   * guarantee that the operation will not be run.\n   */\n\n\n  cancel(t) {\n    null !== this.timerHandle && (this.clearTimeout(), this.deferred.reject(new U(A, \"Operation cancelled\" + (t ? \": \" + t : \"\"))));\n  }\n\n  handleDelayElapsed() {\n    this.asyncQueue.enqueueAndForget(() => null !== this.timerHandle ? (this.clearTimeout(), this.op().then(t => this.deferred.resolve(t))) : Promise.resolve());\n  }\n\n  clearTimeout() {\n    null !== this.timerHandle && (this.removalCallback(this), clearTimeout(this.timerHandle), this.timerHandle = null);\n  }\n\n}\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nclass vs {\n  constructor() {\n    // The last promise in the queue.\n    this.It = Promise.resolve(), // A list of retryable operations. Retryable operations are run in order and\n    // retried with backoff.\n    this.Tt = [], // Is this AsyncQueue being shut down? Once it is set to true, it will not\n    // be changed again.\n    this.At = !1, // Operations scheduled to be queued in the future. Operations are\n    // automatically removed after they are run or canceled.\n    this.Rt = [], // visible for testing\n    this.Pt = null, // Flag set while there's an outstanding AsyncQueue operation, used for\n    // assertion sanity-checks.\n    this.Vt = !1, // Enabled during shutdown on Safari to prevent future access to IndexedDB.\n    this.$t = !1, // List of TimerIds to fast-forward delays for.\n    this.Nt = [], // Backoff timer used to schedule retries for retryable operations\n    this.gt = new mn(this, \"async_queue_retry\"\n    /* TimerId.AsyncQueueRetry */\n    ), // Visibility handler that triggers an immediate retry of all retryable\n    // operations. Meant to speed up recovery when we regain file system access\n    // after page comes into foreground.\n    this.Dt = () => {\n      const t = gs();\n      t && y(\"AsyncQueue\", \"Visibility state changed to \" + t.visibilityState), this.gt.H();\n    };\n    const t = gs();\n    t && \"function\" == typeof t.addEventListener && t.addEventListener(\"visibilitychange\", this.Dt);\n  }\n\n  get isShuttingDown() {\n    return this.At;\n  }\n  /**\n   * Adds a new operation to the queue without waiting for it to complete (i.e.\n   * we ignore the Promise result).\n   */\n\n\n  enqueueAndForget(t) {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.enqueue(t);\n  }\n\n  enqueueAndForgetEvenWhileRestricted(t) {\n    this.Ft(), // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.xt(t);\n  }\n\n  enterRestrictedMode(t) {\n    if (!this.At) {\n      this.At = !0, this.$t = t || !1;\n      const e = gs();\n      e && \"function\" == typeof e.removeEventListener && e.removeEventListener(\"visibilitychange\", this.Dt);\n    }\n  }\n\n  enqueue(t) {\n    if (this.Ft(), this.At) // Return a Promise which never resolves.\n      return new Promise(() => {}); // Create a deferred Promise that we can return to the callee. This\n    // allows us to return a \"hanging Promise\" only to the callee and still\n    // advance the queue even when the operation is not run.\n\n    const e = new j();\n    return this.xt(() => this.At && this.$t ? Promise.resolve() : (t().then(e.resolve, e.reject), e.promise)).then(() => e.promise);\n  }\n\n  enqueueRetryable(t) {\n    this.enqueueAndForget(() => (this.Tt.push(t), this.St()));\n  }\n  /**\n   * Runs the next operation from the retryable queue. If the operation fails,\n   * reschedules with backoff.\n   */\n\n\n  async St() {\n    if (0 !== this.Tt.length) {\n      try {\n        await this.Tt[0](), this.Tt.shift(), this.gt.reset();\n      } catch (t) {\n        if (!\n        /**\n        * @license\n        * Copyright 2017 Google LLC\n        *\n        * Licensed under the Apache License, Version 2.0 (the \"License\");\n        * you may not use this file except in compliance with the License.\n        * You may obtain a copy of the License at\n        *\n        *   http://www.apache.org/licenses/LICENSE-2.0\n        *\n        * Unless required by applicable law or agreed to in writing, software\n        * distributed under the License is distributed on an \"AS IS\" BASIS,\n        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n        * See the License for the specific language governing permissions and\n        * limitations under the License.\n        */\n\n        /** Verifies whether `e` is an IndexedDbTransactionError. */\n        function (t) {\n          // Use name equality, as instanceof checks on errors don't work with errors\n          // that wrap other errors.\n          return \"IndexedDbTransactionError\" === t.name;\n        }\n        /**\n        * @license\n        * Copyright 2020 Google LLC\n        *\n        * Licensed under the Apache License, Version 2.0 (the \"License\");\n        * you may not use this file except in compliance with the License.\n        * You may obtain a copy of the License at\n        *\n        *   http://www.apache.org/licenses/LICENSE-2.0\n        *\n        * Unless required by applicable law or agreed to in writing, software\n        * distributed under the License is distributed on an \"AS IS\" BASIS,\n        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n        * See the License for the specific language governing permissions and\n        * limitations under the License.\n        */\n        (t)) throw t; // Failure will be handled by AsyncQueue\n\n        y(\"AsyncQueue\", \"Operation failed with retryable error: \" + t);\n      }\n\n      this.Tt.length > 0 && // If there are additional operations, we re-schedule `retryNextOp()`.\n      // This is necessary to run retryable operations that failed during\n      // their initial attempt since we don't know whether they are already\n      // enqueued. If, for example, `op1`, `op2`, `op3` are enqueued and `op1`\n      // needs to  be re-run, we will run `op1`, `op1`, `op2` using the\n      // already enqueued calls to `retryNextOp()`. `op3()` will then run in the\n      // call scheduled here.\n      // Since `backoffAndRun()` cancels an existing backoff and schedules a\n      // new backoff on every call, there is only ever a single additional\n      // operation in the queue.\n      this.gt.K(() => this.St());\n    }\n  }\n\n  xt(t) {\n    const e = this.It.then(() => (this.Vt = !0, t().catch(t => {\n      this.Pt = t, this.Vt = !1;\n\n      const e =\n      /**\n      * Chrome includes Error.message in Error.stack. Other browsers do not.\n      * This returns expected output of message + stack when available.\n      * @param error - Error or FirestoreError\n      */\n      function (t) {\n        let e = t.message || \"\";\n        t.stack && (e = t.stack.includes(t.message) ? t.stack : t.message + \"\\n\" + t.stack);\n        return e;\n      }\n      /**\n      * @license\n      * Copyright 2020 Google LLC\n      *\n      * Licensed under the Apache License, Version 2.0 (the \"License\");\n      * you may not use this file except in compliance with the License.\n      * You may obtain a copy of the License at\n      *\n      *   http://www.apache.org/licenses/LICENSE-2.0\n      *\n      * Unless required by applicable law or agreed to in writing, software\n      * distributed under the License is distributed on an \"AS IS\" BASIS,\n      * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n      * See the License for the specific language governing permissions and\n      * limitations under the License.\n      */\n      // TODO(mrschmidt) Consider using `BaseTransaction` as the base class in the\n      // legacy SDK.\n\n      /**\n      * A reference to a transaction.\n      *\n      * The `Transaction` object passed to a transaction's `updateFunction` provides\n      * the methods to read and write data within the transaction context. See\n      * {@link runTransaction}.\n      */\n      (t); // Re-throw the error so that this.tail becomes a rejected Promise and\n      // all further attempts to chain (via .then) will just short-circuit\n      // and return the rejected Promise.\n\n\n      throw g(\"INTERNAL UNHANDLED ERROR: \", e), t;\n    }).then(t => (this.Vt = !1, t))));\n    return this.It = e, e;\n  }\n\n  enqueueAfterDelay(t, e, n) {\n    this.Ft(), // Fast-forward delays for timerIds that have been overriden.\n    this.Nt.indexOf(t) > -1 && (e = 0);\n\n    const r = _s.createAndSchedule(this, t, e, n, t => this.qt(t));\n\n    return this.Rt.push(r), r;\n  }\n\n  Ft() {\n    this.Pt && b();\n  }\n\n  verifyOperationInProgress() {}\n  /**\n   * Waits until all currently queued tasks are finished executing. Delayed\n   * operations are not run.\n   */\n\n\n  async Ot() {\n    // Operations in the queue prior to draining may have enqueued additional\n    // operations. Keep draining the queue until the tail is no longer advanced,\n    // which indicates that no more new operations were enqueued and that all\n    // operations were executed.\n    let t;\n\n    do {\n      t = this.It, await t;\n    } while (t !== this.It);\n  }\n  /**\n   * For Tests: Determine if a delayed operation with a particular TimerId\n   * exists.\n   */\n\n\n  kt(t) {\n    for (const e of this.Rt) if (e.timerId === t) return !0;\n\n    return !1;\n  }\n  /**\n   * For Tests: Runs some or all delayed operations early.\n   *\n   * @param lastTimerId - Delayed operations up to and including this TimerId\n   * will be drained. Pass TimerId.All to run all delayed operations.\n   * @returns a Promise that resolves once all operations have been run.\n   */\n\n\n  Ct(t) {\n    // Note that draining may generate more delayed ops, so we do that first.\n    return this.Ot().then(() => {\n      // Run ops in the same order they'd run if they ran naturally.\n      this.Rt.sort((t, e) => t.targetTimeMs - e.targetTimeMs);\n\n      for (const e of this.Rt) if (e.skipDelay(), \"all\"\n      /* TimerId.All */\n      !== t && e.timerId === t) break;\n\n      return this.Ot();\n    });\n  }\n  /**\n   * For Tests: Skip all subsequent delays for a timer id.\n   */\n\n\n  Mt(t) {\n    this.Nt.push(t);\n  }\n  /** Called once a DelayedOperation is run or canceled. */\n\n\n  qt(t) {\n    // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.\n    const e = this.Rt.indexOf(t);\n    this.Rt.splice(e, 1);\n  }\n\n}\n\nclass bs {\n  /** @hideconstructor */\n  constructor(t, e) {\n    this._firestore = t, this._transaction = e, this._dataReader = Hn(t);\n  }\n  /**\n   * Reads the document referenced by the provided {@link DocumentReference}.\n   *\n   * @param documentRef - A reference to the document to be read.\n   * @returns A `DocumentSnapshot` with the read data.\n   */\n\n\n  get(t) {\n    const e = ds(t, this._firestore),\n          n = new Gr(this._firestore);\n    return this._transaction.lookup([e._key]).then(t => {\n      if (!t || 1 !== t.length) return b();\n      const r = t[0];\n      if (r.isFoundDocument()) return new pr(this._firestore, n, r.key, r, e.converter);\n      if (r.isNoDocument()) return new pr(this._firestore, n, e._key, null, e.converter);\n      throw b();\n    });\n  }\n\n  set(t, e, n) {\n    const r = ds(t, this._firestore),\n          s = Wr(r.converter, e, n),\n          i = Jn(this._dataReader, \"Transaction.set\", r._key, s, null !== r.converter, n);\n    return this._transaction.set(r._key, i), this;\n  }\n\n  update(t, e, n) {\n    const s = ds(t, this._firestore); // For Compat types, we have to \"extract\" the underlying types before\n    // performing validation.\n\n    let i;\n\n    for (var _len19 = arguments.length, r = new Array(_len19 > 3 ? _len19 - 3 : 0), _key19 = 3; _key19 < _len19; _key19++) {\n      r[_key19 - 3] = arguments[_key19];\n    }\n\n    return i = \"string\" == typeof (e = getModularInstance(e)) || e instanceof Ln ? ir(this._dataReader, \"Transaction.update\", s._key, e, n, r) : sr(this._dataReader, \"Transaction.update\", s._key, e), this._transaction.update(s._key, i), this;\n  }\n  /**\n   * Deletes the document referred to by the provided {@link DocumentReference}.\n   *\n   * @param documentRef - A reference to the document to be deleted.\n   * @returns This `Transaction` instance. Used for chaining method calls.\n   */\n\n\n  delete(t) {\n    const e = ds(t, this._firestore);\n    return this._transaction.delete(e._key), this;\n  }\n\n}\n/**\n * Executes the given `updateFunction` and then attempts to commit the changes\n * applied within the transaction. If any document read within the transaction\n * has changed, Cloud Firestore retries the `updateFunction`. If it fails to\n * commit after 5 attempts, the transaction fails.\n *\n * The maximum number of writes allowed in a single transaction is 500.\n *\n * @param firestore - A reference to the Firestore database to run this\n * transaction against.\n * @param updateFunction - The function to execute within the transaction\n * context.\n * @param options - An options object to configure maximum number of attempts to\n * commit.\n * @returns If the transaction completed successfully or was explicitly aborted\n * (the `updateFunction` returned a failed promise), the promise returned by the\n * `updateFunction `is returned here. Otherwise, if the transaction failed, a\n * rejected promise with the corresponding failure error is returned.\n */\n\n\nfunction Es(t, e, n) {\n  const r = En(t = ct(t, Tn)),\n        s = Object.assign(Object.assign({}, ps), n);\n  !function (t) {\n    if (t.maxAttempts < 1) throw new U(P, \"Max attempts must be at least 1\");\n  }(s);\n  const i = new j();\n  return new ys(new vs(), r, s, n => e(new bs(t, n)), i).run(), i.promise;\n}\n/**\n * Firestore Lite\n *\n * @remarks Firestore Lite is a small online-only SDK that allows read\n * and write access to your Firestore database. All operations connect\n * directly to the backend, and `onSnapshot()` APIs are not supported.\n * @packageDocumentation\n */\n\n\n!function (t) {\n  w = t;\n}(`${SDK_VERSION}_lite`), _registerComponent(new Component(\"firestore/lite\", (t, _ref3) => {\n  let {\n    instanceIdentifier: e,\n    options: n\n  } = _ref3;\n  const r = t.getProvider(\"app\").getImmediate(),\n        s = new Tn(new W(t.getProvider(\"auth-internal\")), new H(t.getProvider(\"app-check-internal\")), function (t, e) {\n    if (!Object.prototype.hasOwnProperty.apply(t.options, [\"projectId\"])) throw new U(P, '\"projectId\" not provided in firebase.initializeApp.');\n    return new X(t.options.projectId, e);\n  }\n  /**\n  * @license\n  * Copyright 2017 Google LLC\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n  (r, e), r);\n  return n && s._setSettings(n), s;\n}, \"PUBLIC\").setMultipleInstances(!0)), // RUNTIME_ENV and BUILD_TARGET are replaced by real values during the compilation\nregisterVersion(\"firestore-lite\", \"3.13.0\", \"\"), registerVersion(\"firestore-lite\", \"3.13.0\", \"esm2017\");\nexport { $n as AggregateField, Nn as AggregateQuerySnapshot, Mn as Bytes, xn as CollectionReference, Dn as DocumentReference, pr as DocumentSnapshot, Ln as FieldPath, jn as FieldValue, Tn as Firestore, U as FirestoreError, Bn as GeoPoint, Fn as Query, Rr as QueryCompositeFilterConstraint, Er as QueryConstraint, yr as QueryDocumentSnapshot, kr as QueryEndAtConstraint, Tr as QueryFieldFilterConstraint, Dr as QueryLimitConstraint, $r as QueryOrderByConstraint, gr as QuerySnapshot, Sr as QueryStartAtConstraint, xt as Timestamp, bs as Transaction, fs as WriteBatch, Zr as addDoc, is as aggregateFieldEqual, os as aggregateQuerySnapshotEqual, Vr as and, hs as arrayRemove, as as arrayUnion, rs as average, Sn as collection, qn as collectionGroup, Pn as connectFirestoreEmulator, ss as count, Xr as deleteDoc, us as deleteField, On as doc, Un as documentId, Mr as endAt, Cr as endBefore, es as getAggregate, ts as getCount, Kr as getDoc, Yr as getDocs, Rn as getFirestore, ls as increment, An as initializeFirestore, Fr as limit, xr as limitToLast, Pr as or, Nr as orderBy, Ir as query, Cn as queryEqual, kn as refEqual, Es as runTransaction, cs as serverTimestamp, Hr as setDoc, p as setLogLevel, _r as snapshotEqual, Or as startAfter, qr as startAt, ns as sum, Vn as terminate, Jr as updateDoc, Ar as where, ws as writeBatch };","map":{"version":3,"mappings":"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","names":["d","constructor","t","uid","isAuthenticated","toKey","isEqual","UNAUTHENTICATED","GOOGLE_CREDENTIALS","FIRST_PARTY","MOCK_USER","w","m","o","p","setLogLevel","y","logLevel","u","DEBUG","e","n","map","v","debug","g","ERROR","error","_","WARN","warn","JSON","stringify","b","Error","E","I","T","A","R","P","V","$","N","D","F","x","S","q","O","k","C","M","L","U","c","code","message","toString","name","j","promise","Promise","resolve","reject","B","user","type","headers","Map","set","Q","getToken","invalidateToken","start","enqueueRetryable","shutdown","z","token","changeListener","W","auth","onInit","then","accessToken","getUid","G","i","h","K","Y","value","length","H","l","appCheck","J","r","s","databaseId","appId","persistenceKey","host","ssl","forceLongPolling","autoDetectLongPolling","longPollingOptions","useFetchStreams","X","projectId","database","empty","isDefaultDatabase","Z","segments","offset","len","comparator","child","slice","limit","forEach","push","construct","popFirst","popLast","firstSegment","lastSegment","get","isEmpty","isPrefixOf","isImmediateParentOf","toArray","Math","min","tt","canonicalString","join","fromString","indexOf","split","filter","emptyPath","et","nt","isValidIdentifier","test","replace","isKeyField","keyField","fromServerFormat","rt","path","fromPath","fromName","collectionGroup","hasCollectionId","getCollectionGroup","getCollectionPath","isDocumentKey","fromSegments","st","it","ot","ut","substring","Array","ct","_delegate","at","ht","timeoutSeconds","lt","ft","round","random","dt","wt","mt","BatchGetDocuments","Commit","RunQuery","RunAggregationQuery","pt","yt","gt","OK","CANCELLED","UNKNOWN","INVALID_ARGUMENT","DEADLINE_EXCEEDED","NOT_FOUND","ALREADY_EXISTS","PERMISSION_DENIED","RESOURCE_EXHAUSTED","FAILED_PRECONDITION","ABORTED","OUT_OF_RANGE","UNIMPLEMENTED","INTERNAL","UNAVAILABLE","DATA_LOSS","_t","databaseInfo","method","body","status","statusText","ok","json","isArray","vt","alias","fieldPath","bt","self","crypto","msCrypto","Uint8Array","getRandomValues","floor","Et","charAt","It","Tt","every","At","Object","prototype","hasOwnProperty","call","Rt","Pt","arguments","Vt","binaryString","fromBase64String","atob","DOMException","fromUint8Array","String","fromCharCode","Symbol","iterator","next","charCodeAt","done","toBase64","btoa","toUint8Array","approximateByteSize","compareTo","EMPTY_BYTE_STRING","$t","RegExp","Nt","exec","substr","Number","Date","seconds","getTime","nanos","Dt","Ft","xt","nanoseconds","now","fromMillis","fromDate","toDate","toMillis","_compareTo","toJSON","valueOf","padStart","St","mapValue","fields","__type__","stringValue","qt","__previous_value__","Ot","__local_write_time__","timestampValue","kt","Ct","Mt","booleanValue","bytesValue","referenceValue","geoPointValue","latitude","longitude","integerValue","doubleValue","isNaN","arrayValue","values","Lt","find","Ut","jt","keys","sort","Bt","Qt","zt","Wt","Gt","Kt","assign","Yt","position","inclusive","Ht","Jt","Xt","field","op","create","createKeyFieldInFilter","ee","ie","oe","ue","ce","ne","re","matches","data","matchesComparison","isInequality","getFlattenedFilters","getFilters","getFirstInequalityField","Zt","filters","reduce","concat","te","key","se","some","nullValue","ae","dir","he","le","timestamp","fromTimestamp","max","toMicroseconds","toTimestamp","fe","root","we","EMPTY","insert","copy","BLACK","remove","left","right","size","minKey","maxKey","inorderTraversal","reverseTraversal","getIterator","de","getIteratorFrom","getReverseIterator","getReverseIteratorFrom","isReverse","nodeStack","getNext","pop","hasNext","peek","color","RED","fixUp","removeMin","isRed","moveRedLeft","rotateRight","moveRedRight","rotateLeft","colorFlip","checkMaxDepth","check","pow","me","has","first","last","forEachInRange","forEachWhile","firstAfterOrEqual","pe","add","delete","unionWith","iter","ye","covers","ge","getFieldsMap","setAll","applyChanges","clone","_e","documentType","version","readTime","createTime","documentState","newInvalidDocument","newFoundDocument","newNoDocument","newUnknownDocument","convertToFoundDocument","convertToNoDocument","convertToUnknownDocument","setHasCommittedMutations","setHasLocalMutations","setReadTime","hasLocalMutations","hasCommittedMutations","hasPendingWrites","isValidDocument","isFoundDocument","isNoDocument","isUnknownDocument","mutableCopy","ve","orderBy","startAt","endAt","be","Ee","explicitOrderBy","limitType","Ie","Te","Ae","Re","Pe","Ve","$e","Ne","isInteger","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","useProto3Json","De","Fe","xe","elements","Se","qe","serializer","Oe","transform","ke","updateTime","exists","none","isNone","Ce","Me","precondition","fieldTransforms","getFieldMask","Le","fieldMask","Ue","je","Be","asc","desc","Qe","in","ze","and","or","We","Ge","toISOString","Ke","Ye","He","Je","Xe","Ze","dn","tn","en","nn","rn","found","missing","sn","update","updateMask","fn","verify","updateTransforms","setToServerValue","appendMissingElements","removeAllFromArray","increment","currentDocument","on","structuredQuery","parent","from","collectionId","allDescendants","ln","where","hn","direction","un","before","cn","an","unaryFilter","fieldFilter","compositeFilter","fieldPaths","wn","mn","timerId","reset","cancel","enqueueAfterDelay","skipDelay","pn","authCredentials","appCheckCredentials","connection","all","catch","terminate","yn","writes","gn","documents","_n","document","vn","request","count","avg","sum","structuredAggregationQuery","aggregations","result","a","aggregateFields","bn","En","_terminated","fetch","bind","_databaseId","app","options","_persistenceKey","_freezeSettings","experimentalForceLongPolling","experimentalAutoDetectLongPolling","experimentalLongPollingOptions","_authCredentials","_appCheckCredentials","In","credentials","ignoreUndefinedProperties","cache","localCache","cacheSizeBytes","Tn","_app","_settings","_settingsFrozen","_initialized","_terminateTask","_setSettings","sessionIndex","iamToken","authTokenFactory","client","_getSettings","_delete","_terminate","settings","An","_getProvider","isInitialized","initialize","instanceIdentifier","Rn","getImmediate","identifier","Pn","mockUserToken","sub","user_id","Vn","$n","_aggregateType","_internalFieldPath","Nn","_userDataWriter","_data","query","convertObjectMap","Dn","converter","_key","firestore","_path","id","xn","withConverter","Fn","_query","Sn","qn","On","kn","Cn","Mn","_byteString","Ln","_internalPath","Un","jn","_methodName","Bn","isFinite","_lat","_long","Qn","zn","toMutation","Wn","Gn","Kn","wr","methodName","contains","Yn","Hn","Jn","merge","mergeFields","hr","cr","lr","mr","Xn","_toFieldTransform","Zn","tr","er","ur","nr","rr","sr","dr","ir","f","ar","getPrototypeOf","fr","search","pr","_firestore","_document","_converter","ref","yr","fromFirestore","convertValue","vr","gr","_docs","docs","_r","br","Er","Ir","Rr","Tr","_apply","_field","_op","_value","_create","_parse","Br","jr","Ur","Ar","_queryConstraints","_getOperator","_getQueryConstraints","Pr","zr","Vr","$r","_direction","Qr","Nr","Dr","_limit","_limitType","Fr","xr","Sr","_docOrFields","_inclusive","Lr","qr","Or","kr","Cr","Mr","Wr","toFirestore","Gr","convertTimestamp","convertServerTimestamp","convertBytes","convertReference","convertGeoPoint","convertArray","convertObject","convertDocumentKey","Kr","Yr","reverse","Hr","Jr","Xr","Zr","ts","es","ss","ns","rs","is","os","us","cs","as","hs","ls","fs","_commitHandler","_mutations","_committed","_dataReader","_verifyNotCommitted","ds","commit","ws","ms","datastore","readVersions","mutations","committed","lastWriteError","writtenDocs","Set","lookup","ensureCommitNotCalled","recordVersion","write","preconditionForUpdate","ps","maxAttempts","ys","asyncQueue","updateFunction","deferred","run","enqueueAndForget","gs","_s","targetTimeMs","removalCallback","createAndSchedule","timerHandle","setTimeout","handleDelayElapsed","clearTimeout","vs","visibilityState","addEventListener","isShuttingDown","enqueue","enqueueAndForgetEvenWhileRestricted","enterRestrictedMode","removeEventListener","shift","stack","includes","verifyOperationInProgress","splice","bs","_transaction","Es","getProvider","apply","setMultipleInstances"],"sources":["/Users/deepakrajmohanraj/Desktop/UB/portfolio-website/node_modules/@firebase/firestore/dist/lite/index.browser.esm2017.js"],"sourcesContent":["import { _getProvider, getApp as t, _removeServiceInstance as e, _registerComponent as n, registerVersion as r, SDK_VERSION as s } from \"@firebase/app\";\n\nimport { Component as i } from \"@firebase/component\";\n\nimport { Logger as o, LogLevel as u } from \"@firebase/logger\";\n\nimport { FirebaseError as c, getDefaultEmulatorHostnameAndPort as a, createMockUserToken as h, getModularInstance as l, deepEqual as f } from \"@firebase/util\";\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Simple wrapper around a nullable UID. Mostly exists to make code more\n * readable.\n */\nclass d {\n    constructor(t) {\n        this.uid = t;\n    }\n    isAuthenticated() {\n        return null != this.uid;\n    }\n    /**\n     * Returns a key representing this user, suitable for inclusion in a\n     * dictionary.\n     */    toKey() {\n        return this.isAuthenticated() ? \"uid:\" + this.uid : \"anonymous-user\";\n    }\n    isEqual(t) {\n        return t.uid === this.uid;\n    }\n}\n\n/** A user with a null UID. */ d.UNAUTHENTICATED = new d(null), \n// TODO(mikelehen): Look into getting a proper uid-equivalent for\n// non-FirebaseAuth providers.\nd.GOOGLE_CREDENTIALS = new d(\"google-credentials-uid\"), d.FIRST_PARTY = new d(\"first-party-uid\"), \nd.MOCK_USER = new d(\"mock-user\");\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet w = \"9.23.0\";\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst m = new o(\"@firebase/firestore\");\n\n/**\n * Sets the verbosity of Cloud Firestore logs (debug, error, or silent).\n *\n * @param logLevel - The verbosity you set for activity and error logging. Can\n *   be any of the following values:\n *\n *   <ul>\n *     <li>`debug` for the most verbose logging level, primarily for\n *     debugging.</li>\n *     <li>`error` to log errors only.</li>\n *     <li><code>`silent` to turn off logging.</li>\n *   </ul>\n */ function p(t) {\n    m.setLogLevel(t);\n}\n\nfunction y(t, ...e) {\n    if (m.logLevel <= u.DEBUG) {\n        const n = e.map(v);\n        m.debug(`Firestore (${w}): ${t}`, ...n);\n    }\n}\n\nfunction g(t, ...e) {\n    if (m.logLevel <= u.ERROR) {\n        const n = e.map(v);\n        m.error(`Firestore (${w}): ${t}`, ...n);\n    }\n}\n\n/**\n * @internal\n */ function _(t, ...e) {\n    if (m.logLevel <= u.WARN) {\n        const n = e.map(v);\n        m.warn(`Firestore (${w}): ${t}`, ...n);\n    }\n}\n\n/**\n * Converts an additional log parameter to a string representation.\n */ function v(t) {\n    if (\"string\" == typeof t) return t;\n    try {\n        return e = t, JSON.stringify(e);\n    } catch (e) {\n        // Converting to JSON failed, just log the object directly\n        return t;\n    }\n    /**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n    /** Formats an object as a JSON string, suitable for logging. */\n    var e;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Unconditionally fails, throwing an Error with the given message.\n * Messages are stripped in production builds.\n *\n * Returns `never` and can be used in expressions:\n * @example\n * let futureVar = fail('not implemented yet');\n */ function b(t = \"Unexpected state\") {\n    // Log the failure in addition to throw an exception, just in case the\n    // exception is swallowed.\n    const e = `FIRESTORE (${w}) INTERNAL ASSERTION FAILED: ` + t;\n    // NOTE: We don't use FirestoreError here because these are internal failures\n    // that cannot be handled by the user. (Also it would create a circular\n    // dependency between the error and assert modules which doesn't work.)\n    throw g(e), new Error(e);\n}\n\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n *\n * Messages are stripped in production builds.\n */ function E(t, e) {\n    t || b();\n}\n\n/**\n * Casts `obj` to `T`. In non-production builds, verifies that `obj` is an\n * instance of `T` before casting.\n */ function I(t, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ne) {\n    return t;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const T = \"ok\", A = \"cancelled\", R = \"unknown\", P = \"invalid-argument\", V = \"deadline-exceeded\", $ = \"not-found\", N = \"already-exists\", D = \"permission-denied\", F = \"unauthenticated\", x = \"resource-exhausted\", S = \"failed-precondition\", q = \"aborted\", O = \"out-of-range\", k = \"unimplemented\", C = \"internal\", M = \"unavailable\", L = \"data-loss\";\n\n/** An error returned by a Firestore operation. */ class U extends c {\n    /** @hideconstructor */\n    constructor(\n    /**\n     * The backend error code associated with this error.\n     */\n    t, \n    /**\n     * A custom error description.\n     */\n    e) {\n        super(t, e), this.code = t, this.message = e, \n        // HACK: We write a toString property directly because Error is not a real\n        // class and so inheritance does not work correctly. We could alternatively\n        // do the same \"back-door inheritance\" trick that FirebaseError does.\n        this.toString = () => `${this.name}: [code=${this.code}]: ${this.message}`;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ class j {\n    constructor() {\n        this.promise = new Promise(((t, e) => {\n            this.resolve = t, this.reject = e;\n        }));\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ class B {\n    constructor(t, e) {\n        this.user = e, this.type = \"OAuth\", this.headers = new Map, this.headers.set(\"Authorization\", `Bearer ${t}`);\n    }\n}\n\n/**\n * A CredentialsProvider that always yields an empty token.\n * @internal\n */ class Q {\n    getToken() {\n        return Promise.resolve(null);\n    }\n    invalidateToken() {}\n    start(t, e) {\n        // Fire with initial user.\n        t.enqueueRetryable((() => e(d.UNAUTHENTICATED)));\n    }\n    shutdown() {}\n}\n\n/**\n * A CredentialsProvider that always returns a constant token. Used for\n * emulator token mocking.\n */ class z {\n    constructor(t) {\n        this.token = t, \n        /**\n         * Stores the listener registered with setChangeListener()\n         * This isn't actually necessary since the UID never changes, but we use this\n         * to verify the listen contract is adhered to in tests.\n         */\n        this.changeListener = null;\n    }\n    getToken() {\n        return Promise.resolve(this.token);\n    }\n    invalidateToken() {}\n    start(t, e) {\n        this.changeListener = e, \n        // Fire with initial user.\n        t.enqueueRetryable((() => e(this.token.user)));\n    }\n    shutdown() {\n        this.changeListener = null;\n    }\n}\n\n/** Credential provider for the Lite SDK. */ class W {\n    constructor(t) {\n        this.auth = null, t.onInit((t => {\n            this.auth = t;\n        }));\n    }\n    getToken() {\n        return this.auth ? this.auth.getToken().then((t => t ? (E(\"string\" == typeof t.accessToken), \n        new B(t.accessToken, new d(this.auth.getUid()))) : null)) : Promise.resolve(null);\n    }\n    invalidateToken() {}\n    start(t, e) {}\n    shutdown() {}\n}\n\n/*\n * FirstPartyToken provides a fresh token each time its value\n * is requested, because if the token is too old, requests will be rejected.\n * Technically this may no longer be necessary since the SDK should gracefully\n * recover from unauthenticated errors (see b/33147818 for context), but it's\n * safer to keep the implementation as-is.\n */ class G {\n    constructor(t, e, n) {\n        this.t = t, this.i = e, this.o = n, this.type = \"FirstParty\", this.user = d.FIRST_PARTY, \n        this.u = new Map;\n    }\n    /**\n     * Gets an authorization token, using a provided factory function, or return\n     * null.\n     */    h() {\n        return this.o ? this.o() : null;\n    }\n    get headers() {\n        this.u.set(\"X-Goog-AuthUser\", this.t);\n        // Use array notation to prevent minification\n        const t = this.h();\n        return t && this.u.set(\"Authorization\", t), this.i && this.u.set(\"X-Goog-Iam-Authorization-Token\", this.i), \n        this.u;\n    }\n}\n\n/*\n * Provides user credentials required for the Firestore JavaScript SDK\n * to authenticate the user, using technique that is only available\n * to applications hosted by Google.\n */ class K {\n    constructor(t, e, n) {\n        this.t = t, this.i = e, this.o = n;\n    }\n    getToken() {\n        return Promise.resolve(new G(this.t, this.i, this.o));\n    }\n    start(t, e) {\n        // Fire with initial uid.\n        t.enqueueRetryable((() => e(d.FIRST_PARTY)));\n    }\n    shutdown() {}\n    invalidateToken() {}\n}\n\nclass Y {\n    constructor(t) {\n        this.value = t, this.type = \"AppCheck\", this.headers = new Map, t && t.length > 0 && this.headers.set(\"x-firebase-appcheck\", this.value);\n    }\n}\n\n/** AppCheck token provider for the Lite SDK. */ class H {\n    constructor(t) {\n        this.l = t, this.appCheck = null, t.onInit((t => {\n            this.appCheck = t;\n        }));\n    }\n    getToken() {\n        return this.appCheck ? this.appCheck.getToken().then((t => t ? (E(\"string\" == typeof t.token), \n        new Y(t.token)) : null)) : Promise.resolve(null);\n    }\n    invalidateToken() {}\n    start(t, e) {}\n    shutdown() {}\n}\n\n/**\n * Builds a CredentialsProvider depending on the type of\n * the credentials passed in.\n */\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass J {\n    /**\n     * Constructs a DatabaseInfo using the provided host, databaseId and\n     * persistenceKey.\n     *\n     * @param databaseId - The database to use.\n     * @param appId - The Firebase App Id.\n     * @param persistenceKey - A unique identifier for this Firestore's local\n     * storage (used in conjunction with the databaseId).\n     * @param host - The Firestore backend host to connect to.\n     * @param ssl - Whether to use SSL when connecting.\n     * @param forceLongPolling - Whether to use the forceLongPolling option\n     * when using WebChannel as the network transport.\n     * @param autoDetectLongPolling - Whether to use the detectBufferingProxy\n     * option when using WebChannel as the network transport.\n     * @param longPollingOptions Options that configure long-polling.\n     * @param useFetchStreams Whether to use the Fetch API instead of\n     * XMLHTTPRequest\n     */\n    constructor(t, e, n, r, s, i, o, u, c) {\n        this.databaseId = t, this.appId = e, this.persistenceKey = n, this.host = r, this.ssl = s, \n        this.forceLongPolling = i, this.autoDetectLongPolling = o, this.longPollingOptions = u, \n        this.useFetchStreams = c;\n    }\n}\n\n/** The default database name for a project. */\n/**\n * Represents the database ID a Firestore client is associated with.\n * @internal\n */\nclass X {\n    constructor(t, e) {\n        this.projectId = t, this.database = e || \"(default)\";\n    }\n    static empty() {\n        return new X(\"\", \"\");\n    }\n    get isDefaultDatabase() {\n        return \"(default)\" === this.database;\n    }\n    isEqual(t) {\n        return t instanceof X && t.projectId === this.projectId && t.database === this.database;\n    }\n}\n\n/**\n * Path represents an ordered sequence of string segments.\n */\nclass Z {\n    constructor(t, e, n) {\n        void 0 === e ? e = 0 : e > t.length && b(), void 0 === n ? n = t.length - e : n > t.length - e && b(), \n        this.segments = t, this.offset = e, this.len = n;\n    }\n    get length() {\n        return this.len;\n    }\n    isEqual(t) {\n        return 0 === Z.comparator(this, t);\n    }\n    child(t) {\n        const e = this.segments.slice(this.offset, this.limit());\n        return t instanceof Z ? t.forEach((t => {\n            e.push(t);\n        })) : e.push(t), this.construct(e);\n    }\n    /** The index of one past the last segment of the path. */    limit() {\n        return this.offset + this.length;\n    }\n    popFirst(t) {\n        return t = void 0 === t ? 1 : t, this.construct(this.segments, this.offset + t, this.length - t);\n    }\n    popLast() {\n        return this.construct(this.segments, this.offset, this.length - 1);\n    }\n    firstSegment() {\n        return this.segments[this.offset];\n    }\n    lastSegment() {\n        return this.get(this.length - 1);\n    }\n    get(t) {\n        return this.segments[this.offset + t];\n    }\n    isEmpty() {\n        return 0 === this.length;\n    }\n    isPrefixOf(t) {\n        if (t.length < this.length) return !1;\n        for (let e = 0; e < this.length; e++) if (this.get(e) !== t.get(e)) return !1;\n        return !0;\n    }\n    isImmediateParentOf(t) {\n        if (this.length + 1 !== t.length) return !1;\n        for (let e = 0; e < this.length; e++) if (this.get(e) !== t.get(e)) return !1;\n        return !0;\n    }\n    forEach(t) {\n        for (let e = this.offset, n = this.limit(); e < n; e++) t(this.segments[e]);\n    }\n    toArray() {\n        return this.segments.slice(this.offset, this.limit());\n    }\n    static comparator(t, e) {\n        const n = Math.min(t.length, e.length);\n        for (let r = 0; r < n; r++) {\n            const n = t.get(r), s = e.get(r);\n            if (n < s) return -1;\n            if (n > s) return 1;\n        }\n        return t.length < e.length ? -1 : t.length > e.length ? 1 : 0;\n    }\n}\n\n/**\n * A slash-separated path for navigating resources (documents and collections)\n * within Firestore.\n *\n * @internal\n */ class tt extends Z {\n    construct(t, e, n) {\n        return new tt(t, e, n);\n    }\n    canonicalString() {\n        // NOTE: The client is ignorant of any path segments containing escape\n        // sequences (e.g. __id123__) and just passes them through raw (they exist\n        // for legacy reasons and should not be used frequently).\n        return this.toArray().join(\"/\");\n    }\n    toString() {\n        return this.canonicalString();\n    }\n    /**\n     * Creates a resource path from the given slash-delimited string. If multiple\n     * arguments are provided, all components are combined. Leading and trailing\n     * slashes from all components are ignored.\n     */    static fromString(...t) {\n        // NOTE: The client is ignorant of any path segments containing escape\n        // sequences (e.g. __id123__) and just passes them through raw (they exist\n        // for legacy reasons and should not be used frequently).\n        const e = [];\n        for (const n of t) {\n            if (n.indexOf(\"//\") >= 0) throw new U(P, `Invalid segment (${n}). Paths must not contain // in them.`);\n            // Strip leading and traling slashed.\n                        e.push(...n.split(\"/\").filter((t => t.length > 0)));\n        }\n        return new tt(e);\n    }\n    static emptyPath() {\n        return new tt([]);\n    }\n}\n\nconst et = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n\n/**\n * A dot-separated path for navigating sub-objects within a document.\n * @internal\n */ class nt extends Z {\n    construct(t, e, n) {\n        return new nt(t, e, n);\n    }\n    /**\n     * Returns true if the string could be used as a segment in a field path\n     * without escaping.\n     */    static isValidIdentifier(t) {\n        return et.test(t);\n    }\n    canonicalString() {\n        return this.toArray().map((t => (t = t.replace(/\\\\/g, \"\\\\\\\\\").replace(/`/g, \"\\\\`\"), \n        nt.isValidIdentifier(t) || (t = \"`\" + t + \"`\"), t))).join(\".\");\n    }\n    toString() {\n        return this.canonicalString();\n    }\n    /**\n     * Returns true if this field references the key of a document.\n     */    isKeyField() {\n        return 1 === this.length && \"__name__\" === this.get(0);\n    }\n    /**\n     * The field designating the key of a document.\n     */    static keyField() {\n        return new nt([ \"__name__\" ]);\n    }\n    /**\n     * Parses a field string from the given server-formatted string.\n     *\n     * - Splitting the empty string is not allowed (for now at least).\n     * - Empty segments within the string (e.g. if there are two consecutive\n     *   separators) are not allowed.\n     *\n     * TODO(b/37244157): we should make this more strict. Right now, it allows\n     * non-identifier path components, even if they aren't escaped.\n     */    static fromServerFormat(t) {\n        const e = [];\n        let n = \"\", r = 0;\n        const s = () => {\n            if (0 === n.length) throw new U(P, `Invalid field path (${t}). Paths must not be empty, begin with '.', end with '.', or contain '..'`);\n            e.push(n), n = \"\";\n        };\n        let i = !1;\n        for (;r < t.length; ) {\n            const e = t[r];\n            if (\"\\\\\" === e) {\n                if (r + 1 === t.length) throw new U(P, \"Path has trailing escape character: \" + t);\n                const e = t[r + 1];\n                if (\"\\\\\" !== e && \".\" !== e && \"`\" !== e) throw new U(P, \"Path has invalid escape sequence: \" + t);\n                n += e, r += 2;\n            } else \"`\" === e ? (i = !i, r++) : \".\" !== e || i ? (n += e, r++) : (s(), r++);\n        }\n        if (s(), i) throw new U(P, \"Unterminated ` in path: \" + t);\n        return new nt(e);\n    }\n    static emptyPath() {\n        return new nt([]);\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @internal\n */ class rt {\n    constructor(t) {\n        this.path = t;\n    }\n    static fromPath(t) {\n        return new rt(tt.fromString(t));\n    }\n    static fromName(t) {\n        return new rt(tt.fromString(t).popFirst(5));\n    }\n    static empty() {\n        return new rt(tt.emptyPath());\n    }\n    get collectionGroup() {\n        return this.path.popLast().lastSegment();\n    }\n    /** Returns true if the document is in the specified collectionId. */    hasCollectionId(t) {\n        return this.path.length >= 2 && this.path.get(this.path.length - 2) === t;\n    }\n    /** Returns the collection group (i.e. the name of the parent collection) for this key. */    getCollectionGroup() {\n        return this.path.get(this.path.length - 2);\n    }\n    /** Returns the fully qualified path to the parent collection. */    getCollectionPath() {\n        return this.path.popLast();\n    }\n    isEqual(t) {\n        return null !== t && 0 === tt.comparator(this.path, t.path);\n    }\n    toString() {\n        return this.path.toString();\n    }\n    static comparator(t, e) {\n        return tt.comparator(t.path, e.path);\n    }\n    static isDocumentKey(t) {\n        return t.length % 2 == 0;\n    }\n    /**\n     * Creates and returns a new document key with the given segments.\n     *\n     * @param segments - The segments of the path to the document\n     * @returns A new instance of DocumentKey\n     */    static fromSegments(t) {\n        return new rt(new tt(t.slice()));\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ function st(t, e, n) {\n    if (!n) throw new U(P, `Function ${t}() cannot be called with an empty ${e}.`);\n}\n\n/**\n * Validates that two boolean options are not set at the same time.\n * @internal\n */\n/**\n * Validates that `path` refers to a document (indicated by the fact it contains\n * an even numbers of segments).\n */\nfunction it(t) {\n    if (!rt.isDocumentKey(t)) throw new U(P, `Invalid document reference. Document references must have an even number of segments, but ${t} has ${t.length}.`);\n}\n\n/**\n * Validates that `path` refers to a collection (indicated by the fact it\n * contains an odd numbers of segments).\n */ function ot(t) {\n    if (rt.isDocumentKey(t)) throw new U(P, `Invalid collection reference. Collection references must have an odd number of segments, but ${t} has ${t.length}.`);\n}\n\n/**\n * Returns true if it's a non-null object without a custom prototype\n * (i.e. excludes Array, Date, etc.).\n */\n/** Returns a string describing the type / value of the provided input. */\nfunction ut(t) {\n    if (void 0 === t) return \"undefined\";\n    if (null === t) return \"null\";\n    if (\"string\" == typeof t) return t.length > 20 && (t = `${t.substring(0, 20)}...`), \n    JSON.stringify(t);\n    if (\"number\" == typeof t || \"boolean\" == typeof t) return \"\" + t;\n    if (\"object\" == typeof t) {\n        if (t instanceof Array) return \"an array\";\n        {\n            const e = \n            /** try to get the constructor name for an object. */\n            function(t) {\n                if (t.constructor) return t.constructor.name;\n                return null;\n            }\n            /**\n * Casts `obj` to `T`, optionally unwrapping Compat types to expose the\n * underlying instance. Throws if  `obj` is not an instance of `T`.\n *\n * This cast is used in the Lite and Full SDK to verify instance types for\n * arguments passed to the public API.\n * @internal\n */ (t);\n            return e ? `a custom ${e} object` : \"an object\";\n        }\n    }\n    return \"function\" == typeof t ? \"a function\" : b();\n}\n\nfunction ct(t, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ne) {\n    if (\"_delegate\" in t && (\n    // Unwrap Compat types\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    t = t._delegate), !(t instanceof e)) {\n        if (e.name === t.constructor.name) throw new U(P, \"Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?\");\n        {\n            const n = ut(t);\n            throw new U(P, `Expected type '${e.name}', but it was: ${n}`);\n        }\n    }\n    return t;\n}\n\nfunction at(t, e) {\n    if (e <= 0) throw new U(P, `Function ${t}() requires a positive number, but it was: ${e}.`);\n}\n\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Compares two `ExperimentalLongPollingOptions` objects for equality.\n */\n/**\n * Creates and returns a new `ExperimentalLongPollingOptions` with the same\n * option values as the given instance.\n */\nfunction ht(t) {\n    const e = {};\n    return void 0 !== t.timeoutSeconds && (e.timeoutSeconds = t.timeoutSeconds), e;\n}\n\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * The value returned from the most recent invocation of\n * `generateUniqueDebugId()`, or null if it has never been invoked.\n */ let lt = null;\n\n/**\n * Generates and returns an initial value for `lastUniqueDebugId`.\n *\n * The returned value is randomly selected from a range of integers that are\n * represented as 8 hexadecimal digits. This means that (within reason) any\n * numbers generated by incrementing the returned number by 1 will also be\n * represented by 8 hexadecimal digits. This leads to all \"IDs\" having the same\n * length when converted to a hexadecimal string, making reading logs containing\n * these IDs easier to follow. And since the return value is randomly selected\n * it will help to differentiate between logs from different executions.\n */\n/**\n * Generates and returns a unique ID as a hexadecimal string.\n *\n * The returned ID is intended to be used in debug logging messages to help\n * correlate log messages that may be spatially separated in the logs, but\n * logically related. For example, a network connection could include the same\n * \"debug ID\" string in all of its log messages to help trace a specific\n * connection over time.\n *\n * @return the 10-character generated ID (e.g. \"0xa1b2c3d4\").\n */\nfunction ft() {\n    return null === lt ? lt = 268435456 + Math.round(2147483648 * Math.random()) : lt++, \n    \"0x\" + lt.toString(16);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns whether a variable is either undefined or null.\n */ function dt(t) {\n    return null == t;\n}\n\n/** Returns whether the value represents -0. */ function wt(t) {\n    // Detect if the value is -0.0. Based on polyfill from\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n    return 0 === t && 1 / t == -1 / 0;\n}\n\n/**\n * Returns whether a value is an integer and in the safe integer range\n * @param value - The value to test for being an integer and in the safe range\n */\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst mt = {\n    BatchGetDocuments: \"batchGet\",\n    Commit: \"commit\",\n    RunQuery: \"runQuery\",\n    RunAggregationQuery: \"runAggregationQuery\"\n};\n\n/**\n * Maps RPC names to the corresponding REST endpoint name.\n *\n * We use array notation to avoid mangling.\n */\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Error Codes describing the different ways GRPC can fail. These are copied\n * directly from GRPC's sources here:\n *\n * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n *\n * Important! The names of these identifiers matter because the string forms\n * are used for reverse lookups from the webchannel stream. Do NOT change the\n * names of these identifiers or change this into a const enum.\n */\nvar pt, yt;\n\n/**\n * Converts an HTTP Status Code to the equivalent error code.\n *\n * @param status - An HTTP Status Code, like 200, 404, 503, etc.\n * @returns The equivalent Code. Unknown status codes are mapped to\n *     Code.UNKNOWN.\n */\nfunction gt(t) {\n    if (void 0 === t) return g(\"RPC_ERROR\", \"HTTP error has no status\"), R;\n    // The canonical error codes for Google APIs [1] specify mapping onto HTTP\n    // status codes but the mapping is not bijective. In each case of ambiguity\n    // this function chooses a primary error.\n    \n    // [1]\n    // https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n        switch (t) {\n      case 200:\n        // OK\n        return T;\n\n      case 400:\n        // Bad Request\n        return S;\n\n        // Other possibilities based on the forward mapping\n        // return Code.INVALID_ARGUMENT;\n        // return Code.OUT_OF_RANGE;\n              case 401:\n        // Unauthorized\n        return F;\n\n      case 403:\n        // Forbidden\n        return D;\n\n      case 404:\n        // Not Found\n        return $;\n\n      case 409:\n        // Conflict\n        return q;\n\n        // Other possibilities:\n        // return Code.ALREADY_EXISTS;\n              case 416:\n        // Range Not Satisfiable\n        return O;\n\n      case 429:\n        // Too Many Requests\n        return x;\n\n      case 499:\n        // Client Closed Request\n        return A;\n\n      case 500:\n        // Internal Server Error\n        return R;\n\n        // Other possibilities:\n        // return Code.INTERNAL;\n        // return Code.DATA_LOSS;\n              case 501:\n        // Unimplemented\n        return k;\n\n      case 503:\n        // Service Unavailable\n        return M;\n\n      case 504:\n        // Gateway Timeout\n        return V;\n\n      default:\n        return t >= 200 && t < 300 ? T : t >= 400 && t < 500 ? S : t >= 500 && t < 600 ? C : R;\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A Rest-based connection that relies on the native HTTP stack\n * (e.g. `fetch` or a polyfill).\n */ (yt = pt || (pt = {}))[yt.OK = 0] = \"OK\", yt[yt.CANCELLED = 1] = \"CANCELLED\", \nyt[yt.UNKNOWN = 2] = \"UNKNOWN\", yt[yt.INVALID_ARGUMENT = 3] = \"INVALID_ARGUMENT\", \nyt[yt.DEADLINE_EXCEEDED = 4] = \"DEADLINE_EXCEEDED\", yt[yt.NOT_FOUND = 5] = \"NOT_FOUND\", \nyt[yt.ALREADY_EXISTS = 6] = \"ALREADY_EXISTS\", yt[yt.PERMISSION_DENIED = 7] = \"PERMISSION_DENIED\", \nyt[yt.UNAUTHENTICATED = 16] = \"UNAUTHENTICATED\", yt[yt.RESOURCE_EXHAUSTED = 8] = \"RESOURCE_EXHAUSTED\", \nyt[yt.FAILED_PRECONDITION = 9] = \"FAILED_PRECONDITION\", yt[yt.ABORTED = 10] = \"ABORTED\", \nyt[yt.OUT_OF_RANGE = 11] = \"OUT_OF_RANGE\", yt[yt.UNIMPLEMENTED = 12] = \"UNIMPLEMENTED\", \nyt[yt.INTERNAL = 13] = \"INTERNAL\", yt[yt.UNAVAILABLE = 14] = \"UNAVAILABLE\", yt[yt.DATA_LOSS = 15] = \"DATA_LOSS\";\n\nclass _t extends \n/**\n * Base class for all Rest-based connections to the backend (WebChannel and\n * HTTP).\n */\nclass {\n    constructor(t) {\n        this.databaseInfo = t, this.databaseId = t.databaseId;\n        const e = t.ssl ? \"https\" : \"http\";\n        this.m = e + \"://\" + t.host, this.p = \"projects/\" + this.databaseId.projectId + \"/databases/\" + this.databaseId.database + \"/documents\";\n    }\n    get g() {\n        // Both `invokeRPC()` and `invokeStreamingRPC()` use their `path` arguments to determine\n        // where to run the query, and expect the `request` to NOT specify the \"path\".\n        return !1;\n    }\n    v(t, e, n, r, s) {\n        const i = ft(), o = this.I(t, e);\n        y(\"RestConnection\", `Sending RPC '${t}' ${i}:`, o, n);\n        const u = {};\n        return this.T(u, r, s), this.A(t, o, u, n).then((e => (y(\"RestConnection\", `Received RPC '${t}' ${i}: `, e), \n        e)), (e => {\n            throw _(\"RestConnection\", `RPC '${t}' ${i} failed with error: `, e, \"url: \", o, \"request:\", n), \n            e;\n        }));\n    }\n    R(t, e, n, r, s, i) {\n        // The REST API automatically aggregates all of the streamed results, so we\n        // can just use the normal invoke() method.\n        return this.v(t, e, n, r, s);\n    }\n    /**\n     * Modifies the headers for a request, adding any authorization token if\n     * present and any additional headers for the request.\n     */    T(t, e, n) {\n        t[\"X-Goog-Api-Client\"] = \"gl-js/ fire/\" + w, \n        // Content-Type: text/plain will avoid preflight requests which might\n        // mess with CORS and redirects by proxies. If we add custom headers\n        // we will need to change this code to potentially use the $httpOverwrite\n        // parameter supported by ESF to avoid triggering preflight requests.\n        t[\"Content-Type\"] = \"text/plain\", this.databaseInfo.appId && (t[\"X-Firebase-GMPID\"] = this.databaseInfo.appId), \n        e && e.headers.forEach(((e, n) => t[n] = e)), n && n.headers.forEach(((e, n) => t[n] = e));\n    }\n    I(t, e) {\n        const n = mt[t];\n        return `${this.m}/v1/${e}:${n}`;\n    }\n} {\n    /**\n     * @param databaseInfo - The connection info.\n     * @param fetchImpl - `fetch` or a Polyfill that implements the fetch API.\n     */\n    constructor(t, e) {\n        super(t), this.P = e;\n    }\n    V(t, e) {\n        throw new Error(\"Not supported by FetchConnection\");\n    }\n    async A(t, e, n, r) {\n        var s;\n        const i = JSON.stringify(r);\n        let o;\n        try {\n            o = await this.P(e, {\n                method: \"POST\",\n                headers: n,\n                body: i\n            });\n        } catch (t) {\n            const e = t;\n            throw new U(gt(e.status), \"Request failed with error: \" + e.statusText);\n        }\n        if (!o.ok) {\n            let t = await o.json();\n            Array.isArray(t) && (t = t[0]);\n            const e = null === (s = null == t ? void 0 : t.error) || void 0 === s ? void 0 : s.message;\n            throw new U(gt(o.status), `Request failed with error: ${null != e ? e : o.statusText}`);\n        }\n        return o.json();\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Initializes the HTTP connection for the REST API. */\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Concrete implementation of the Aggregate type.\n */\nclass vt {\n    constructor(t, e, n) {\n        this.alias = t, this.$ = e, this.fieldPath = n;\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Generates `nBytes` of random bytes.\n *\n * If `nBytes < 0` , an error will be thrown.\n */ function bt(t) {\n    // Polyfills for IE and WebWorker by using `self` and `msCrypto` when `crypto` is not available.\n    const e = \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    \"undefined\" != typeof self && (self.crypto || self.msCrypto), n = new Uint8Array(t);\n    if (e && \"function\" == typeof e.getRandomValues) e.getRandomValues(n); else \n    // Falls back to Math.random\n    for (let e = 0; e < t; e++) n[e] = Math.floor(256 * Math.random());\n    return n;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ class Et {\n    static N() {\n        // Alphanumeric characters\n        const t = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\", e = Math.floor(256 / t.length) * t.length;\n        // The largest byte value that is a multiple of `char.length`.\n                let n = \"\";\n        for (;n.length < 20; ) {\n            const r = bt(40);\n            for (let s = 0; s < r.length; ++s) \n            // Only accept values that are [0, maxMultiple), this ensures they can\n            // be evenly mapped to indices of `chars` via a modulo operation.\n            n.length < 20 && r[s] < e && (n += t.charAt(r[s] % t.length));\n        }\n        return n;\n    }\n}\n\nfunction It(t, e) {\n    return t < e ? -1 : t > e ? 1 : 0;\n}\n\n/** Helper to compare arrays using isEqual(). */ function Tt(t, e, n) {\n    return t.length === e.length && t.every(((t, r) => n(t, e[r])));\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ function At(t) {\n    let e = 0;\n    for (const n in t) Object.prototype.hasOwnProperty.call(t, n) && e++;\n    return e;\n}\n\nfunction Rt(t, e) {\n    for (const n in t) Object.prototype.hasOwnProperty.call(t, n) && e(n, t[n]);\n}\n\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An error encountered while decoding base64 string.\n */\nclass Pt extends Error {\n    constructor() {\n        super(...arguments), this.name = \"Base64DecodeError\";\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Converts a Base64 encoded string to a binary string. */\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Immutable class that represents a \"proto\" byte string.\n *\n * Proto byte strings can either be Base64-encoded strings or Uint8Arrays when\n * sent on the wire. This class abstracts away this differentiation by holding\n * the proto byte string in a common class that must be converted into a string\n * before being sent as a proto.\n * @internal\n */\nclass Vt {\n    constructor(t) {\n        this.binaryString = t;\n    }\n    static fromBase64String(t) {\n        const e = function(t) {\n            try {\n                return atob(t);\n            } catch (t) {\n                // Check that `DOMException` is defined before using it to avoid\n                // \"ReferenceError: Property 'DOMException' doesn't exist\" in react-native.\n                // (https://github.com/firebase/firebase-js-sdk/issues/7115)\n                throw \"undefined\" != typeof DOMException && t instanceof DOMException ? new Pt(\"Invalid base64 string: \" + t) : t;\n            }\n        }\n        /** Converts a binary string to a Base64 encoded string. */ (t);\n        return new Vt(e);\n    }\n    static fromUint8Array(t) {\n        // TODO(indexing); Remove the copy of the byte string here as this method\n        // is frequently called during indexing.\n        const e = \n        /**\n * Helper function to convert an Uint8array to a binary string.\n */\n        function(t) {\n            let e = \"\";\n            for (let n = 0; n < t.length; ++n) e += String.fromCharCode(t[n]);\n            return e;\n        }\n        /**\n * Helper function to convert a binary string to an Uint8Array.\n */ (t);\n        return new Vt(e);\n    }\n    [Symbol.iterator]() {\n        let t = 0;\n        return {\n            next: () => t < this.binaryString.length ? {\n                value: this.binaryString.charCodeAt(t++),\n                done: !1\n            } : {\n                value: void 0,\n                done: !0\n            }\n        };\n    }\n    toBase64() {\n        return t = this.binaryString, btoa(t);\n        var t;\n    }\n    toUint8Array() {\n        return function(t) {\n            const e = new Uint8Array(t.length);\n            for (let n = 0; n < t.length; n++) e[n] = t.charCodeAt(n);\n            return e;\n        }\n        /**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n        // A RegExp matching ISO 8601 UTC timestamps with optional fraction.\n        (this.binaryString);\n    }\n    approximateByteSize() {\n        return 2 * this.binaryString.length;\n    }\n    compareTo(t) {\n        return It(this.binaryString, t.binaryString);\n    }\n    isEqual(t) {\n        return this.binaryString === t.binaryString;\n    }\n}\n\nVt.EMPTY_BYTE_STRING = new Vt(\"\");\n\nconst $t = new RegExp(/^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(?:\\.(\\d+))?Z$/);\n\n/**\n * Converts the possible Proto values for a timestamp value into a \"seconds and\n * nanos\" representation.\n */ function Nt(t) {\n    // The json interface (for the browser) will return an iso timestamp string,\n    // while the proto js library (for node) will return a\n    // google.protobuf.Timestamp instance.\n    if (E(!!t), \"string\" == typeof t) {\n        // The date string can have higher precision (nanos) than the Date class\n        // (millis), so we do some custom parsing here.\n        // Parse the nanos right out of the string.\n        let e = 0;\n        const n = $t.exec(t);\n        if (E(!!n), n[1]) {\n            // Pad the fraction out to 9 digits (nanos).\n            let t = n[1];\n            t = (t + \"000000000\").substr(0, 9), e = Number(t);\n        }\n        // Parse the date to get the seconds.\n                const r = new Date(t);\n        return {\n            seconds: Math.floor(r.getTime() / 1e3),\n            nanos: e\n        };\n    }\n    return {\n        seconds: Dt(t.seconds),\n        nanos: Dt(t.nanos)\n    };\n}\n\n/**\n * Converts the possible Proto types for numbers into a JavaScript number.\n * Returns 0 if the value is not numeric.\n */ function Dt(t) {\n    // TODO(bjornick): Handle int64 greater than 53 bits.\n    return \"number\" == typeof t ? t : \"string\" == typeof t ? Number(t) : 0;\n}\n\n/** Converts the possible Proto types for Blobs into a ByteString. */ function Ft(t) {\n    return \"string\" == typeof t ? Vt.fromBase64String(t) : Vt.fromUint8Array(t);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// The earliest date supported by Firestore timestamps (0001-01-01T00:00:00Z).\n/**\n * A `Timestamp` represents a point in time independent of any time zone or\n * calendar, represented as seconds and fractions of seconds at nanosecond\n * resolution in UTC Epoch time.\n *\n * It is encoded using the Proleptic Gregorian Calendar which extends the\n * Gregorian calendar backwards to year one. It is encoded assuming all minutes\n * are 60 seconds long, i.e. leap seconds are \"smeared\" so that no leap second\n * table is needed for interpretation. Range is from 0001-01-01T00:00:00Z to\n * 9999-12-31T23:59:59.999999999Z.\n *\n * For examples and further specifications, refer to the\n * {@link https://github.com/google/protobuf/blob/master/src/google/protobuf/timestamp.proto | Timestamp definition}.\n */\nclass xt {\n    /**\n     * Creates a new timestamp.\n     *\n     * @param seconds - The number of seconds of UTC time since Unix epoch\n     *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n     *     9999-12-31T23:59:59Z inclusive.\n     * @param nanoseconds - The non-negative fractions of a second at nanosecond\n     *     resolution. Negative second values with fractions must still have\n     *     non-negative nanoseconds values that count forward in time. Must be\n     *     from 0 to 999,999,999 inclusive.\n     */\n    constructor(\n    /**\n     * The number of seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z.\n     */\n    t, \n    /**\n     * The fractions of a second at nanosecond resolution.*\n     */\n    e) {\n        if (this.seconds = t, this.nanoseconds = e, e < 0) throw new U(P, \"Timestamp nanoseconds out of range: \" + e);\n        if (e >= 1e9) throw new U(P, \"Timestamp nanoseconds out of range: \" + e);\n        if (t < -62135596800) throw new U(P, \"Timestamp seconds out of range: \" + t);\n        // This will break in the year 10,000.\n                if (t >= 253402300800) throw new U(P, \"Timestamp seconds out of range: \" + t);\n    }\n    /**\n     * Creates a new timestamp with the current date, with millisecond precision.\n     *\n     * @returns a new timestamp representing the current date.\n     */    static now() {\n        return xt.fromMillis(Date.now());\n    }\n    /**\n     * Creates a new timestamp from the given date.\n     *\n     * @param date - The date to initialize the `Timestamp` from.\n     * @returns A new `Timestamp` representing the same point in time as the given\n     *     date.\n     */    static fromDate(t) {\n        return xt.fromMillis(t.getTime());\n    }\n    /**\n     * Creates a new timestamp from the given number of milliseconds.\n     *\n     * @param milliseconds - Number of milliseconds since Unix epoch\n     *     1970-01-01T00:00:00Z.\n     * @returns A new `Timestamp` representing the same point in time as the given\n     *     number of milliseconds.\n     */    static fromMillis(t) {\n        const e = Math.floor(t / 1e3), n = Math.floor(1e6 * (t - 1e3 * e));\n        return new xt(e, n);\n    }\n    /**\n     * Converts a `Timestamp` to a JavaScript `Date` object. This conversion\n     * causes a loss of precision since `Date` objects only support millisecond\n     * precision.\n     *\n     * @returns JavaScript `Date` object representing the same point in time as\n     *     this `Timestamp`, with millisecond precision.\n     */    toDate() {\n        return new Date(this.toMillis());\n    }\n    /**\n     * Converts a `Timestamp` to a numeric timestamp (in milliseconds since\n     * epoch). This operation causes a loss of precision.\n     *\n     * @returns The point in time corresponding to this timestamp, represented as\n     *     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.\n     */    toMillis() {\n        return 1e3 * this.seconds + this.nanoseconds / 1e6;\n    }\n    _compareTo(t) {\n        return this.seconds === t.seconds ? It(this.nanoseconds, t.nanoseconds) : It(this.seconds, t.seconds);\n    }\n    /**\n     * Returns true if this `Timestamp` is equal to the provided one.\n     *\n     * @param other - The `Timestamp` to compare against.\n     * @returns true if this `Timestamp` is equal to the provided one.\n     */    isEqual(t) {\n        return t.seconds === this.seconds && t.nanoseconds === this.nanoseconds;\n    }\n    /** Returns a textual representation of this `Timestamp`. */    toString() {\n        return \"Timestamp(seconds=\" + this.seconds + \", nanoseconds=\" + this.nanoseconds + \")\";\n    }\n    /** Returns a JSON-serializable representation of this `Timestamp`. */    toJSON() {\n        return {\n            seconds: this.seconds,\n            nanoseconds: this.nanoseconds\n        };\n    }\n    /**\n     * Converts this object to a primitive string, which allows `Timestamp` objects\n     * to be compared using the `>`, `<=`, `>=` and `>` operators.\n     */    valueOf() {\n        // This method returns a string of the form <seconds>.<nanoseconds> where\n        // <seconds> is translated to have a non-negative value and both <seconds>\n        // and <nanoseconds> are left-padded with zeroes to be a consistent length.\n        // Strings with this format then have a lexiographical ordering that matches\n        // the expected ordering. The <seconds> translation is done to avoid having\n        // a leading negative sign (i.e. a leading '-' character) in its string\n        // representation, which would affect its lexiographical ordering.\n        const t = this.seconds - -62135596800;\n        // Note: Up to 12 decimal digits are required to represent all valid\n        // 'seconds' values.\n                return String(t).padStart(12, \"0\") + \".\" + String(this.nanoseconds).padStart(9, \"0\");\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents a locally-applied ServerTimestamp.\n *\n * Server Timestamps are backed by MapValues that contain an internal field\n * `__type__` with a value of `server_timestamp`. The previous value and local\n * write time are stored in its `__previous_value__` and `__local_write_time__`\n * fields respectively.\n *\n * Notes:\n * - ServerTimestampValue instances are created as the result of applying a\n *   transform. They can only exist in the local view of a document. Therefore\n *   they do not need to be parsed or serialized.\n * - When evaluated locally (e.g. for snapshot.data()), they by default\n *   evaluate to `null`. This behavior can be configured by passing custom\n *   FieldValueOptions to value().\n * - With respect to other ServerTimestampValues, they sort by their\n *   localWriteTime.\n */ function St(t) {\n    var e, n;\n    return \"server_timestamp\" === (null === (n = ((null === (e = null == t ? void 0 : t.mapValue) || void 0 === e ? void 0 : e.fields) || {}).__type__) || void 0 === n ? void 0 : n.stringValue);\n}\n\n/**\n * Returns the value of the field before this ServerTimestamp was set.\n *\n * Preserving the previous values allows the user to display the last resoled\n * value until the backend responds with the timestamp.\n */ function qt(t) {\n    const e = t.mapValue.fields.__previous_value__;\n    return St(e) ? qt(e) : e;\n}\n\n/**\n * Returns the local time at which this timestamp was first set.\n */ function Ot(t) {\n    const e = Nt(t.mapValue.fields.__local_write_time__.timestampValue);\n    return new xt(e.seconds, e.nanos);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const kt = {\n    fields: {\n        __type__: {\n            stringValue: \"__max__\"\n        }\n    }\n};\n\n/** Extracts the backend's type order for the provided value. */\nfunction Ct(t) {\n    return \"nullValue\" in t ? 0 /* TypeOrder.NullValue */ : \"booleanValue\" in t ? 1 /* TypeOrder.BooleanValue */ : \"integerValue\" in t || \"doubleValue\" in t ? 2 /* TypeOrder.NumberValue */ : \"timestampValue\" in t ? 3 /* TypeOrder.TimestampValue */ : \"stringValue\" in t ? 5 /* TypeOrder.StringValue */ : \"bytesValue\" in t ? 6 /* TypeOrder.BlobValue */ : \"referenceValue\" in t ? 7 /* TypeOrder.RefValue */ : \"geoPointValue\" in t ? 8 /* TypeOrder.GeoPointValue */ : \"arrayValue\" in t ? 9 /* TypeOrder.ArrayValue */ : \"mapValue\" in t ? St(t) ? 4 /* TypeOrder.ServerTimestampValue */ : \n    /** Returns true if the Value represents the canonical {@link #MAX_VALUE} . */\n    function(t) {\n        return \"__max__\" === (((t.mapValue || {}).fields || {}).__type__ || {}).stringValue;\n    }\n    /**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n    /**\n * Represents a bound of a query.\n *\n * The bound is specified with the given components representing a position and\n * whether it's just before or just after the position (relative to whatever the\n * query order is).\n *\n * The position represents a logical index position for a query. It's a prefix\n * of values for the (potentially implicit) order by clauses of a query.\n *\n * Bound provides a function to determine whether a document comes before or\n * after a bound. This is influenced by whether the position is just before or\n * just after the provided values.\n */ (t) ? 9007199254740991 /* TypeOrder.MaxValue */ : 10 /* TypeOrder.ObjectValue */ : b();\n}\n\n/** Tests `left` and `right` for equality based on the backend semantics. */ function Mt(t, e) {\n    if (t === e) return !0;\n    const n = Ct(t);\n    if (n !== Ct(e)) return !1;\n    switch (n) {\n      case 0 /* TypeOrder.NullValue */ :\n      case 9007199254740991 /* TypeOrder.MaxValue */ :\n        return !0;\n\n      case 1 /* TypeOrder.BooleanValue */ :\n        return t.booleanValue === e.booleanValue;\n\n      case 4 /* TypeOrder.ServerTimestampValue */ :\n        return Ot(t).isEqual(Ot(e));\n\n      case 3 /* TypeOrder.TimestampValue */ :\n        return function(t, e) {\n            if (\"string\" == typeof t.timestampValue && \"string\" == typeof e.timestampValue && t.timestampValue.length === e.timestampValue.length) \n            // Use string equality for ISO 8601 timestamps\n            return t.timestampValue === e.timestampValue;\n            const n = Nt(t.timestampValue), r = Nt(e.timestampValue);\n            return n.seconds === r.seconds && n.nanos === r.nanos;\n        }(t, e);\n\n      case 5 /* TypeOrder.StringValue */ :\n        return t.stringValue === e.stringValue;\n\n      case 6 /* TypeOrder.BlobValue */ :\n        return function(t, e) {\n            return Ft(t.bytesValue).isEqual(Ft(e.bytesValue));\n        }(t, e);\n\n      case 7 /* TypeOrder.RefValue */ :\n        return t.referenceValue === e.referenceValue;\n\n      case 8 /* TypeOrder.GeoPointValue */ :\n        return function(t, e) {\n            return Dt(t.geoPointValue.latitude) === Dt(e.geoPointValue.latitude) && Dt(t.geoPointValue.longitude) === Dt(e.geoPointValue.longitude);\n        }(t, e);\n\n      case 2 /* TypeOrder.NumberValue */ :\n        return function(t, e) {\n            if (\"integerValue\" in t && \"integerValue\" in e) return Dt(t.integerValue) === Dt(e.integerValue);\n            if (\"doubleValue\" in t && \"doubleValue\" in e) {\n                const n = Dt(t.doubleValue), r = Dt(e.doubleValue);\n                return n === r ? wt(n) === wt(r) : isNaN(n) && isNaN(r);\n            }\n            return !1;\n        }(t, e);\n\n      case 9 /* TypeOrder.ArrayValue */ :\n        return Tt(t.arrayValue.values || [], e.arrayValue.values || [], Mt);\n\n      case 10 /* TypeOrder.ObjectValue */ :\n        return function(t, e) {\n            const n = t.mapValue.fields || {}, r = e.mapValue.fields || {};\n            if (At(n) !== At(r)) return !1;\n            for (const t in n) if (n.hasOwnProperty(t) && (void 0 === r[t] || !Mt(n[t], r[t]))) return !1;\n            return !0;\n        }\n        /** Returns true if the ArrayValue contains the specified element. */ (t, e);\n\n      default:\n        return b();\n    }\n}\n\nfunction Lt(t, e) {\n    return void 0 !== (t.values || []).find((t => Mt(t, e)));\n}\n\nfunction Ut(t, e) {\n    if (t === e) return 0;\n    const n = Ct(t), r = Ct(e);\n    if (n !== r) return It(n, r);\n    switch (n) {\n      case 0 /* TypeOrder.NullValue */ :\n      case 9007199254740991 /* TypeOrder.MaxValue */ :\n        return 0;\n\n      case 1 /* TypeOrder.BooleanValue */ :\n        return It(t.booleanValue, e.booleanValue);\n\n      case 2 /* TypeOrder.NumberValue */ :\n        return function(t, e) {\n            const n = Dt(t.integerValue || t.doubleValue), r = Dt(e.integerValue || e.doubleValue);\n            return n < r ? -1 : n > r ? 1 : n === r ? 0 : \n            // one or both are NaN.\n            isNaN(n) ? isNaN(r) ? 0 : -1 : 1;\n        }(t, e);\n\n      case 3 /* TypeOrder.TimestampValue */ :\n        return jt(t.timestampValue, e.timestampValue);\n\n      case 4 /* TypeOrder.ServerTimestampValue */ :\n        return jt(Ot(t), Ot(e));\n\n      case 5 /* TypeOrder.StringValue */ :\n        return It(t.stringValue, e.stringValue);\n\n      case 6 /* TypeOrder.BlobValue */ :\n        return function(t, e) {\n            const n = Ft(t), r = Ft(e);\n            return n.compareTo(r);\n        }(t.bytesValue, e.bytesValue);\n\n      case 7 /* TypeOrder.RefValue */ :\n        return function(t, e) {\n            const n = t.split(\"/\"), r = e.split(\"/\");\n            for (let t = 0; t < n.length && t < r.length; t++) {\n                const e = It(n[t], r[t]);\n                if (0 !== e) return e;\n            }\n            return It(n.length, r.length);\n        }(t.referenceValue, e.referenceValue);\n\n      case 8 /* TypeOrder.GeoPointValue */ :\n        return function(t, e) {\n            const n = It(Dt(t.latitude), Dt(e.latitude));\n            if (0 !== n) return n;\n            return It(Dt(t.longitude), Dt(e.longitude));\n        }(t.geoPointValue, e.geoPointValue);\n\n      case 9 /* TypeOrder.ArrayValue */ :\n        return function(t, e) {\n            const n = t.values || [], r = e.values || [];\n            for (let t = 0; t < n.length && t < r.length; ++t) {\n                const e = Ut(n[t], r[t]);\n                if (e) return e;\n            }\n            return It(n.length, r.length);\n        }(t.arrayValue, e.arrayValue);\n\n      case 10 /* TypeOrder.ObjectValue */ :\n        return function(t, e) {\n            if (t === kt && e === kt) return 0;\n            if (t === kt) return 1;\n            if (e === kt) return -1;\n            const n = t.fields || {}, r = Object.keys(n), s = e.fields || {}, i = Object.keys(s);\n            // Even though MapValues are likely sorted correctly based on their insertion\n            // order (e.g. when received from the backend), local modifications can bring\n            // elements out of order. We need to re-sort the elements to ensure that\n            // canonical IDs are independent of insertion order.\n            r.sort(), i.sort();\n            for (let t = 0; t < r.length && t < i.length; ++t) {\n                const e = It(r[t], i[t]);\n                if (0 !== e) return e;\n                const o = Ut(n[r[t]], s[i[t]]);\n                if (0 !== o) return o;\n            }\n            return It(r.length, i.length);\n        }\n        /** Returns a reference value for the provided database and key. */ (t.mapValue, e.mapValue);\n\n      default:\n        throw b();\n    }\n}\n\nfunction jt(t, e) {\n    if (\"string\" == typeof t && \"string\" == typeof e && t.length === e.length) return It(t, e);\n    const n = Nt(t), r = Nt(e), s = It(n.seconds, r.seconds);\n    return 0 !== s ? s : It(n.nanos, r.nanos);\n}\n\nfunction Bt(t, e) {\n    return {\n        referenceValue: `projects/${t.projectId}/databases/${t.database}/documents/${e.path.canonicalString()}`\n    };\n}\n\n/** Returns true if `value` is an ArrayValue. */ function Qt(t) {\n    return !!t && \"arrayValue\" in t;\n}\n\n/** Returns true if `value` is a NullValue. */ function zt(t) {\n    return !!t && \"nullValue\" in t;\n}\n\n/** Returns true if `value` is NaN. */ function Wt(t) {\n    return !!t && \"doubleValue\" in t && isNaN(Number(t.doubleValue));\n}\n\n/** Returns true if `value` is a MapValue. */ function Gt(t) {\n    return !!t && \"mapValue\" in t;\n}\n\n/** Creates a deep copy of `source`. */ function Kt(t) {\n    if (t.geoPointValue) return {\n        geoPointValue: Object.assign({}, t.geoPointValue)\n    };\n    if (t.timestampValue && \"object\" == typeof t.timestampValue) return {\n        timestampValue: Object.assign({}, t.timestampValue)\n    };\n    if (t.mapValue) {\n        const e = {\n            mapValue: {\n                fields: {}\n            }\n        };\n        return Rt(t.mapValue.fields, ((t, n) => e.mapValue.fields[t] = Kt(n))), e;\n    }\n    if (t.arrayValue) {\n        const e = {\n            arrayValue: {\n                values: []\n            }\n        };\n        for (let n = 0; n < (t.arrayValue.values || []).length; ++n) e.arrayValue.values[n] = Kt(t.arrayValue.values[n]);\n        return e;\n    }\n    return Object.assign({}, t);\n}\n\nclass Yt {\n    constructor(t, e) {\n        this.position = t, this.inclusive = e;\n    }\n}\n\nfunction Ht(t, e) {\n    if (null === t) return null === e;\n    if (null === e) return !1;\n    if (t.inclusive !== e.inclusive || t.position.length !== e.position.length) return !1;\n    for (let n = 0; n < t.position.length; n++) {\n        if (!Mt(t.position[n], e.position[n])) return !1;\n    }\n    return !0;\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ class Jt {}\n\nclass Xt extends Jt {\n    constructor(t, e, n) {\n        super(), this.field = t, this.op = e, this.value = n;\n    }\n    /**\n     * Creates a filter based on the provided arguments.\n     */    static create(t, e, n) {\n        return t.isKeyField() ? \"in\" /* Operator.IN */ === e || \"not-in\" /* Operator.NOT_IN */ === e ? this.createKeyFieldInFilter(t, e, n) : new ee(t, e, n) : \"array-contains\" /* Operator.ARRAY_CONTAINS */ === e ? new ie(t, n) : \"in\" /* Operator.IN */ === e ? new oe(t, n) : \"not-in\" /* Operator.NOT_IN */ === e ? new ue(t, n) : \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */ === e ? new ce(t, n) : new Xt(t, e, n);\n    }\n    static createKeyFieldInFilter(t, e, n) {\n        return \"in\" /* Operator.IN */ === e ? new ne(t, n) : new re(t, n);\n    }\n    matches(t) {\n        const e = t.data.field(this.field);\n        // Types do not have to match in NOT_EQUAL filters.\n                return \"!=\" /* Operator.NOT_EQUAL */ === this.op ? null !== e && this.matchesComparison(Ut(e, this.value)) : null !== e && Ct(this.value) === Ct(e) && this.matchesComparison(Ut(e, this.value));\n        // Only compare types with matching backend order (such as double and int).\n        }\n    matchesComparison(t) {\n        switch (this.op) {\n          case \"<\" /* Operator.LESS_THAN */ :\n            return t < 0;\n\n          case \"<=\" /* Operator.LESS_THAN_OR_EQUAL */ :\n            return t <= 0;\n\n          case \"==\" /* Operator.EQUAL */ :\n            return 0 === t;\n\n          case \"!=\" /* Operator.NOT_EQUAL */ :\n            return 0 !== t;\n\n          case \">\" /* Operator.GREATER_THAN */ :\n            return t > 0;\n\n          case \">=\" /* Operator.GREATER_THAN_OR_EQUAL */ :\n            return t >= 0;\n\n          default:\n            return b();\n        }\n    }\n    isInequality() {\n        return [ \"<\" /* Operator.LESS_THAN */ , \"<=\" /* Operator.LESS_THAN_OR_EQUAL */ , \">\" /* Operator.GREATER_THAN */ , \">=\" /* Operator.GREATER_THAN_OR_EQUAL */ , \"!=\" /* Operator.NOT_EQUAL */ , \"not-in\" /* Operator.NOT_IN */ ].indexOf(this.op) >= 0;\n    }\n    getFlattenedFilters() {\n        return [ this ];\n    }\n    getFilters() {\n        return [ this ];\n    }\n    getFirstInequalityField() {\n        return this.isInequality() ? this.field : null;\n    }\n}\n\nclass Zt extends Jt {\n    constructor(t, e) {\n        super(), this.filters = t, this.op = e, this.D = null;\n    }\n    /**\n     * Creates a filter based on the provided arguments.\n     */    static create(t, e) {\n        return new Zt(t, e);\n    }\n    matches(t) {\n        return \"and\" /* CompositeOperator.AND */ === this.op ? void 0 === this.filters.find((e => !e.matches(t))) : void 0 !== this.filters.find((e => e.matches(t)));\n    }\n    getFlattenedFilters() {\n        return null !== this.D || (this.D = this.filters.reduce(((t, e) => t.concat(e.getFlattenedFilters())), [])), \n        this.D;\n    }\n    // Returns a mutable copy of `this.filters`\n    getFilters() {\n        return Object.assign([], this.filters);\n    }\n    getFirstInequalityField() {\n        const t = this.F((t => t.isInequality()));\n        return null !== t ? t.field : null;\n    }\n    // Performs a depth-first search to find and return the first FieldFilter in the composite filter\n    // that satisfies the predicate. Returns `null` if none of the FieldFilters satisfy the\n    // predicate.\n    F(t) {\n        for (const e of this.getFlattenedFilters()) if (t(e)) return e;\n        return null;\n    }\n}\n\nfunction te(t, e) {\n    return t instanceof Xt ? function(t, e) {\n        return e instanceof Xt && t.op === e.op && t.field.isEqual(e.field) && Mt(t.value, e.value);\n    }(t, e) : t instanceof Zt ? function(t, e) {\n        if (e instanceof Zt && t.op === e.op && t.filters.length === e.filters.length) {\n            return t.filters.reduce(((t, n, r) => t && te(n, e.filters[r])), !0);\n        }\n        return !1;\n    }\n    /** Filter that matches on key fields (i.e. '__name__'). */ (t, e) : void b();\n}\n\nclass ee extends Xt {\n    constructor(t, e, n) {\n        super(t, e, n), this.key = rt.fromName(n.referenceValue);\n    }\n    matches(t) {\n        const e = rt.comparator(t.key, this.key);\n        return this.matchesComparison(e);\n    }\n}\n\n/** Filter that matches on key fields within an array. */ class ne extends Xt {\n    constructor(t, e) {\n        super(t, \"in\" /* Operator.IN */ , e), this.keys = se(\"in\" /* Operator.IN */ , e);\n    }\n    matches(t) {\n        return this.keys.some((e => e.isEqual(t.key)));\n    }\n}\n\n/** Filter that matches on key fields not present within an array. */ class re extends Xt {\n    constructor(t, e) {\n        super(t, \"not-in\" /* Operator.NOT_IN */ , e), this.keys = se(\"not-in\" /* Operator.NOT_IN */ , e);\n    }\n    matches(t) {\n        return !this.keys.some((e => e.isEqual(t.key)));\n    }\n}\n\nfunction se(t, e) {\n    var n;\n    return ((null === (n = e.arrayValue) || void 0 === n ? void 0 : n.values) || []).map((t => rt.fromName(t.referenceValue)));\n}\n\n/** A Filter that implements the array-contains operator. */ class ie extends Xt {\n    constructor(t, e) {\n        super(t, \"array-contains\" /* Operator.ARRAY_CONTAINS */ , e);\n    }\n    matches(t) {\n        const e = t.data.field(this.field);\n        return Qt(e) && Lt(e.arrayValue, this.value);\n    }\n}\n\n/** A Filter that implements the IN operator. */ class oe extends Xt {\n    constructor(t, e) {\n        super(t, \"in\" /* Operator.IN */ , e);\n    }\n    matches(t) {\n        const e = t.data.field(this.field);\n        return null !== e && Lt(this.value.arrayValue, e);\n    }\n}\n\n/** A Filter that implements the not-in operator. */ class ue extends Xt {\n    constructor(t, e) {\n        super(t, \"not-in\" /* Operator.NOT_IN */ , e);\n    }\n    matches(t) {\n        if (Lt(this.value.arrayValue, {\n            nullValue: \"NULL_VALUE\"\n        })) return !1;\n        const e = t.data.field(this.field);\n        return null !== e && !Lt(this.value.arrayValue, e);\n    }\n}\n\n/** A Filter that implements the array-contains-any operator. */ class ce extends Xt {\n    constructor(t, e) {\n        super(t, \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */ , e);\n    }\n    matches(t) {\n        const e = t.data.field(this.field);\n        return !(!Qt(e) || !e.arrayValue.values) && e.arrayValue.values.some((t => Lt(this.value.arrayValue, t)));\n    }\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An ordering on a field, in some Direction. Direction defaults to ASCENDING.\n */ class ae {\n    constructor(t, e = \"asc\" /* Direction.ASCENDING */) {\n        this.field = t, this.dir = e;\n    }\n}\n\nfunction he(t, e) {\n    return t.dir === e.dir && t.field.isEqual(e.field);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A version of a document in Firestore. This corresponds to the version\n * timestamp, such as update_time or read_time.\n */ class le {\n    constructor(t) {\n        this.timestamp = t;\n    }\n    static fromTimestamp(t) {\n        return new le(t);\n    }\n    static min() {\n        return new le(new xt(0, 0));\n    }\n    static max() {\n        return new le(new xt(253402300799, 999999999));\n    }\n    compareTo(t) {\n        return this.timestamp._compareTo(t.timestamp);\n    }\n    isEqual(t) {\n        return this.timestamp.isEqual(t.timestamp);\n    }\n    /** Returns a number representation of the version for use in spec tests. */    toMicroseconds() {\n        // Convert to microseconds.\n        return 1e6 * this.timestamp.seconds + this.timestamp.nanoseconds / 1e3;\n    }\n    toString() {\n        return \"SnapshotVersion(\" + this.timestamp.toString() + \")\";\n    }\n    toTimestamp() {\n        return this.timestamp;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// An immutable sorted map implementation, based on a Left-leaning Red-Black\n// tree.\nclass fe {\n    constructor(t, e) {\n        this.comparator = t, this.root = e || we.EMPTY;\n    }\n    // Returns a copy of the map, with the specified key/value added or replaced.\n    insert(t, e) {\n        return new fe(this.comparator, this.root.insert(t, e, this.comparator).copy(null, null, we.BLACK, null, null));\n    }\n    // Returns a copy of the map, with the specified key removed.\n    remove(t) {\n        return new fe(this.comparator, this.root.remove(t, this.comparator).copy(null, null, we.BLACK, null, null));\n    }\n    // Returns the value of the node with the given key, or null.\n    get(t) {\n        let e = this.root;\n        for (;!e.isEmpty(); ) {\n            const n = this.comparator(t, e.key);\n            if (0 === n) return e.value;\n            n < 0 ? e = e.left : n > 0 && (e = e.right);\n        }\n        return null;\n    }\n    // Returns the index of the element in this sorted map, or -1 if it doesn't\n    // exist.\n    indexOf(t) {\n        // Number of nodes that were pruned when descending right\n        let e = 0, n = this.root;\n        for (;!n.isEmpty(); ) {\n            const r = this.comparator(t, n.key);\n            if (0 === r) return e + n.left.size;\n            r < 0 ? n = n.left : (\n            // Count all nodes left of the node plus the node itself\n            e += n.left.size + 1, n = n.right);\n        }\n        // Node not found\n                return -1;\n    }\n    isEmpty() {\n        return this.root.isEmpty();\n    }\n    // Returns the total number of nodes in the map.\n    get size() {\n        return this.root.size;\n    }\n    // Returns the minimum key in the map.\n    minKey() {\n        return this.root.minKey();\n    }\n    // Returns the maximum key in the map.\n    maxKey() {\n        return this.root.maxKey();\n    }\n    // Traverses the map in key order and calls the specified action function\n    // for each key/value pair. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    inorderTraversal(t) {\n        return this.root.inorderTraversal(t);\n    }\n    forEach(t) {\n        this.inorderTraversal(((e, n) => (t(e, n), !1)));\n    }\n    toString() {\n        const t = [];\n        return this.inorderTraversal(((e, n) => (t.push(`${e}:${n}`), !1))), `{${t.join(\", \")}}`;\n    }\n    // Traverses the map in reverse key order and calls the specified action\n    // function for each key/value pair. If action returns true, traversal is\n    // aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    reverseTraversal(t) {\n        return this.root.reverseTraversal(t);\n    }\n    // Returns an iterator over the SortedMap.\n    getIterator() {\n        return new de(this.root, null, this.comparator, !1);\n    }\n    getIteratorFrom(t) {\n        return new de(this.root, t, this.comparator, !1);\n    }\n    getReverseIterator() {\n        return new de(this.root, null, this.comparator, !0);\n    }\n    getReverseIteratorFrom(t) {\n        return new de(this.root, t, this.comparator, !0);\n    }\n}\n\n // end SortedMap\n// An iterator over an LLRBNode.\nclass de {\n    constructor(t, e, n, r) {\n        this.isReverse = r, this.nodeStack = [];\n        let s = 1;\n        for (;!t.isEmpty(); ) if (s = e ? n(t.key, e) : 1, \n        // flip the comparison if we're going in reverse\n        e && r && (s *= -1), s < 0) \n        // This node is less than our start key. ignore it\n        t = this.isReverse ? t.left : t.right; else {\n            if (0 === s) {\n                // This node is exactly equal to our start key. Push it on the stack,\n                // but stop iterating;\n                this.nodeStack.push(t);\n                break;\n            }\n            // This node is greater than our start key, add it to the stack and move\n            // to the next one\n            this.nodeStack.push(t), t = this.isReverse ? t.right : t.left;\n        }\n    }\n    getNext() {\n        let t = this.nodeStack.pop();\n        const e = {\n            key: t.key,\n            value: t.value\n        };\n        if (this.isReverse) for (t = t.left; !t.isEmpty(); ) this.nodeStack.push(t), t = t.right; else for (t = t.right; !t.isEmpty(); ) this.nodeStack.push(t), \n        t = t.left;\n        return e;\n    }\n    hasNext() {\n        return this.nodeStack.length > 0;\n    }\n    peek() {\n        if (0 === this.nodeStack.length) return null;\n        const t = this.nodeStack[this.nodeStack.length - 1];\n        return {\n            key: t.key,\n            value: t.value\n        };\n    }\n}\n\n // end SortedMapIterator\n// Represents a node in a Left-leaning Red-Black tree.\nclass we {\n    constructor(t, e, n, r, s) {\n        this.key = t, this.value = e, this.color = null != n ? n : we.RED, this.left = null != r ? r : we.EMPTY, \n        this.right = null != s ? s : we.EMPTY, this.size = this.left.size + 1 + this.right.size;\n    }\n    // Returns a copy of the current node, optionally replacing pieces of it.\n    copy(t, e, n, r, s) {\n        return new we(null != t ? t : this.key, null != e ? e : this.value, null != n ? n : this.color, null != r ? r : this.left, null != s ? s : this.right);\n    }\n    isEmpty() {\n        return !1;\n    }\n    // Traverses the tree in key order and calls the specified action function\n    // for each node. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    inorderTraversal(t) {\n        return this.left.inorderTraversal(t) || t(this.key, this.value) || this.right.inorderTraversal(t);\n    }\n    // Traverses the tree in reverse key order and calls the specified action\n    // function for each node. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    reverseTraversal(t) {\n        return this.right.reverseTraversal(t) || t(this.key, this.value) || this.left.reverseTraversal(t);\n    }\n    // Returns the minimum node in the tree.\n    min() {\n        return this.left.isEmpty() ? this : this.left.min();\n    }\n    // Returns the maximum key in the tree.\n    minKey() {\n        return this.min().key;\n    }\n    // Returns the maximum key in the tree.\n    maxKey() {\n        return this.right.isEmpty() ? this.key : this.right.maxKey();\n    }\n    // Returns new tree, with the key/value added.\n    insert(t, e, n) {\n        let r = this;\n        const s = n(t, r.key);\n        return r = s < 0 ? r.copy(null, null, null, r.left.insert(t, e, n), null) : 0 === s ? r.copy(null, e, null, null, null) : r.copy(null, null, null, null, r.right.insert(t, e, n)), \n        r.fixUp();\n    }\n    removeMin() {\n        if (this.left.isEmpty()) return we.EMPTY;\n        let t = this;\n        return t.left.isRed() || t.left.left.isRed() || (t = t.moveRedLeft()), t = t.copy(null, null, null, t.left.removeMin(), null), \n        t.fixUp();\n    }\n    // Returns new tree, with the specified item removed.\n    remove(t, e) {\n        let n, r = this;\n        if (e(t, r.key) < 0) r.left.isEmpty() || r.left.isRed() || r.left.left.isRed() || (r = r.moveRedLeft()), \n        r = r.copy(null, null, null, r.left.remove(t, e), null); else {\n            if (r.left.isRed() && (r = r.rotateRight()), r.right.isEmpty() || r.right.isRed() || r.right.left.isRed() || (r = r.moveRedRight()), \n            0 === e(t, r.key)) {\n                if (r.right.isEmpty()) return we.EMPTY;\n                n = r.right.min(), r = r.copy(n.key, n.value, null, null, r.right.removeMin());\n            }\n            r = r.copy(null, null, null, null, r.right.remove(t, e));\n        }\n        return r.fixUp();\n    }\n    isRed() {\n        return this.color;\n    }\n    // Returns new tree after performing any needed rotations.\n    fixUp() {\n        let t = this;\n        return t.right.isRed() && !t.left.isRed() && (t = t.rotateLeft()), t.left.isRed() && t.left.left.isRed() && (t = t.rotateRight()), \n        t.left.isRed() && t.right.isRed() && (t = t.colorFlip()), t;\n    }\n    moveRedLeft() {\n        let t = this.colorFlip();\n        return t.right.left.isRed() && (t = t.copy(null, null, null, null, t.right.rotateRight()), \n        t = t.rotateLeft(), t = t.colorFlip()), t;\n    }\n    moveRedRight() {\n        let t = this.colorFlip();\n        return t.left.left.isRed() && (t = t.rotateRight(), t = t.colorFlip()), t;\n    }\n    rotateLeft() {\n        const t = this.copy(null, null, we.RED, null, this.right.left);\n        return this.right.copy(null, null, this.color, t, null);\n    }\n    rotateRight() {\n        const t = this.copy(null, null, we.RED, this.left.right, null);\n        return this.left.copy(null, null, this.color, null, t);\n    }\n    colorFlip() {\n        const t = this.left.copy(null, null, !this.left.color, null, null), e = this.right.copy(null, null, !this.right.color, null, null);\n        return this.copy(null, null, !this.color, t, e);\n    }\n    // For testing.\n    checkMaxDepth() {\n        const t = this.check();\n        return Math.pow(2, t) <= this.size + 1;\n    }\n    // In a balanced RB tree, the black-depth (number of black nodes) from root to\n    // leaves is equal on both sides.  This function verifies that or asserts.\n    check() {\n        if (this.isRed() && this.left.isRed()) throw b();\n        if (this.right.isRed()) throw b();\n        const t = this.left.check();\n        if (t !== this.right.check()) throw b();\n        return t + (this.isRed() ? 0 : 1);\n    }\n}\n\n // end LLRBNode\n// Empty node is shared between all LLRB trees.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nwe.EMPTY = null, we.RED = !0, we.BLACK = !1;\n\n// end LLRBEmptyNode\nwe.EMPTY = new \n// Represents an empty node (a leaf node in the Red-Black Tree).\nclass {\n    constructor() {\n        this.size = 0;\n    }\n    get key() {\n        throw b();\n    }\n    get value() {\n        throw b();\n    }\n    get color() {\n        throw b();\n    }\n    get left() {\n        throw b();\n    }\n    get right() {\n        throw b();\n    }\n    // Returns a copy of the current node.\n    copy(t, e, n, r, s) {\n        return this;\n    }\n    // Returns a copy of the tree, with the specified key/value added.\n    insert(t, e, n) {\n        return new we(t, e);\n    }\n    // Returns a copy of the tree, with the specified key removed.\n    remove(t, e) {\n        return this;\n    }\n    isEmpty() {\n        return !0;\n    }\n    inorderTraversal(t) {\n        return !1;\n    }\n    reverseTraversal(t) {\n        return !1;\n    }\n    minKey() {\n        return null;\n    }\n    maxKey() {\n        return null;\n    }\n    isRed() {\n        return !1;\n    }\n    // For testing.\n    checkMaxDepth() {\n        return !0;\n    }\n    check() {\n        return 0;\n    }\n};\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * SortedSet is an immutable (copy-on-write) collection that holds elements\n * in order specified by the provided comparator.\n *\n * NOTE: if provided comparator returns 0 for two elements, we consider them to\n * be equal!\n */\nclass me {\n    constructor(t) {\n        this.comparator = t, this.data = new fe(this.comparator);\n    }\n    has(t) {\n        return null !== this.data.get(t);\n    }\n    first() {\n        return this.data.minKey();\n    }\n    last() {\n        return this.data.maxKey();\n    }\n    get size() {\n        return this.data.size;\n    }\n    indexOf(t) {\n        return this.data.indexOf(t);\n    }\n    /** Iterates elements in order defined by \"comparator\" */    forEach(t) {\n        this.data.inorderTraversal(((e, n) => (t(e), !1)));\n    }\n    /** Iterates over `elem`s such that: range[0] &lt;= elem &lt; range[1]. */    forEachInRange(t, e) {\n        const n = this.data.getIteratorFrom(t[0]);\n        for (;n.hasNext(); ) {\n            const r = n.getNext();\n            if (this.comparator(r.key, t[1]) >= 0) return;\n            e(r.key);\n        }\n    }\n    /**\n     * Iterates over `elem`s such that: start &lt;= elem until false is returned.\n     */    forEachWhile(t, e) {\n        let n;\n        for (n = void 0 !== e ? this.data.getIteratorFrom(e) : this.data.getIterator(); n.hasNext(); ) {\n            if (!t(n.getNext().key)) return;\n        }\n    }\n    /** Finds the least element greater than or equal to `elem`. */    firstAfterOrEqual(t) {\n        const e = this.data.getIteratorFrom(t);\n        return e.hasNext() ? e.getNext().key : null;\n    }\n    getIterator() {\n        return new pe(this.data.getIterator());\n    }\n    getIteratorFrom(t) {\n        return new pe(this.data.getIteratorFrom(t));\n    }\n    /** Inserts or updates an element */    add(t) {\n        return this.copy(this.data.remove(t).insert(t, !0));\n    }\n    /** Deletes an element */    delete(t) {\n        return this.has(t) ? this.copy(this.data.remove(t)) : this;\n    }\n    isEmpty() {\n        return this.data.isEmpty();\n    }\n    unionWith(t) {\n        let e = this;\n        // Make sure `result` always refers to the larger one of the two sets.\n                return e.size < t.size && (e = t, t = this), t.forEach((t => {\n            e = e.add(t);\n        })), e;\n    }\n    isEqual(t) {\n        if (!(t instanceof me)) return !1;\n        if (this.size !== t.size) return !1;\n        const e = this.data.getIterator(), n = t.data.getIterator();\n        for (;e.hasNext(); ) {\n            const t = e.getNext().key, r = n.getNext().key;\n            if (0 !== this.comparator(t, r)) return !1;\n        }\n        return !0;\n    }\n    toArray() {\n        const t = [];\n        return this.forEach((e => {\n            t.push(e);\n        })), t;\n    }\n    toString() {\n        const t = [];\n        return this.forEach((e => t.push(e))), \"SortedSet(\" + t.toString() + \")\";\n    }\n    copy(t) {\n        const e = new me(this.comparator);\n        return e.data = t, e;\n    }\n}\n\nclass pe {\n    constructor(t) {\n        this.iter = t;\n    }\n    getNext() {\n        return this.iter.getNext().key;\n    }\n    hasNext() {\n        return this.iter.hasNext();\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Provides a set of fields that can be used to partially patch a document.\n * FieldMask is used in conjunction with ObjectValue.\n * Examples:\n *   foo - Overwrites foo entirely with the provided value. If foo is not\n *         present in the companion ObjectValue, the field is deleted.\n *   foo.bar - Overwrites only the field bar of the object foo.\n *             If foo is not an object, foo is replaced with an object\n *             containing foo\n */ class ye {\n    constructor(t) {\n        this.fields = t, \n        // TODO(dimond): validation of FieldMask\n        // Sort the field mask to support `FieldMask.isEqual()` and assert below.\n        t.sort(nt.comparator);\n    }\n    static empty() {\n        return new ye([]);\n    }\n    /**\n     * Returns a new FieldMask object that is the result of adding all the given\n     * fields paths to this field mask.\n     */    unionWith(t) {\n        let e = new me(nt.comparator);\n        for (const t of this.fields) e = e.add(t);\n        for (const n of t) e = e.add(n);\n        return new ye(e.toArray());\n    }\n    /**\n     * Verifies that `fieldPath` is included by at least one field in this field\n     * mask.\n     *\n     * This is an O(n) operation, where `n` is the size of the field mask.\n     */    covers(t) {\n        for (const e of this.fields) if (e.isPrefixOf(t)) return !0;\n        return !1;\n    }\n    isEqual(t) {\n        return Tt(this.fields, t.fields, ((t, e) => t.isEqual(e)));\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An ObjectValue represents a MapValue in the Firestore Proto and offers the\n * ability to add and remove fields (via the ObjectValueBuilder).\n */ class ge {\n    constructor(t) {\n        this.value = t;\n    }\n    static empty() {\n        return new ge({\n            mapValue: {}\n        });\n    }\n    /**\n     * Returns the value at the given path or null.\n     *\n     * @param path - the path to search\n     * @returns The value at the path or null if the path is not set.\n     */    field(t) {\n        if (t.isEmpty()) return this.value;\n        {\n            let e = this.value;\n            for (let n = 0; n < t.length - 1; ++n) if (e = (e.mapValue.fields || {})[t.get(n)], \n            !Gt(e)) return null;\n            return e = (e.mapValue.fields || {})[t.lastSegment()], e || null;\n        }\n    }\n    /**\n     * Sets the field to the provided value.\n     *\n     * @param path - The field path to set.\n     * @param value - The value to set.\n     */    set(t, e) {\n        this.getFieldsMap(t.popLast())[t.lastSegment()] = Kt(e);\n    }\n    /**\n     * Sets the provided fields to the provided values.\n     *\n     * @param data - A map of fields to values (or null for deletes).\n     */    setAll(t) {\n        let e = nt.emptyPath(), n = {}, r = [];\n        t.forEach(((t, s) => {\n            if (!e.isImmediateParentOf(s)) {\n                // Insert the accumulated changes at this parent location\n                const t = this.getFieldsMap(e);\n                this.applyChanges(t, n, r), n = {}, r = [], e = s.popLast();\n            }\n            t ? n[s.lastSegment()] = Kt(t) : r.push(s.lastSegment());\n        }));\n        const s = this.getFieldsMap(e);\n        this.applyChanges(s, n, r);\n    }\n    /**\n     * Removes the field at the specified path. If there is no field at the\n     * specified path, nothing is changed.\n     *\n     * @param path - The field path to remove.\n     */    delete(t) {\n        const e = this.field(t.popLast());\n        Gt(e) && e.mapValue.fields && delete e.mapValue.fields[t.lastSegment()];\n    }\n    isEqual(t) {\n        return Mt(this.value, t.value);\n    }\n    /**\n     * Returns the map that contains the leaf element of `path`. If the parent\n     * entry does not yet exist, or if it is not a map, a new map will be created.\n     */    getFieldsMap(t) {\n        let e = this.value;\n        e.mapValue.fields || (e.mapValue = {\n            fields: {}\n        });\n        for (let n = 0; n < t.length; ++n) {\n            let r = e.mapValue.fields[t.get(n)];\n            Gt(r) && r.mapValue.fields || (r = {\n                mapValue: {\n                    fields: {}\n                }\n            }, e.mapValue.fields[t.get(n)] = r), e = r;\n        }\n        return e.mapValue.fields;\n    }\n    /**\n     * Modifies `fieldsMap` by adding, replacing or deleting the specified\n     * entries.\n     */    applyChanges(t, e, n) {\n        Rt(e, ((e, n) => t[e] = n));\n        for (const e of n) delete t[e];\n    }\n    clone() {\n        return new ge(Kt(this.value));\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents a document in Firestore with a key, version, data and whether it\n * has local mutations applied to it.\n *\n * Documents can transition between states via `convertToFoundDocument()`,\n * `convertToNoDocument()` and `convertToUnknownDocument()`. If a document does\n * not transition to one of these states even after all mutations have been\n * applied, `isValidDocument()` returns false and the document should be removed\n * from all views.\n */ class _e {\n    constructor(t, e, n, r, s, i, o) {\n        this.key = t, this.documentType = e, this.version = n, this.readTime = r, this.createTime = s, \n        this.data = i, this.documentState = o;\n    }\n    /**\n     * Creates a document with no known version or data, but which can serve as\n     * base document for mutations.\n     */    static newInvalidDocument(t) {\n        return new _e(t, 0 /* DocumentType.INVALID */ , \n        /* version */ le.min(), \n        /* readTime */ le.min(), \n        /* createTime */ le.min(), ge.empty(), 0 /* DocumentState.SYNCED */);\n    }\n    /**\n     * Creates a new document that is known to exist with the given data at the\n     * given version.\n     */    static newFoundDocument(t, e, n, r) {\n        return new _e(t, 1 /* DocumentType.FOUND_DOCUMENT */ , \n        /* version */ e, \n        /* readTime */ le.min(), \n        /* createTime */ n, r, 0 /* DocumentState.SYNCED */);\n    }\n    /** Creates a new document that is known to not exist at the given version. */    static newNoDocument(t, e) {\n        return new _e(t, 2 /* DocumentType.NO_DOCUMENT */ , \n        /* version */ e, \n        /* readTime */ le.min(), \n        /* createTime */ le.min(), ge.empty(), 0 /* DocumentState.SYNCED */);\n    }\n    /**\n     * Creates a new document that is known to exist at the given version but\n     * whose data is not known (e.g. a document that was updated without a known\n     * base document).\n     */    static newUnknownDocument(t, e) {\n        return new _e(t, 3 /* DocumentType.UNKNOWN_DOCUMENT */ , \n        /* version */ e, \n        /* readTime */ le.min(), \n        /* createTime */ le.min(), ge.empty(), 2 /* DocumentState.HAS_COMMITTED_MUTATIONS */);\n    }\n    /**\n     * Changes the document type to indicate that it exists and that its version\n     * and data are known.\n     */    convertToFoundDocument(t, e) {\n        // If a document is switching state from being an invalid or deleted\n        // document to a valid (FOUND_DOCUMENT) document, either due to receiving an\n        // update from Watch or due to applying a local set mutation on top\n        // of a deleted document, our best guess about its createTime would be the\n        // version at which the document transitioned to a FOUND_DOCUMENT.\n        return !this.createTime.isEqual(le.min()) || 2 /* DocumentType.NO_DOCUMENT */ !== this.documentType && 0 /* DocumentType.INVALID */ !== this.documentType || (this.createTime = t), \n        this.version = t, this.documentType = 1 /* DocumentType.FOUND_DOCUMENT */ , this.data = e, \n        this.documentState = 0 /* DocumentState.SYNCED */ , this;\n    }\n    /**\n     * Changes the document type to indicate that it doesn't exist at the given\n     * version.\n     */    convertToNoDocument(t) {\n        return this.version = t, this.documentType = 2 /* DocumentType.NO_DOCUMENT */ , \n        this.data = ge.empty(), this.documentState = 0 /* DocumentState.SYNCED */ , this;\n    }\n    /**\n     * Changes the document type to indicate that it exists at a given version but\n     * that its data is not known (e.g. a document that was updated without a known\n     * base document).\n     */    convertToUnknownDocument(t) {\n        return this.version = t, this.documentType = 3 /* DocumentType.UNKNOWN_DOCUMENT */ , \n        this.data = ge.empty(), this.documentState = 2 /* DocumentState.HAS_COMMITTED_MUTATIONS */ , \n        this;\n    }\n    setHasCommittedMutations() {\n        return this.documentState = 2 /* DocumentState.HAS_COMMITTED_MUTATIONS */ , this;\n    }\n    setHasLocalMutations() {\n        return this.documentState = 1 /* DocumentState.HAS_LOCAL_MUTATIONS */ , this.version = le.min(), \n        this;\n    }\n    setReadTime(t) {\n        return this.readTime = t, this;\n    }\n    get hasLocalMutations() {\n        return 1 /* DocumentState.HAS_LOCAL_MUTATIONS */ === this.documentState;\n    }\n    get hasCommittedMutations() {\n        return 2 /* DocumentState.HAS_COMMITTED_MUTATIONS */ === this.documentState;\n    }\n    get hasPendingWrites() {\n        return this.hasLocalMutations || this.hasCommittedMutations;\n    }\n    isValidDocument() {\n        return 0 /* DocumentType.INVALID */ !== this.documentType;\n    }\n    isFoundDocument() {\n        return 1 /* DocumentType.FOUND_DOCUMENT */ === this.documentType;\n    }\n    isNoDocument() {\n        return 2 /* DocumentType.NO_DOCUMENT */ === this.documentType;\n    }\n    isUnknownDocument() {\n        return 3 /* DocumentType.UNKNOWN_DOCUMENT */ === this.documentType;\n    }\n    isEqual(t) {\n        return t instanceof _e && this.key.isEqual(t.key) && this.version.isEqual(t.version) && this.documentType === t.documentType && this.documentState === t.documentState && this.data.isEqual(t.data);\n    }\n    mutableCopy() {\n        return new _e(this.key, this.documentType, this.version, this.readTime, this.createTime, this.data.clone(), this.documentState);\n    }\n    toString() {\n        return `Document(${this.key}, ${this.version}, ${JSON.stringify(this.data.value)}, {createTime: ${this.createTime}}), {documentType: ${this.documentType}}), {documentState: ${this.documentState}})`;\n    }\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Visible for testing\nclass ve {\n    constructor(t, e = null, n = [], r = [], s = null, i = null, o = null) {\n        this.path = t, this.collectionGroup = e, this.orderBy = n, this.filters = r, this.limit = s, \n        this.startAt = i, this.endAt = o, this.S = null;\n    }\n}\n\n/**\n * Initializes a Target with a path and optional additional query constraints.\n * Path must currently be empty if this is a collection group query.\n *\n * NOTE: you should always construct `Target` from `Query.toTarget` instead of\n * using this factory method, because `Query` provides an implicit `orderBy`\n * property.\n */ function be(t, e = null, n = [], r = [], s = null, i = null, o = null) {\n    return new ve(t, e, n, r, s, i, o);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Query encapsulates all the query attributes we support in the SDK. It can\n * be run against the LocalStore, as well as be converted to a `Target` to\n * query the RemoteStore results.\n *\n * Visible for testing.\n */\nclass Ee {\n    /**\n     * Initializes a Query with a path and optional additional query constraints.\n     * Path must currently be empty if this is a collection group query.\n     */\n    constructor(t, e = null, n = [], r = [], s = null, i = \"F\" /* LimitType.First */ , o = null, u = null) {\n        this.path = t, this.collectionGroup = e, this.explicitOrderBy = n, this.filters = r, \n        this.limit = s, this.limitType = i, this.startAt = o, this.endAt = u, this.q = null, \n        // The corresponding `Target` of this `Query` instance.\n        this.O = null, this.startAt, this.endAt;\n    }\n}\n\n/** Creates a new Query for a query that matches all documents at `path` */ function Ie(t) {\n    return t.explicitOrderBy.length > 0 ? t.explicitOrderBy[0].field : null;\n}\n\nfunction Te(t) {\n    for (const e of t.filters) {\n        const t = e.getFirstInequalityField();\n        if (null !== t) return t;\n    }\n    return null;\n}\n\n/**\n * Creates a new Query for a collection group query that matches all documents\n * within the provided collection group.\n */\n/**\n * Returns whether the query matches a collection group rather than a specific\n * collection.\n */\nfunction Ae(t) {\n    return null !== t.collectionGroup;\n}\n\n/**\n * Returns the implicit order by constraint that is used to execute the Query,\n * which can be different from the order by constraints the user provided (e.g.\n * the SDK and backend always orders by `__name__`).\n */ function Re(t) {\n    const e = I(t);\n    if (null === e.q) {\n        e.q = [];\n        const t = Te(e), n = Ie(e);\n        if (null !== t && null === n) \n        // In order to implicitly add key ordering, we must also add the\n        // inequality filter field for it to be a valid query.\n        // Note that the default inequality field and key ordering is ascending.\n        t.isKeyField() || e.q.push(new ae(t)), e.q.push(new ae(nt.keyField(), \"asc\" /* Direction.ASCENDING */)); else {\n            let t = !1;\n            for (const n of e.explicitOrderBy) e.q.push(n), n.field.isKeyField() && (t = !0);\n            if (!t) {\n                // The order of the implicit key ordering always matches the last\n                // explicit order by\n                const t = e.explicitOrderBy.length > 0 ? e.explicitOrderBy[e.explicitOrderBy.length - 1].dir : \"asc\" /* Direction.ASCENDING */;\n                e.q.push(new ae(nt.keyField(), t));\n            }\n        }\n    }\n    return e.q;\n}\n\n/**\n * Converts this `Query` instance to it's corresponding `Target` representation.\n */ function Pe(t) {\n    const e = I(t);\n    if (!e.O) if (\"F\" /* LimitType.First */ === e.limitType) e.O = be(e.path, e.collectionGroup, Re(e), e.filters, e.limit, e.startAt, e.endAt); else {\n        // Flip the orderBy directions since we want the last results\n        const t = [];\n        for (const n of Re(e)) {\n            const e = \"desc\" /* Direction.DESCENDING */ === n.dir ? \"asc\" /* Direction.ASCENDING */ : \"desc\" /* Direction.DESCENDING */;\n            t.push(new ae(n.field, e));\n        }\n        // We need to swap the cursors to match the now-flipped query ordering.\n                const n = e.endAt ? new Yt(e.endAt.position, e.endAt.inclusive) : null, r = e.startAt ? new Yt(e.startAt.position, e.startAt.inclusive) : null;\n        // Now return as a LimitType.First query.\n        e.O = be(e.path, e.collectionGroup, t, e.filters, e.limit, n, r);\n    }\n    return e.O;\n}\n\nfunction Ve(t, e) {\n    e.getFirstInequalityField(), Te(t);\n    const n = t.filters.concat([ e ]);\n    return new Ee(t.path, t.collectionGroup, t.explicitOrderBy.slice(), n, t.limit, t.limitType, t.startAt, t.endAt);\n}\n\nfunction $e(t, e) {\n    return function(t, e) {\n        if (t.limit !== e.limit) return !1;\n        if (t.orderBy.length !== e.orderBy.length) return !1;\n        for (let n = 0; n < t.orderBy.length; n++) if (!he(t.orderBy[n], e.orderBy[n])) return !1;\n        if (t.filters.length !== e.filters.length) return !1;\n        for (let n = 0; n < t.filters.length; n++) if (!te(t.filters[n], e.filters[n])) return !1;\n        return t.collectionGroup === e.collectionGroup && !!t.path.isEqual(e.path) && !!Ht(t.startAt, e.startAt) && Ht(t.endAt, e.endAt);\n    }(Pe(t), Pe(e)) && t.limitType === e.limitType;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns an DoubleValue for `value` that is encoded based the serializer's\n * `useProto3Json` setting.\n */\n/**\n * Returns a value for a number that's appropriate to put into a proto.\n * The return value is an IntegerValue if it can safely represent the value,\n * otherwise a DoubleValue is returned.\n */\nfunction Ne(t, e) {\n    return function(t) {\n        return \"number\" == typeof t && Number.isInteger(t) && !wt(t) && t <= Number.MAX_SAFE_INTEGER && t >= Number.MIN_SAFE_INTEGER;\n    }(e) ? \n    /**\n * Returns an IntegerValue for `value`.\n */\n    function(t) {\n        return {\n            integerValue: \"\" + t\n        };\n    }(e) : function(t, e) {\n        if (t.useProto3Json) {\n            if (isNaN(e)) return {\n                doubleValue: \"NaN\"\n            };\n            if (e === 1 / 0) return {\n                doubleValue: \"Infinity\"\n            };\n            if (e === -1 / 0) return {\n                doubleValue: \"-Infinity\"\n            };\n        }\n        return {\n            doubleValue: wt(e) ? \"-0\" : e\n        };\n    }(t, e);\n}\n\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Used to represent a field transform on a mutation. */ class De {\n    constructor() {\n        // Make sure that the structural type of `TransformOperation` is unique.\n        // See https://github.com/microsoft/TypeScript/issues/5451\n        this._ = void 0;\n    }\n}\n\n/** Transforms a value into a server-generated timestamp. */ class Fe extends De {}\n\n/** Transforms an array value via a union operation. */ class xe extends De {\n    constructor(t) {\n        super(), this.elements = t;\n    }\n}\n\n/** Transforms an array value via a remove operation. */ class Se extends De {\n    constructor(t) {\n        super(), this.elements = t;\n    }\n}\n\n/**\n * Implements the backend semantics for locally computed NUMERIC_ADD (increment)\n * transforms. Converts all field values to integers or doubles, but unlike the\n * backend does not cap integer values at 2^63. Instead, JavaScript number\n * arithmetic is used and precision loss can occur for values greater than 2^53.\n */ class qe extends De {\n    constructor(t, e) {\n        super(), this.serializer = t, this.k = e;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** A field path and the TransformOperation to perform upon it. */ class Oe {\n    constructor(t, e) {\n        this.field = t, this.transform = e;\n    }\n}\n\n/**\n * Encodes a precondition for a mutation. This follows the model that the\n * backend accepts with the special case of an explicit \"empty\" precondition\n * (meaning no precondition).\n */ class ke {\n    constructor(t, e) {\n        this.updateTime = t, this.exists = e;\n    }\n    /** Creates a new empty Precondition. */    static none() {\n        return new ke;\n    }\n    /** Creates a new Precondition with an exists flag. */    static exists(t) {\n        return new ke(void 0, t);\n    }\n    /** Creates a new Precondition based on a version a document exists at. */    static updateTime(t) {\n        return new ke(t);\n    }\n    /** Returns whether this Precondition is empty. */    get isNone() {\n        return void 0 === this.updateTime && void 0 === this.exists;\n    }\n    isEqual(t) {\n        return this.exists === t.exists && (this.updateTime ? !!t.updateTime && this.updateTime.isEqual(t.updateTime) : !t.updateTime);\n    }\n}\n\n/**\n * A mutation describes a self-contained change to a document. Mutations can\n * create, replace, delete, and update subsets of documents.\n *\n * Mutations not only act on the value of the document but also its version.\n *\n * For local mutations (mutations that haven't been committed yet), we preserve\n * the existing version for Set and Patch mutations. For Delete mutations, we\n * reset the version to 0.\n *\n * Here's the expected transition table.\n *\n * MUTATION           APPLIED TO            RESULTS IN\n *\n * SetMutation        Document(v3)          Document(v3)\n * SetMutation        NoDocument(v3)        Document(v0)\n * SetMutation        InvalidDocument(v0)   Document(v0)\n * PatchMutation      Document(v3)          Document(v3)\n * PatchMutation      NoDocument(v3)        NoDocument(v3)\n * PatchMutation      InvalidDocument(v0)   UnknownDocument(v3)\n * DeleteMutation     Document(v3)          NoDocument(v0)\n * DeleteMutation     NoDocument(v3)        NoDocument(v0)\n * DeleteMutation     InvalidDocument(v0)   NoDocument(v0)\n *\n * For acknowledged mutations, we use the updateTime of the WriteResponse as\n * the resulting version for Set and Patch mutations. As deletes have no\n * explicit update time, we use the commitTime of the WriteResponse for\n * Delete mutations.\n *\n * If a mutation is acknowledged by the backend but fails the precondition check\n * locally, we transition to an `UnknownDocument` and rely on Watch to send us\n * the updated version.\n *\n * Field transforms are used only with Patch and Set Mutations. We use the\n * `updateTransforms` message to store transforms, rather than the `transforms`s\n * messages.\n *\n * ## Subclassing Notes\n *\n * Every type of mutation needs to implement its own applyToRemoteDocument() and\n * applyToLocalView() to implement the actual behavior of applying the mutation\n * to some source document (see `setMutationApplyToRemoteDocument()` for an\n * example).\n */ class Ce {}\n\n/**\n * A mutation that creates or replaces the document at the given key with the\n * object value contents.\n */ class Me extends Ce {\n    constructor(t, e, n, r = []) {\n        super(), this.key = t, this.value = e, this.precondition = n, this.fieldTransforms = r, \n        this.type = 0 /* MutationType.Set */;\n    }\n    getFieldMask() {\n        return null;\n    }\n}\n\n/**\n * A mutation that modifies fields of the document at the given key with the\n * given values. The values are applied through a field mask:\n *\n *  * When a field is in both the mask and the values, the corresponding field\n *    is updated.\n *  * When a field is in neither the mask nor the values, the corresponding\n *    field is unmodified.\n *  * When a field is in the mask but not in the values, the corresponding field\n *    is deleted.\n *  * When a field is not in the mask but is in the values, the values map is\n *    ignored.\n */ class Le extends Ce {\n    constructor(t, e, n, r, s = []) {\n        super(), this.key = t, this.data = e, this.fieldMask = n, this.precondition = r, \n        this.fieldTransforms = s, this.type = 1 /* MutationType.Patch */;\n    }\n    getFieldMask() {\n        return this.fieldMask;\n    }\n}\n\n/** A mutation that deletes the document at the given key. */ class Ue extends Ce {\n    constructor(t, e) {\n        super(), this.key = t, this.precondition = e, this.type = 2 /* MutationType.Delete */ , \n        this.fieldTransforms = [];\n    }\n    getFieldMask() {\n        return null;\n    }\n}\n\n/**\n * A mutation that verifies the existence of the document at the given key with\n * the provided precondition.\n *\n * The `verify` operation is only used in Transactions, and this class serves\n * primarily to facilitate serialization into protos.\n */ class je extends Ce {\n    constructor(t, e) {\n        super(), this.key = t, this.precondition = e, this.type = 3 /* MutationType.Verify */ , \n        this.fieldTransforms = [];\n    }\n    getFieldMask() {\n        return null;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const Be = (() => {\n    const t = {\n        asc: \"ASCENDING\",\n        desc: \"DESCENDING\"\n    };\n    return t;\n})(), Qe = (() => {\n    const t = {\n        \"<\": \"LESS_THAN\",\n        \"<=\": \"LESS_THAN_OR_EQUAL\",\n        \">\": \"GREATER_THAN\",\n        \">=\": \"GREATER_THAN_OR_EQUAL\",\n        \"==\": \"EQUAL\",\n        \"!=\": \"NOT_EQUAL\",\n        \"array-contains\": \"ARRAY_CONTAINS\",\n        in: \"IN\",\n        \"not-in\": \"NOT_IN\",\n        \"array-contains-any\": \"ARRAY_CONTAINS_ANY\"\n    };\n    return t;\n})(), ze = (() => {\n    const t = {\n        and: \"AND\",\n        or: \"OR\"\n    };\n    return t;\n})();\n\n/**\n * This class generates JsonObject values for the Datastore API suitable for\n * sending to either GRPC stub methods or via the JSON/HTTP REST API.\n *\n * The serializer supports both Protobuf.js and Proto3 JSON formats. By\n * setting `useProto3Json` to true, the serializer will use the Proto3 JSON\n * format.\n *\n * For a description of the Proto3 JSON format check\n * https://developers.google.com/protocol-buffers/docs/proto3#json\n *\n * TODO(klimt): We can remove the databaseId argument if we keep the full\n * resource name in documents.\n */\nclass We {\n    constructor(t, e) {\n        this.databaseId = t, this.useProto3Json = e;\n    }\n}\n\n/**\n * Returns a value for a number (or null) that's appropriate to put into\n * a google.protobuf.Int32Value proto.\n * DO NOT USE THIS FOR ANYTHING ELSE.\n * This method cheats. It's typed as returning \"number\" because that's what\n * our generated proto interfaces say Int32Value must be. But GRPC actually\n * expects a { value: <number> } struct.\n */\n/**\n * Returns a value for a Date that's appropriate to put into a proto.\n */\nfunction Ge(t, e) {\n    if (t.useProto3Json) {\n        return `${new Date(1e3 * e.seconds).toISOString().replace(/\\.\\d*/, \"\").replace(\"Z\", \"\")}.${(\"000000000\" + e.nanoseconds).slice(-9)}Z`;\n    }\n    return {\n        seconds: \"\" + e.seconds,\n        nanos: e.nanoseconds\n    };\n}\n\n/**\n * Returns a value for bytes that's appropriate to put in a proto.\n *\n * Visible for testing.\n */\nfunction Ke(t, e) {\n    return t.useProto3Json ? e.toBase64() : e.toUint8Array();\n}\n\nfunction Ye(t, e) {\n    return Ge(t, e.toTimestamp());\n}\n\nfunction He(t) {\n    return E(!!t), le.fromTimestamp(function(t) {\n        const e = Nt(t);\n        return new xt(e.seconds, e.nanos);\n    }(t));\n}\n\nfunction Je(t, e) {\n    return function(t) {\n        return new tt([ \"projects\", t.projectId, \"databases\", t.database ]);\n    }(t).child(\"documents\").child(e).canonicalString();\n}\n\nfunction Xe(t, e) {\n    return Je(t.databaseId, e.path);\n}\n\nfunction Ze(t, e) {\n    const n = function(t) {\n        const e = tt.fromString(t);\n        return E(dn(e)), e;\n    }(e);\n    if (n.get(1) !== t.databaseId.projectId) throw new U(P, \"Tried to deserialize key from different project: \" + n.get(1) + \" vs \" + t.databaseId.projectId);\n    if (n.get(3) !== t.databaseId.database) throw new U(P, \"Tried to deserialize key from different database: \" + n.get(3) + \" vs \" + t.databaseId.database);\n    return new rt((E((r = n).length > 4 && \"documents\" === r.get(4)), r.popFirst(5)));\n    var r;\n    /** Creates a Document proto from key and fields (but no create/update time) */}\n\nfunction tn(t, e) {\n    return Je(t.databaseId, e);\n}\n\nfunction en(t) {\n    return new tt([ \"projects\", t.databaseId.projectId, \"databases\", t.databaseId.database ]).canonicalString();\n}\n\nfunction nn(t, e, n) {\n    return {\n        name: Xe(t, e),\n        fields: n.value.mapValue.fields\n    };\n}\n\nfunction rn(t, e) {\n    return \"found\" in e ? function(t, e) {\n        E(!!e.found), e.found.name, e.found.updateTime;\n        const n = Ze(t, e.found.name), r = He(e.found.updateTime), s = e.found.createTime ? He(e.found.createTime) : le.min(), i = new ge({\n            mapValue: {\n                fields: e.found.fields\n            }\n        });\n        return _e.newFoundDocument(n, r, s, i);\n    }(t, e) : \"missing\" in e ? function(t, e) {\n        E(!!e.missing), E(!!e.readTime);\n        const n = Ze(t, e.missing), r = He(e.readTime);\n        return _e.newNoDocument(n, r);\n    }(t, e) : b();\n}\n\nfunction sn(t, e) {\n    let n;\n    if (e instanceof Me) n = {\n        update: nn(t, e.key, e.value)\n    }; else if (e instanceof Ue) n = {\n        delete: Xe(t, e.key)\n    }; else if (e instanceof Le) n = {\n        update: nn(t, e.key, e.data),\n        updateMask: fn(e.fieldMask)\n    }; else {\n        if (!(e instanceof je)) return b();\n        n = {\n            verify: Xe(t, e.key)\n        };\n    }\n    return e.fieldTransforms.length > 0 && (n.updateTransforms = e.fieldTransforms.map((t => function(t, e) {\n        const n = e.transform;\n        if (n instanceof Fe) return {\n            fieldPath: e.field.canonicalString(),\n            setToServerValue: \"REQUEST_TIME\"\n        };\n        if (n instanceof xe) return {\n            fieldPath: e.field.canonicalString(),\n            appendMissingElements: {\n                values: n.elements\n            }\n        };\n        if (n instanceof Se) return {\n            fieldPath: e.field.canonicalString(),\n            removeAllFromArray: {\n                values: n.elements\n            }\n        };\n        if (n instanceof qe) return {\n            fieldPath: e.field.canonicalString(),\n            increment: n.k\n        };\n        throw b();\n    }(0, t)))), e.precondition.isNone || (n.currentDocument = function(t, e) {\n        return void 0 !== e.updateTime ? {\n            updateTime: Ye(t, e.updateTime)\n        } : void 0 !== e.exists ? {\n            exists: e.exists\n        } : b();\n    }(t, e.precondition)), n;\n}\n\nfunction on(t, e) {\n    // Dissect the path into parent, collectionId, and optional key filter.\n    const n = {\n        structuredQuery: {}\n    }, r = e.path;\n    null !== e.collectionGroup ? (n.parent = tn(t, r), n.structuredQuery.from = [ {\n        collectionId: e.collectionGroup,\n        allDescendants: !0\n    } ]) : (n.parent = tn(t, r.popLast()), n.structuredQuery.from = [ {\n        collectionId: r.lastSegment()\n    } ]);\n    const s = function(t) {\n        if (0 === t.length) return;\n        return ln(Zt.create(t, \"and\" /* CompositeOperator.AND */));\n    }(e.filters);\n    s && (n.structuredQuery.where = s);\n    const i = function(t) {\n        if (0 === t.length) return;\n        return t.map((t => \n        // visible for testing\n        function(t) {\n            return {\n                field: hn(t.field),\n                direction: un(t.dir)\n            };\n        }\n        // visible for testing\n        (t)));\n    }(e.orderBy);\n    i && (n.structuredQuery.orderBy = i);\n    const o = function(t, e) {\n        return t.useProto3Json || dt(e) ? e : {\n            value: e\n        };\n    }(t, e.limit);\n    var u;\n    return null !== o && (n.structuredQuery.limit = o), e.startAt && (n.structuredQuery.startAt = {\n        before: (u = e.startAt).inclusive,\n        values: u.position\n    }), e.endAt && (n.structuredQuery.endAt = function(t) {\n        return {\n            before: !t.inclusive,\n            values: t.position\n        };\n    }\n    // visible for testing\n    (e.endAt)), n;\n}\n\nfunction un(t) {\n    return Be[t];\n}\n\n// visible for testing\nfunction cn(t) {\n    return Qe[t];\n}\n\nfunction an(t) {\n    return ze[t];\n}\n\nfunction hn(t) {\n    return {\n        fieldPath: t.canonicalString()\n    };\n}\n\nfunction ln(t) {\n    return t instanceof Xt ? function(t) {\n        if (\"==\" /* Operator.EQUAL */ === t.op) {\n            if (Wt(t.value)) return {\n                unaryFilter: {\n                    field: hn(t.field),\n                    op: \"IS_NAN\"\n                }\n            };\n            if (zt(t.value)) return {\n                unaryFilter: {\n                    field: hn(t.field),\n                    op: \"IS_NULL\"\n                }\n            };\n        } else if (\"!=\" /* Operator.NOT_EQUAL */ === t.op) {\n            if (Wt(t.value)) return {\n                unaryFilter: {\n                    field: hn(t.field),\n                    op: \"IS_NOT_NAN\"\n                }\n            };\n            if (zt(t.value)) return {\n                unaryFilter: {\n                    field: hn(t.field),\n                    op: \"IS_NOT_NULL\"\n                }\n            };\n        }\n        return {\n            fieldFilter: {\n                field: hn(t.field),\n                op: cn(t.op),\n                value: t.value\n            }\n        };\n    }(t) : t instanceof Zt ? function(t) {\n        const e = t.getFilters().map((t => ln(t)));\n        if (1 === e.length) return e[0];\n        return {\n            compositeFilter: {\n                op: an(t.op),\n                filters: e\n            }\n        };\n    }(t) : b();\n}\n\nfunction fn(t) {\n    const e = [];\n    return t.fields.forEach((t => e.push(t.canonicalString()))), {\n        fieldPaths: e\n    };\n}\n\nfunction dn(t) {\n    // Resource names have at least 4 components (project ID, database ID)\n    return t.length >= 4 && \"projects\" === t.get(0) && \"databases\" === t.get(2);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ function wn(t) {\n    return new We(t, /* useProto3Json= */ !0);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A helper for running delayed tasks following an exponential backoff curve\n * between attempts.\n *\n * Each delay is made up of a \"base\" delay which follows the exponential\n * backoff curve, and a +/- 50% \"jitter\" that is calculated and added to the\n * base delay. This prevents clients from accidentally synchronizing their\n * delays causing spikes of load to the backend.\n */\nclass mn {\n    constructor(\n    /**\n     * The AsyncQueue to run backoff operations on.\n     */\n    t, \n    /**\n     * The ID to use when scheduling backoff operations on the AsyncQueue.\n     */\n    e, \n    /**\n     * The initial delay (used as the base delay on the first retry attempt).\n     * Note that jitter will still be applied, so the actual delay could be as\n     * little as 0.5*initialDelayMs.\n     */\n    n = 1e3\n    /**\n     * The multiplier to use to determine the extended base delay after each\n     * attempt.\n     */ , r = 1.5\n    /**\n     * The maximum base delay after which no further backoff is performed.\n     * Note that jitter will still be applied, so the actual delay could be as\n     * much as 1.5*maxDelayMs.\n     */ , s = 6e4) {\n        this.C = t, this.timerId = e, this.M = n, this.L = r, this.U = s, this.j = 0, this.B = null, \n        /** The last backoff attempt, as epoch milliseconds. */\n        this.W = Date.now(), this.reset();\n    }\n    /**\n     * Resets the backoff delay.\n     *\n     * The very next backoffAndWait() will have no delay. If it is called again\n     * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and\n     * subsequent ones will increase according to the backoffFactor.\n     */    reset() {\n        this.j = 0;\n    }\n    /**\n     * Resets the backoff delay to the maximum delay (e.g. for use after a\n     * RESOURCE_EXHAUSTED error).\n     */    G() {\n        this.j = this.U;\n    }\n    /**\n     * Returns a promise that resolves after currentDelayMs, and increases the\n     * delay for any subsequent attempts. If there was a pending backoff operation\n     * already, it will be canceled.\n     */    K(t) {\n        // Cancel any pending backoff operation.\n        this.cancel();\n        // First schedule using the current base (which may be 0 and should be\n        // honored as such).\n        const e = Math.floor(this.j + this.Y()), n = Math.max(0, Date.now() - this.W), r = Math.max(0, e - n);\n        // Guard against lastAttemptTime being in the future due to a clock change.\n                r > 0 && y(\"ExponentialBackoff\", `Backing off for ${r} ms (base delay: ${this.j} ms, delay with jitter: ${e} ms, last attempt: ${n} ms ago)`), \n        this.B = this.C.enqueueAfterDelay(this.timerId, r, (() => (this.W = Date.now(), \n        t()))), \n        // Apply backoff factor to determine next delay and ensure it is within\n        // bounds.\n        this.j *= this.L, this.j < this.M && (this.j = this.M), this.j > this.U && (this.j = this.U);\n    }\n    H() {\n        null !== this.B && (this.B.skipDelay(), this.B = null);\n    }\n    cancel() {\n        null !== this.B && (this.B.cancel(), this.B = null);\n    }\n    /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */    Y() {\n        return (Math.random() - .5) * this.j;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Datastore and its related methods are a wrapper around the external Google\n * Cloud Datastore grpc API, which provides an interface that is more convenient\n * for the rest of the client SDK architecture to consume.\n */\n/**\n * An implementation of Datastore that exposes additional state for internal\n * consumption.\n */\nclass pn extends class {} {\n    constructor(t, e, n, r) {\n        super(), this.authCredentials = t, this.appCheckCredentials = e, this.connection = n, \n        this.serializer = r, this.J = !1;\n    }\n    X() {\n        if (this.J) throw new U(S, \"The client has already been terminated.\");\n    }\n    /** Invokes the provided RPC with auth and AppCheck tokens. */    v(t, e, n) {\n        return this.X(), Promise.all([ this.authCredentials.getToken(), this.appCheckCredentials.getToken() ]).then((([r, s]) => this.connection.v(t, e, n, r, s))).catch((t => {\n            throw \"FirebaseError\" === t.name ? (t.code === F && (this.authCredentials.invalidateToken(), \n            this.appCheckCredentials.invalidateToken()), t) : new U(R, t.toString());\n        }));\n    }\n    /** Invokes the provided RPC with streamed results with auth and AppCheck tokens. */    R(t, e, n, r) {\n        return this.X(), Promise.all([ this.authCredentials.getToken(), this.appCheckCredentials.getToken() ]).then((([s, i]) => this.connection.R(t, e, n, s, i, r))).catch((t => {\n            throw \"FirebaseError\" === t.name ? (t.code === F && (this.authCredentials.invalidateToken(), \n            this.appCheckCredentials.invalidateToken()), t) : new U(R, t.toString());\n        }));\n    }\n    terminate() {\n        this.J = !0;\n    }\n}\n\n// TODO(firestorexp): Make sure there is only one Datastore instance per\n// firestore-exp client.\nasync function yn(t, e) {\n    const n = I(t), r = en(n.serializer) + \"/documents\", s = {\n        writes: e.map((t => sn(n.serializer, t)))\n    };\n    await n.v(\"Commit\", r, s);\n}\n\nasync function gn(t, e) {\n    const n = I(t), r = en(n.serializer) + \"/documents\", s = {\n        documents: e.map((t => Xe(n.serializer, t)))\n    }, i = await n.R(\"BatchGetDocuments\", r, s, e.length), o = new Map;\n    i.forEach((t => {\n        const e = rn(n.serializer, t);\n        o.set(e.key.toString(), e);\n    }));\n    const u = [];\n    return e.forEach((t => {\n        const e = o.get(t.toString());\n        E(!!e), u.push(e);\n    })), u;\n}\n\nasync function _n(t, e) {\n    const n = I(t), r = on(n.serializer, Pe(e));\n    return (await n.R(\"RunQuery\", r.parent, {\n        structuredQuery: r.structuredQuery\n    })).filter((t => !!t.document)).map((t => function(t, e, n) {\n        const r = Ze(t, e.name), s = He(e.updateTime), i = e.createTime ? He(e.createTime) : le.min(), o = new ge({\n            mapValue: {\n                fields: e.fields\n            }\n        }), u = _e.newFoundDocument(r, s, i, o);\n        return n && u.setHasCommittedMutations(), n ? u.setHasCommittedMutations() : u;\n    }(n.serializer, t.document, void 0)));\n}\n\nasync function vn(t, e, n) {\n    var r;\n    const s = I(t), {request: i, Z: o} = function(t, e, n) {\n        const r = on(t, e), s = {}, i = [];\n        let o = 0;\n        return n.forEach((t => {\n            // Map all client-side aliases to a unique short-form\n            // alias. This avoids issues with client-side aliases that\n            // exceed the 1500-byte string size limit.\n            const e = \"aggregate_\" + o++;\n            s[e] = t.alias, \"count\" === t.$ ? i.push({\n                alias: e,\n                count: {}\n            }) : \"avg\" === t.$ ? i.push({\n                alias: e,\n                avg: {\n                    field: hn(t.fieldPath)\n                }\n            }) : \"sum\" === t.$ && i.push({\n                alias: e,\n                sum: {\n                    field: hn(t.fieldPath)\n                }\n            });\n        })), {\n            request: {\n                structuredAggregationQuery: {\n                    aggregations: i,\n                    structuredQuery: r.structuredQuery\n                },\n                parent: r.parent\n            },\n            Z: s\n        };\n    }(s.serializer, Pe(e), n), u = i.parent;\n    s.connection.g || delete i.parent;\n    const c = (await s.R(\"RunAggregationQuery\", u, i, /*expectedResponseCount=*/ 1)).filter((t => !!t.result));\n    // Omit RunAggregationQueryResponse that only contain readTimes.\n        E(1 === c.length);\n    // Remap the short-form aliases that were sent to the server\n    // to the client-side aliases. Users will access the results\n    // using the client-side alias.\n    const a = null === (r = c[0].result) || void 0 === r ? void 0 : r.aggregateFields;\n    return Object.keys(a).reduce(((t, e) => (t[o[e]] = a[e], t)), {});\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const bn = new Map;\n\n/**\n * An instance map that ensures only one Datastore exists per Firestore\n * instance.\n */\n/**\n * Returns an initialized and started Datastore for the given Firestore\n * instance. Callers must invoke removeComponents() when the Firestore\n * instance is terminated.\n */\nfunction En(t) {\n    if (t._terminated) throw new U(S, \"The client has already been terminated.\");\n    if (!bn.has(t)) {\n        y(\"ComponentProvider\", \"Initializing Datastore\");\n        const i = function(t) {\n            return new _t(t, fetch.bind(null));\n        }((e = t._databaseId, n = t.app.options.appId || \"\", r = t._persistenceKey, s = t._freezeSettings(), \n        new J(e, n, r, s.host, s.ssl, s.experimentalForceLongPolling, s.experimentalAutoDetectLongPolling, ht(s.experimentalLongPollingOptions), s.useFetchStreams))), o = wn(t._databaseId), u = function(t, e, n, r) {\n            return new pn(t, e, n, r);\n        }(t._authCredentials, t._appCheckCredentials, i, o);\n        bn.set(t, u);\n    }\n    var e, n, r, s;\n    /**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */    return bn.get(t);\n}\n\n/**\n * Removes all components associated with the provided instance. Must be called\n * when the `Firestore` instance is terminated.\n */\n/**\n * A concrete type describing all the values that can be applied via a\n * user-supplied `FirestoreSettings` object. This is a separate type so that\n * defaults can be supplied and the value can be checked for equality.\n */\nclass In {\n    constructor(t) {\n        var e, n;\n        if (void 0 === t.host) {\n            if (void 0 !== t.ssl) throw new U(P, \"Can't provide ssl option if host option is not set\");\n            this.host = \"firestore.googleapis.com\", this.ssl = true;\n        } else this.host = t.host, this.ssl = null === (e = t.ssl) || void 0 === e || e;\n        if (this.credentials = t.credentials, this.ignoreUndefinedProperties = !!t.ignoreUndefinedProperties, \n        this.cache = t.localCache, void 0 === t.cacheSizeBytes) this.cacheSizeBytes = 41943040; else {\n            if (-1 !== t.cacheSizeBytes && t.cacheSizeBytes < 1048576) throw new U(P, \"cacheSizeBytes must be at least 1048576\");\n            this.cacheSizeBytes = t.cacheSizeBytes;\n        }\n        !function(t, e, n, r) {\n            if (!0 === e && !0 === r) throw new U(P, `${t} and ${n} cannot be used together.`);\n        }(\"experimentalForceLongPolling\", t.experimentalForceLongPolling, \"experimentalAutoDetectLongPolling\", t.experimentalAutoDetectLongPolling), \n        this.experimentalForceLongPolling = !!t.experimentalForceLongPolling, this.experimentalForceLongPolling ? this.experimentalAutoDetectLongPolling = !1 : void 0 === t.experimentalAutoDetectLongPolling ? this.experimentalAutoDetectLongPolling = true : \n        // For backwards compatibility, coerce the value to boolean even though\n        // the TypeScript compiler has narrowed the type to boolean already.\n        // noinspection PointlessBooleanExpressionJS\n        this.experimentalAutoDetectLongPolling = !!t.experimentalAutoDetectLongPolling, \n        this.experimentalLongPollingOptions = ht(null !== (n = t.experimentalLongPollingOptions) && void 0 !== n ? n : {}), \n        function(t) {\n            if (void 0 !== t.timeoutSeconds) {\n                if (isNaN(t.timeoutSeconds)) throw new U(P, `invalid long polling timeout: ${t.timeoutSeconds} (must not be NaN)`);\n                if (t.timeoutSeconds < 5) throw new U(P, `invalid long polling timeout: ${t.timeoutSeconds} (minimum allowed value is 5)`);\n                if (t.timeoutSeconds > 30) throw new U(P, `invalid long polling timeout: ${t.timeoutSeconds} (maximum allowed value is 30)`);\n            }\n        }\n        /**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n        /**\n * The Cloud Firestore service interface.\n *\n * Do not call this constructor directly. Instead, use {@link (getFirestore:1)}.\n */ (this.experimentalLongPollingOptions), this.useFetchStreams = !!t.useFetchStreams;\n    }\n    isEqual(t) {\n        return this.host === t.host && this.ssl === t.ssl && this.credentials === t.credentials && this.cacheSizeBytes === t.cacheSizeBytes && this.experimentalForceLongPolling === t.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === t.experimentalAutoDetectLongPolling && (e = this.experimentalLongPollingOptions, \n        n = t.experimentalLongPollingOptions, e.timeoutSeconds === n.timeoutSeconds) && this.ignoreUndefinedProperties === t.ignoreUndefinedProperties && this.useFetchStreams === t.useFetchStreams;\n        var e, n;\n    }\n}\n\nclass Tn {\n    /** @hideconstructor */\n    constructor(t, e, n, r) {\n        this._authCredentials = t, this._appCheckCredentials = e, this._databaseId = n, \n        this._app = r, \n        /**\n         * Whether it's a Firestore or Firestore Lite instance.\n         */\n        this.type = \"firestore-lite\", this._persistenceKey = \"(lite)\", this._settings = new In({}), \n        this._settingsFrozen = !1;\n    }\n    /**\n     * The {@link @firebase/app#FirebaseApp} associated with this `Firestore` service\n     * instance.\n     */    get app() {\n        if (!this._app) throw new U(S, \"Firestore was not initialized using the Firebase SDK. 'app' is not available\");\n        return this._app;\n    }\n    get _initialized() {\n        return this._settingsFrozen;\n    }\n    get _terminated() {\n        return void 0 !== this._terminateTask;\n    }\n    _setSettings(t) {\n        if (this._settingsFrozen) throw new U(S, \"Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.\");\n        this._settings = new In(t), void 0 !== t.credentials && (this._authCredentials = function(t) {\n            if (!t) return new Q;\n            switch (t.type) {\n              case \"firstParty\":\n                return new K(t.sessionIndex || \"0\", t.iamToken || null, t.authTokenFactory || null);\n\n              case \"provider\":\n                return t.client;\n\n              default:\n                throw new U(P, \"makeAuthCredentialsProvider failed due to invalid credential type\");\n            }\n        }(t.credentials));\n    }\n    _getSettings() {\n        return this._settings;\n    }\n    _freezeSettings() {\n        return this._settingsFrozen = !0, this._settings;\n    }\n    _delete() {\n        return this._terminateTask || (this._terminateTask = this._terminate()), this._terminateTask;\n    }\n    /** Returns a JSON-serializable representation of this `Firestore` instance. */    toJSON() {\n        return {\n            app: this._app,\n            databaseId: this._databaseId,\n            settings: this._settings\n        };\n    }\n    /**\n     * Terminates all components used by this client. Subclasses can override\n     * this method to clean up their own dependencies, but must also call this\n     * method.\n     *\n     * Only ever called once.\n     */    _terminate() {\n        return function(t) {\n            const e = bn.get(t);\n            e && (y(\"ComponentProvider\", \"Removing Datastore\"), bn.delete(t), e.terminate());\n        }(this), Promise.resolve();\n    }\n}\n\nfunction An(t, e, n) {\n    n || (n = \"(default)\");\n    const r = _getProvider(t, \"firestore/lite\");\n    if (r.isInitialized(n)) throw new U(S, \"Firestore can only be initialized once per app.\");\n    return r.initialize({\n        options: e,\n        instanceIdentifier: n\n    });\n}\n\nfunction Rn(e, n) {\n    const r = \"object\" == typeof e ? e : t(), s = \"string\" == typeof e ? e : n || \"(default)\", i = _getProvider(r, \"firestore/lite\").getImmediate({\n        identifier: s\n    });\n    if (!i._initialized) {\n        const t = a(\"firestore\");\n        t && Pn(i, ...t);\n    }\n    return i;\n}\n\n/**\n * Modify this instance to communicate with the Cloud Firestore emulator.\n *\n * Note: This must be called before this instance has been used to do any\n * operations.\n *\n * @param firestore - The `Firestore` instance to configure to connect to the\n * emulator.\n * @param host - the emulator host (ex: localhost).\n * @param port - the emulator port (ex: 9000).\n * @param options.mockUserToken - the mock auth token to use for unit testing\n * Security Rules.\n */ function Pn(t, e, n, r = {}) {\n    var s;\n    const i = (t = ct(t, Tn))._getSettings(), o = `${e}:${n}`;\n    if (\"firestore.googleapis.com\" !== i.host && i.host !== o && _(\"Host has been set in both settings() and connectFirestoreEmulator(), emulator host will be used.\"), \n    t._setSettings(Object.assign(Object.assign({}, i), {\n        host: o,\n        ssl: !1\n    })), r.mockUserToken) {\n        let e, n;\n        if (\"string\" == typeof r.mockUserToken) e = r.mockUserToken, n = d.MOCK_USER; else {\n            // Let createMockUserToken validate first (catches common mistakes like\n            // invalid field \"uid\" and missing field \"sub\" / \"user_id\".)\n            e = h(r.mockUserToken, null === (s = t._app) || void 0 === s ? void 0 : s.options.projectId);\n            const i = r.mockUserToken.sub || r.mockUserToken.user_id;\n            if (!i) throw new U(P, \"mockUserToken must contain 'sub' or 'user_id' field!\");\n            n = new d(i);\n        }\n        t._authCredentials = new z(new B(e, n));\n    }\n}\n\n/**\n * Terminates the provided `Firestore` instance.\n *\n * After calling `terminate()` only the `clearIndexedDbPersistence()` functions\n * may be used. Any other function will throw a `FirestoreError`. Termination\n * does not cancel any pending writes, and any promises that are awaiting a\n * response from the server will not be resolved.\n *\n * To restart after termination, create a new instance of `Firestore` with\n * {@link (getFirestore:1)}.\n *\n * Note: Under normal circumstances, calling `terminate()` is not required. This\n * function is useful only when you want to force this instance to release all of\n * its resources or in combination with {@link clearIndexedDbPersistence} to\n * ensure that all local state is destroyed between test runs.\n *\n * @param firestore - The `Firestore` instance to terminate.\n * @returns A `Promise` that is resolved when the instance has been successfully\n * terminated.\n */ function Vn(t) {\n    return t = ct(t, Tn), e(t.app, \"firestore/lite\"), t._delete();\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents an aggregation that can be performed by Firestore.\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nclass $n {\n    /**\n     * Create a new AggregateField<T>\n     * @param _aggregateType Specifies the type of aggregation operation to perform.\n     * @param _internalFieldPath Optionally specifies the field that is aggregated.\n     * @internal\n     */\n    constructor(\n    // TODO (sum/avg) make aggregateType public when the feature is supported\n    t = \"count\", e) {\n        this._aggregateType = t, this._internalFieldPath = e, \n        /** A type string to uniquely identify instances of this class. */\n        this.type = \"AggregateField\";\n    }\n}\n\n/**\n * The results of executing an aggregation query.\n */ class Nn {\n    /** @hideconstructor */\n    constructor(t, e, n) {\n        this._userDataWriter = e, this._data = n, \n        /** A type string to uniquely identify instances of this class. */\n        this.type = \"AggregateQuerySnapshot\", this.query = t;\n    }\n    /**\n     * Returns the results of the aggregations performed over the underlying\n     * query.\n     *\n     * The keys of the returned object will be the same as those of the\n     * `AggregateSpec` object specified to the aggregation method, and the values\n     * will be the corresponding aggregation result.\n     *\n     * @returns The results of the aggregations performed over the underlying\n     * query.\n     */    data() {\n        return this._userDataWriter.convertObjectMap(this._data);\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A `DocumentReference` refers to a document location in a Firestore database\n * and can be used to write, read, or listen to the location. The document at\n * the referenced location may or may not exist.\n */ class Dn {\n    /** @hideconstructor */\n    constructor(t, \n    /**\n     * If provided, the `FirestoreDataConverter` associated with this instance.\n     */\n    e, n) {\n        this.converter = e, this._key = n, \n        /** The type of this Firestore reference. */\n        this.type = \"document\", this.firestore = t;\n    }\n    get _path() {\n        return this._key.path;\n    }\n    /**\n     * The document's identifier within its collection.\n     */    get id() {\n        return this._key.path.lastSegment();\n    }\n    /**\n     * A string representing the path of the referenced document (relative\n     * to the root of the database).\n     */    get path() {\n        return this._key.path.canonicalString();\n    }\n    /**\n     * The collection this `DocumentReference` belongs to.\n     */    get parent() {\n        return new xn(this.firestore, this.converter, this._key.path.popLast());\n    }\n    withConverter(t) {\n        return new Dn(this.firestore, t, this._key);\n    }\n}\n\n/**\n * A `Query` refers to a query which you can read or listen to. You can also\n * construct refined `Query` objects by adding filters and ordering.\n */ class Fn {\n    // This is the lite version of the Query class in the main SDK.\n    /** @hideconstructor protected */\n    constructor(t, \n    /**\n     * If provided, the `FirestoreDataConverter` associated with this instance.\n     */\n    e, n) {\n        this.converter = e, this._query = n, \n        /** The type of this Firestore reference. */\n        this.type = \"query\", this.firestore = t;\n    }\n    withConverter(t) {\n        return new Fn(this.firestore, t, this._query);\n    }\n}\n\n/**\n * A `CollectionReference` object can be used for adding documents, getting\n * document references, and querying for documents (using {@link (query:1)}).\n */ class xn extends Fn {\n    /** @hideconstructor */\n    constructor(t, e, n) {\n        super(t, e, new Ee(n)), this._path = n, \n        /** The type of this Firestore reference. */\n        this.type = \"collection\";\n    }\n    /** The collection's identifier. */    get id() {\n        return this._query.path.lastSegment();\n    }\n    /**\n     * A string representing the path of the referenced collection (relative\n     * to the root of the database).\n     */    get path() {\n        return this._query.path.canonicalString();\n    }\n    /**\n     * A reference to the containing `DocumentReference` if this is a\n     * subcollection. If this isn't a subcollection, the reference is null.\n     */    get parent() {\n        const t = this._path.popLast();\n        return t.isEmpty() ? null : new Dn(this.firestore, \n        /* converter= */ null, new rt(t));\n    }\n    withConverter(t) {\n        return new xn(this.firestore, t, this._path);\n    }\n}\n\nfunction Sn(t, e, ...n) {\n    if (t = l(t), st(\"collection\", \"path\", e), t instanceof Tn) {\n        const r = tt.fromString(e, ...n);\n        return ot(r), new xn(t, /* converter= */ null, r);\n    }\n    {\n        if (!(t instanceof Dn || t instanceof xn)) throw new U(P, \"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore\");\n        const r = t._path.child(tt.fromString(e, ...n));\n        return ot(r), new xn(t.firestore, \n        /* converter= */ null, r);\n    }\n}\n\n// TODO(firestorelite): Consider using ErrorFactory -\n// https://github.com/firebase/firebase-js-sdk/blob/0131e1f/packages/util/src/errors.ts#L106\n/**\n * Creates and returns a new `Query` instance that includes all documents in the\n * database that are contained in a collection or subcollection with the\n * given `collectionId`.\n *\n * @param firestore - A reference to the root `Firestore` instance.\n * @param collectionId - Identifies the collections to query over. Every\n * collection or subcollection with this ID as the last segment of its path\n * will be included. Cannot contain a slash.\n * @returns The created `Query`.\n */ function qn(t, e) {\n    if (t = ct(t, Tn), st(\"collectionGroup\", \"collection id\", e), e.indexOf(\"/\") >= 0) throw new U(P, `Invalid collection ID '${e}' passed to function collectionGroup(). Collection IDs must not contain '/'.`);\n    return new Fn(t, \n    /* converter= */ null, function(t) {\n        return new Ee(tt.emptyPath(), t);\n    }(e));\n}\n\nfunction On(t, e, ...n) {\n    if (t = l(t), \n    // We allow omission of 'pathString' but explicitly prohibit passing in both\n    // 'undefined' and 'null'.\n    1 === arguments.length && (e = Et.N()), st(\"doc\", \"path\", e), t instanceof Tn) {\n        const r = tt.fromString(e, ...n);\n        return it(r), new Dn(t, \n        /* converter= */ null, new rt(r));\n    }\n    {\n        if (!(t instanceof Dn || t instanceof xn)) throw new U(P, \"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore\");\n        const r = t._path.child(tt.fromString(e, ...n));\n        return it(r), new Dn(t.firestore, t instanceof xn ? t.converter : null, new rt(r));\n    }\n}\n\n/**\n * Returns true if the provided references are equal.\n *\n * @param left - A reference to compare.\n * @param right - A reference to compare.\n * @returns true if the references point to the same location in the same\n * Firestore database.\n */ function kn(t, e) {\n    return t = l(t), e = l(e), (t instanceof Dn || t instanceof xn) && (e instanceof Dn || e instanceof xn) && (t.firestore === e.firestore && t.path === e.path && t.converter === e.converter);\n}\n\n/**\n * Returns true if the provided queries point to the same collection and apply\n * the same constraints.\n *\n * @param left - A `Query` to compare.\n * @param right - A `Query` to compare.\n * @returns true if the references point to the same location in the same\n * Firestore database.\n */ function Cn(t, e) {\n    return t = l(t), e = l(e), t instanceof Fn && e instanceof Fn && (t.firestore === e.firestore && $e(t._query, e._query) && t.converter === e.converter);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An immutable object representing an array of bytes.\n */ class Mn {\n    /** @hideconstructor */\n    constructor(t) {\n        this._byteString = t;\n    }\n    /**\n     * Creates a new `Bytes` object from the given Base64 string, converting it to\n     * bytes.\n     *\n     * @param base64 - The Base64 string used to create the `Bytes` object.\n     */    static fromBase64String(t) {\n        try {\n            return new Mn(Vt.fromBase64String(t));\n        } catch (t) {\n            throw new U(P, \"Failed to construct data from Base64 string: \" + t);\n        }\n    }\n    /**\n     * Creates a new `Bytes` object from the given Uint8Array.\n     *\n     * @param array - The Uint8Array used to create the `Bytes` object.\n     */    static fromUint8Array(t) {\n        return new Mn(Vt.fromUint8Array(t));\n    }\n    /**\n     * Returns the underlying bytes as a Base64-encoded string.\n     *\n     * @returns The Base64-encoded string created from the `Bytes` object.\n     */    toBase64() {\n        return this._byteString.toBase64();\n    }\n    /**\n     * Returns the underlying bytes in a new `Uint8Array`.\n     *\n     * @returns The Uint8Array created from the `Bytes` object.\n     */    toUint8Array() {\n        return this._byteString.toUint8Array();\n    }\n    /**\n     * Returns a string representation of the `Bytes` object.\n     *\n     * @returns A string representation of the `Bytes` object.\n     */    toString() {\n        return \"Bytes(base64: \" + this.toBase64() + \")\";\n    }\n    /**\n     * Returns true if this `Bytes` object is equal to the provided one.\n     *\n     * @param other - The `Bytes` object to compare against.\n     * @returns true if this `Bytes` object is equal to the provided one.\n     */    isEqual(t) {\n        return this._byteString.isEqual(t._byteString);\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A `FieldPath` refers to a field in a document. The path may consist of a\n * single field name (referring to a top-level field in the document), or a\n * list of field names (referring to a nested field in the document).\n *\n * Create a `FieldPath` by providing field names. If more than one field\n * name is provided, the path will point to a nested field in a document.\n */ class Ln {\n    /**\n     * Creates a `FieldPath` from the provided field names. If more than one field\n     * name is provided, the path will point to a nested field in a document.\n     *\n     * @param fieldNames - A list of field names.\n     */\n    constructor(...t) {\n        for (let e = 0; e < t.length; ++e) if (0 === t[e].length) throw new U(P, \"Invalid field name at argument $(i + 1). Field names must not be empty.\");\n        this._internalPath = new nt(t);\n    }\n    /**\n     * Returns true if this `FieldPath` is equal to the provided one.\n     *\n     * @param other - The `FieldPath` to compare against.\n     * @returns true if this `FieldPath` is equal to the provided one.\n     */    isEqual(t) {\n        return this._internalPath.isEqual(t._internalPath);\n    }\n}\n\n/**\n * Returns a special sentinel `FieldPath` to refer to the ID of a document.\n * It can be used in queries to sort or filter by the document ID.\n */ function Un() {\n    return new Ln(\"__name__\");\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Sentinel values that can be used when writing document fields with `set()`\n * or `update()`.\n */ class jn {\n    /**\n     * @param _methodName - The public API endpoint that returns this class.\n     * @hideconstructor\n     */\n    constructor(t) {\n        this._methodName = t;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An immutable object representing a geographic location in Firestore. The\n * location is represented as latitude/longitude pair.\n *\n * Latitude values are in the range of [-90, 90].\n * Longitude values are in the range of [-180, 180].\n */ class Bn {\n    /**\n     * Creates a new immutable `GeoPoint` object with the provided latitude and\n     * longitude values.\n     * @param latitude - The latitude as number between -90 and 90.\n     * @param longitude - The longitude as number between -180 and 180.\n     */\n    constructor(t, e) {\n        if (!isFinite(t) || t < -90 || t > 90) throw new U(P, \"Latitude must be a number between -90 and 90, but was: \" + t);\n        if (!isFinite(e) || e < -180 || e > 180) throw new U(P, \"Longitude must be a number between -180 and 180, but was: \" + e);\n        this._lat = t, this._long = e;\n    }\n    /**\n     * The latitude of this `GeoPoint` instance.\n     */    get latitude() {\n        return this._lat;\n    }\n    /**\n     * The longitude of this `GeoPoint` instance.\n     */    get longitude() {\n        return this._long;\n    }\n    /**\n     * Returns true if this `GeoPoint` is equal to the provided one.\n     *\n     * @param other - The `GeoPoint` to compare against.\n     * @returns true if this `GeoPoint` is equal to the provided one.\n     */    isEqual(t) {\n        return this._lat === t._lat && this._long === t._long;\n    }\n    /** Returns a JSON-serializable representation of this GeoPoint. */    toJSON() {\n        return {\n            latitude: this._lat,\n            longitude: this._long\n        };\n    }\n    /**\n     * Actually private to JS consumers of our API, so this function is prefixed\n     * with an underscore.\n     */    _compareTo(t) {\n        return It(this._lat, t._lat) || It(this._long, t._long);\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const Qn = /^__.*__$/;\n\n/** The result of parsing document data (e.g. for a setData call). */ class zn {\n    constructor(t, e, n) {\n        this.data = t, this.fieldMask = e, this.fieldTransforms = n;\n    }\n    toMutation(t, e) {\n        return null !== this.fieldMask ? new Le(t, this.data, this.fieldMask, e, this.fieldTransforms) : new Me(t, this.data, e, this.fieldTransforms);\n    }\n}\n\n/** The result of parsing \"update\" data (i.e. for an updateData call). */ class Wn {\n    constructor(t, \n    // The fieldMask does not include document transforms.\n    e, n) {\n        this.data = t, this.fieldMask = e, this.fieldTransforms = n;\n    }\n    toMutation(t, e) {\n        return new Le(t, this.data, this.fieldMask, e, this.fieldTransforms);\n    }\n}\n\nfunction Gn(t) {\n    switch (t) {\n      case 0 /* UserDataSource.Set */ :\n // fall through\n              case 2 /* UserDataSource.MergeSet */ :\n // fall through\n              case 1 /* UserDataSource.Update */ :\n        return !0;\n\n      case 3 /* UserDataSource.Argument */ :\n      case 4 /* UserDataSource.ArrayArgument */ :\n        return !1;\n\n      default:\n        throw b();\n    }\n}\n\n/** A \"context\" object passed around while parsing user data. */ class Kn {\n    /**\n     * Initializes a ParseContext with the given source and path.\n     *\n     * @param settings - The settings for the parser.\n     * @param databaseId - The database ID of the Firestore instance.\n     * @param serializer - The serializer to use to generate the Value proto.\n     * @param ignoreUndefinedProperties - Whether to ignore undefined properties\n     * rather than throw.\n     * @param fieldTransforms - A mutable list of field transforms encountered\n     * while parsing the data.\n     * @param fieldMask - A mutable list of field paths encountered while parsing\n     * the data.\n     *\n     * TODO(b/34871131): We don't support array paths right now, so path can be\n     * null to indicate the context represents any location within an array (in\n     * which case certain features will not work and errors will be somewhat\n     * compromised).\n     */\n    constructor(t, e, n, r, s, i) {\n        this.settings = t, this.databaseId = e, this.serializer = n, this.ignoreUndefinedProperties = r, \n        // Minor hack: If fieldTransforms is undefined, we assume this is an\n        // external call and we need to validate the entire path.\n        void 0 === s && this.tt(), this.fieldTransforms = s || [], this.fieldMask = i || [];\n    }\n    get path() {\n        return this.settings.path;\n    }\n    get et() {\n        return this.settings.et;\n    }\n    /** Returns a new context with the specified settings overwritten. */    nt(t) {\n        return new Kn(Object.assign(Object.assign({}, this.settings), t), this.databaseId, this.serializer, this.ignoreUndefinedProperties, this.fieldTransforms, this.fieldMask);\n    }\n    rt(t) {\n        var e;\n        const n = null === (e = this.path) || void 0 === e ? void 0 : e.child(t), r = this.nt({\n            path: n,\n            st: !1\n        });\n        return r.it(t), r;\n    }\n    ot(t) {\n        var e;\n        const n = null === (e = this.path) || void 0 === e ? void 0 : e.child(t), r = this.nt({\n            path: n,\n            st: !1\n        });\n        return r.tt(), r;\n    }\n    ut(t) {\n        // TODO(b/34871131): We don't support array paths right now; so make path\n        // undefined.\n        return this.nt({\n            path: void 0,\n            st: !0\n        });\n    }\n    ct(t) {\n        return wr(t, this.settings.methodName, this.settings.ht || !1, this.path, this.settings.lt);\n    }\n    /** Returns 'true' if 'fieldPath' was traversed when creating this context. */    contains(t) {\n        return void 0 !== this.fieldMask.find((e => t.isPrefixOf(e))) || void 0 !== this.fieldTransforms.find((e => t.isPrefixOf(e.field)));\n    }\n    tt() {\n        // TODO(b/34871131): Remove null check once we have proper paths for fields\n        // within arrays.\n        if (this.path) for (let t = 0; t < this.path.length; t++) this.it(this.path.get(t));\n    }\n    it(t) {\n        if (0 === t.length) throw this.ct(\"Document fields must not be empty\");\n        if (Gn(this.et) && Qn.test(t)) throw this.ct('Document fields cannot begin and end with \"__\"');\n    }\n}\n\n/**\n * Helper for parsing raw user input (provided via the API) into internal model\n * classes.\n */ class Yn {\n    constructor(t, e, n) {\n        this.databaseId = t, this.ignoreUndefinedProperties = e, this.serializer = n || wn(t);\n    }\n    /** Creates a new top-level parse context. */    ft(t, e, n, r = !1) {\n        return new Kn({\n            et: t,\n            methodName: e,\n            lt: n,\n            path: nt.emptyPath(),\n            st: !1,\n            ht: r\n        }, this.databaseId, this.serializer, this.ignoreUndefinedProperties);\n    }\n}\n\nfunction Hn(t) {\n    const e = t._freezeSettings(), n = wn(t._databaseId);\n    return new Yn(t._databaseId, !!e.ignoreUndefinedProperties, n);\n}\n\n/** Parse document data from a set() call. */ function Jn(t, e, n, r, s, i = {}) {\n    const o = t.ft(i.merge || i.mergeFields ? 2 /* UserDataSource.MergeSet */ : 0 /* UserDataSource.Set */ , e, n, s);\n    hr(\"Data must be an object, but it was:\", o, r);\n    const u = cr(r, o);\n    let c, a;\n    if (i.merge) c = new ye(o.fieldMask), a = o.fieldTransforms; else if (i.mergeFields) {\n        const t = [];\n        for (const r of i.mergeFields) {\n            const s = lr(e, r, n);\n            if (!o.contains(s)) throw new U(P, `Field '${s}' is specified in your field mask but missing from your input data.`);\n            mr(t, s) || t.push(s);\n        }\n        c = new ye(t), a = o.fieldTransforms.filter((t => c.covers(t.field)));\n    } else c = null, a = o.fieldTransforms;\n    return new zn(new ge(u), c, a);\n}\n\nclass Xn extends jn {\n    _toFieldTransform(t) {\n        if (2 /* UserDataSource.MergeSet */ !== t.et) throw 1 /* UserDataSource.Update */ === t.et ? t.ct(`${this._methodName}() can only appear at the top level of your update data`) : t.ct(`${this._methodName}() cannot be used with set() unless you pass {merge:true}`);\n        // No transform to add for a delete, but we need to add it to our\n        // fieldMask so it gets deleted.\n        return t.fieldMask.push(t.path), null;\n    }\n    isEqual(t) {\n        return t instanceof Xn;\n    }\n}\n\n/**\n * Creates a child context for parsing SerializableFieldValues.\n *\n * This is different than calling `ParseContext.contextWith` because it keeps\n * the fieldTransforms and fieldMask separate.\n *\n * The created context has its `dataSource` set to `UserDataSource.Argument`.\n * Although these values are used with writes, any elements in these FieldValues\n * are not considered writes since they cannot contain any FieldValue sentinels,\n * etc.\n *\n * @param fieldValue - The sentinel FieldValue for which to create a child\n *     context.\n * @param context - The parent context.\n * @param arrayElement - Whether or not the FieldValue has an array.\n */ function Zn(t, e, n) {\n    return new Kn({\n        et: 3 /* UserDataSource.Argument */ ,\n        lt: e.settings.lt,\n        methodName: t._methodName,\n        st: n\n    }, e.databaseId, e.serializer, e.ignoreUndefinedProperties);\n}\n\nclass tr extends jn {\n    _toFieldTransform(t) {\n        return new Oe(t.path, new Fe);\n    }\n    isEqual(t) {\n        return t instanceof tr;\n    }\n}\n\nclass er extends jn {\n    constructor(t, e) {\n        super(t), this.dt = e;\n    }\n    _toFieldTransform(t) {\n        const e = Zn(this, t, \n        /*array=*/ !0), n = this.dt.map((t => ur(t, e))), r = new xe(n);\n        return new Oe(t.path, r);\n    }\n    isEqual(t) {\n        // TODO(mrschmidt): Implement isEquals\n        return this === t;\n    }\n}\n\nclass nr extends jn {\n    constructor(t, e) {\n        super(t), this.dt = e;\n    }\n    _toFieldTransform(t) {\n        const e = Zn(this, t, \n        /*array=*/ !0), n = this.dt.map((t => ur(t, e))), r = new Se(n);\n        return new Oe(t.path, r);\n    }\n    isEqual(t) {\n        // TODO(mrschmidt): Implement isEquals\n        return this === t;\n    }\n}\n\nclass rr extends jn {\n    constructor(t, e) {\n        super(t), this.wt = e;\n    }\n    _toFieldTransform(t) {\n        const e = new qe(t.serializer, Ne(t.serializer, this.wt));\n        return new Oe(t.path, e);\n    }\n    isEqual(t) {\n        // TODO(mrschmidt): Implement isEquals\n        return this === t;\n    }\n}\n\n/** Parse update data from an update() call. */ function sr(t, e, n, r) {\n    const s = t.ft(1 /* UserDataSource.Update */ , e, n);\n    hr(\"Data must be an object, but it was:\", s, r);\n    const i = [], o = ge.empty();\n    Rt(r, ((t, r) => {\n        const u = dr(e, t, n);\n        // For Compat types, we have to \"extract\" the underlying types before\n        // performing validation.\n                r = l(r);\n        const c = s.ot(u);\n        if (r instanceof Xn) \n        // Add it to the field mask, but don't add anything to updateData.\n        i.push(u); else {\n            const t = ur(r, c);\n            null != t && (i.push(u), o.set(u, t));\n        }\n    }));\n    const u = new ye(i);\n    return new Wn(o, u, s.fieldTransforms);\n}\n\n/** Parse update data from a list of field/value arguments. */ function ir(t, e, n, r, s, i) {\n    const o = t.ft(1 /* UserDataSource.Update */ , e, n), u = [ lr(e, r, n) ], c = [ s ];\n    if (i.length % 2 != 0) throw new U(P, `Function ${e}() needs to be called with an even number of arguments that alternate between field names and values.`);\n    for (let t = 0; t < i.length; t += 2) u.push(lr(e, i[t])), c.push(i[t + 1]);\n    const a = [], h = ge.empty();\n    // We iterate in reverse order to pick the last value for a field if the\n    // user specified the field multiple times.\n    for (let t = u.length - 1; t >= 0; --t) if (!mr(a, u[t])) {\n        const e = u[t];\n        let n = c[t];\n        // For Compat types, we have to \"extract\" the underlying types before\n        // performing validation.\n                n = l(n);\n        const r = o.ot(e);\n        if (n instanceof Xn) \n        // Add it to the field mask, but don't add anything to updateData.\n        a.push(e); else {\n            const t = ur(n, r);\n            null != t && (a.push(e), h.set(e, t));\n        }\n    }\n    const f = new ye(a);\n    return new Wn(h, f, o.fieldTransforms);\n}\n\n/**\n * Parse a \"query value\" (e.g. value in a where filter or a value in a cursor\n * bound).\n *\n * @param allowArrays - Whether the query value is an array that may directly\n * contain additional arrays (e.g. the operand of an `in` query).\n */ function or(t, e, n, r = !1) {\n    return ur(n, t.ft(r ? 4 /* UserDataSource.ArrayArgument */ : 3 /* UserDataSource.Argument */ , e));\n}\n\n/**\n * Parses user data to Protobuf Values.\n *\n * @param input - Data to be parsed.\n * @param context - A context object representing the current path being parsed,\n * the source of the data being parsed, etc.\n * @returns The parsed value, or null if the value was a FieldValue sentinel\n * that should not be included in the resulting parsed data.\n */ function ur(t, e) {\n    if (ar(\n    // Unwrap the API type from the Compat SDK. This will return the API type\n    // from firestore-exp.\n    t = l(t))) return hr(\"Unsupported field value:\", e, t), cr(t, e);\n    if (t instanceof jn) \n    // FieldValues usually parse into transforms (except deleteField())\n    // in which case we do not want to include this field in our parsed data\n    // (as doing so will overwrite the field directly prior to the transform\n    // trying to transform it). So we don't add this location to\n    // context.fieldMask and we return null as our parsing result.\n    /**\n * \"Parses\" the provided FieldValueImpl, adding any necessary transforms to\n * context.fieldTransforms.\n */\n    return function(t, e) {\n        // Sentinels are only supported with writes, and not within arrays.\n        if (!Gn(e.et)) throw e.ct(`${t._methodName}() can only be used with update() and set()`);\n        if (!e.path) throw e.ct(`${t._methodName}() is not currently supported inside arrays`);\n        const n = t._toFieldTransform(e);\n        n && e.fieldTransforms.push(n);\n    }\n    /**\n * Helper to parse a scalar value (i.e. not an Object, Array, or FieldValue)\n *\n * @returns The parsed value\n */ (t, e), null;\n    if (void 0 === t && e.ignoreUndefinedProperties) \n    // If the input is undefined it can never participate in the fieldMask, so\n    // don't handle this below. If `ignoreUndefinedProperties` is false,\n    // `parseScalarValue` will reject an undefined value.\n    return null;\n    if (\n    // If context.path is null we are inside an array and we don't support\n    // field mask paths more granular than the top-level array.\n    e.path && e.fieldMask.push(e.path), t instanceof Array) {\n        // TODO(b/34871131): Include the path containing the array in the error\n        // message.\n        // In the case of IN queries, the parsed data is an array (representing\n        // the set of values to be included for the IN query) that may directly\n        // contain additional arrays (each representing an individual field\n        // value), so we disable this validation.\n        if (e.settings.st && 4 /* UserDataSource.ArrayArgument */ !== e.et) throw e.ct(\"Nested arrays are not supported\");\n        return function(t, e) {\n            const n = [];\n            let r = 0;\n            for (const s of t) {\n                let t = ur(s, e.ut(r));\n                null == t && (\n                // Just include nulls in the array for fields being replaced with a\n                // sentinel.\n                t = {\n                    nullValue: \"NULL_VALUE\"\n                }), n.push(t), r++;\n            }\n            return {\n                arrayValue: {\n                    values: n\n                }\n            };\n        }(t, e);\n    }\n    return function(t, e) {\n        if (null === (t = l(t))) return {\n            nullValue: \"NULL_VALUE\"\n        };\n        if (\"number\" == typeof t) return Ne(e.serializer, t);\n        if (\"boolean\" == typeof t) return {\n            booleanValue: t\n        };\n        if (\"string\" == typeof t) return {\n            stringValue: t\n        };\n        if (t instanceof Date) {\n            const n = xt.fromDate(t);\n            return {\n                timestampValue: Ge(e.serializer, n)\n            };\n        }\n        if (t instanceof xt) {\n            // Firestore backend truncates precision down to microseconds. To ensure\n            // offline mode works the same with regards to truncation, perform the\n            // truncation immediately without waiting for the backend to do that.\n            const n = new xt(t.seconds, 1e3 * Math.floor(t.nanoseconds / 1e3));\n            return {\n                timestampValue: Ge(e.serializer, n)\n            };\n        }\n        if (t instanceof Bn) return {\n            geoPointValue: {\n                latitude: t.latitude,\n                longitude: t.longitude\n            }\n        };\n        if (t instanceof Mn) return {\n            bytesValue: Ke(e.serializer, t._byteString)\n        };\n        if (t instanceof Dn) {\n            const n = e.databaseId, r = t.firestore._databaseId;\n            if (!r.isEqual(n)) throw e.ct(`Document reference is for database ${r.projectId}/${r.database} but should be for database ${n.projectId}/${n.database}`);\n            return {\n                referenceValue: Je(t.firestore._databaseId || e.databaseId, t._key.path)\n            };\n        }\n        throw e.ct(`Unsupported field value: ${ut(t)}`);\n    }\n    /**\n * Checks whether an object looks like a JSON object that should be converted\n * into a struct. Normal class/prototype instances are considered to look like\n * JSON objects since they should be converted to a struct value. Arrays, Dates,\n * GeoPoints, etc. are not considered to look like JSON objects since they map\n * to specific FieldValue types other than ObjectValue.\n */ (t, e);\n}\n\nfunction cr(t, e) {\n    const n = {};\n    return !function(t) {\n        for (const e in t) if (Object.prototype.hasOwnProperty.call(t, e)) return !1;\n        return !0;\n    }(t) ? Rt(t, ((t, r) => {\n        const s = ur(r, e.rt(t));\n        null != s && (n[t] = s);\n    })) : \n    // If we encounter an empty object, we explicitly add it to the update\n    // mask to ensure that the server creates a map entry.\n    e.path && e.path.length > 0 && e.fieldMask.push(e.path), {\n        mapValue: {\n            fields: n\n        }\n    };\n}\n\nfunction ar(t) {\n    return !(\"object\" != typeof t || null === t || t instanceof Array || t instanceof Date || t instanceof xt || t instanceof Bn || t instanceof Mn || t instanceof Dn || t instanceof jn);\n}\n\nfunction hr(t, e, n) {\n    if (!ar(n) || !function(t) {\n        return \"object\" == typeof t && null !== t && (Object.getPrototypeOf(t) === Object.prototype || null === Object.getPrototypeOf(t));\n    }(n)) {\n        const r = ut(n);\n        throw \"an object\" === r ? e.ct(t + \" a custom object\") : e.ct(t + \" \" + r);\n    }\n}\n\n/**\n * Helper that calls fromDotSeparatedString() but wraps any error thrown.\n */ function lr(t, e, n) {\n    if ((\n    // If required, replace the FieldPath Compat class with with the firestore-exp\n    // FieldPath.\n    e = l(e)) instanceof Ln) return e._internalPath;\n    if (\"string\" == typeof e) return dr(t, e);\n    throw wr(\"Field path arguments must be of type string or \", t, \n    /* hasConverter= */ !1, \n    /* path= */ void 0, n);\n}\n\n/**\n * Matches any characters in a field path string that are reserved.\n */ const fr = new RegExp(\"[~\\\\*/\\\\[\\\\]]\");\n\n/**\n * Wraps fromDotSeparatedString with an error message about the method that\n * was thrown.\n * @param methodName - The publicly visible method name\n * @param path - The dot-separated string form of a field path which will be\n * split on dots.\n * @param targetDoc - The document against which the field path will be\n * evaluated.\n */ function dr(t, e, n) {\n    if (e.search(fr) >= 0) throw wr(`Invalid field path (${e}). Paths must not contain '~', '*', '/', '[', or ']'`, t, \n    /* hasConverter= */ !1, \n    /* path= */ void 0, n);\n    try {\n        return new Ln(...e.split(\".\"))._internalPath;\n    } catch (r) {\n        throw wr(`Invalid field path (${e}). Paths must not be empty, begin with '.', end with '.', or contain '..'`, t, \n        /* hasConverter= */ !1, \n        /* path= */ void 0, n);\n    }\n}\n\nfunction wr(t, e, n, r, s) {\n    const i = r && !r.isEmpty(), o = void 0 !== s;\n    let u = `Function ${e}() called with invalid data`;\n    n && (u += \" (via `toFirestore()`)\"), u += \". \";\n    let c = \"\";\n    return (i || o) && (c += \" (found\", i && (c += ` in field ${r}`), o && (c += ` in document ${s}`), \n    c += \")\"), new U(P, u + t + c);\n}\n\n/** Checks `haystack` if FieldPath `needle` is present. Runs in O(n). */ function mr(t, e) {\n    return t.some((t => t.isEqual(e)));\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A `DocumentSnapshot` contains data read from a document in your Firestore\n * database. The data can be extracted with `.data()` or `.get(<field>)` to\n * get a specific field.\n *\n * For a `DocumentSnapshot` that points to a non-existing document, any data\n * access will return 'undefined'. You can use the `exists()` method to\n * explicitly verify a document's existence.\n */ class pr {\n    // Note: This class is stripped down version of the DocumentSnapshot in\n    // the legacy SDK. The changes are:\n    // - No support for SnapshotMetadata.\n    // - No support for SnapshotOptions.\n    /** @hideconstructor protected */\n    constructor(t, e, n, r, s) {\n        this._firestore = t, this._userDataWriter = e, this._key = n, this._document = r, \n        this._converter = s;\n    }\n    /** Property of the `DocumentSnapshot` that provides the document's ID. */    get id() {\n        return this._key.path.lastSegment();\n    }\n    /**\n     * The `DocumentReference` for the document included in the `DocumentSnapshot`.\n     */    get ref() {\n        return new Dn(this._firestore, this._converter, this._key);\n    }\n    /**\n     * Signals whether or not the document at the snapshot's location exists.\n     *\n     * @returns true if the document exists.\n     */    exists() {\n        return null !== this._document;\n    }\n    /**\n     * Retrieves all fields in the document as an `Object`. Returns `undefined` if\n     * the document doesn't exist.\n     *\n     * @returns An `Object` containing all fields in the document or `undefined`\n     * if the document doesn't exist.\n     */    data() {\n        if (this._document) {\n            if (this._converter) {\n                // We only want to use the converter and create a new DocumentSnapshot\n                // if a converter has been provided.\n                const t = new yr(this._firestore, this._userDataWriter, this._key, this._document, \n                /* converter= */ null);\n                return this._converter.fromFirestore(t);\n            }\n            return this._userDataWriter.convertValue(this._document.data.value);\n        }\n    }\n    /**\n     * Retrieves the field specified by `fieldPath`. Returns `undefined` if the\n     * document or field doesn't exist.\n     *\n     * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific\n     * field.\n     * @returns The data at the specified field location or undefined if no such\n     * field exists in the document.\n     */\n    // We are using `any` here to avoid an explicit cast by our users.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    get(t) {\n        if (this._document) {\n            const e = this._document.data.field(vr(\"DocumentSnapshot.get\", t));\n            if (null !== e) return this._userDataWriter.convertValue(e);\n        }\n    }\n}\n\n/**\n * A `QueryDocumentSnapshot` contains data read from a document in your\n * Firestore database as part of a query. The document is guaranteed to exist\n * and its data can be extracted with `.data()` or `.get(<field>)` to get a\n * specific field.\n *\n * A `QueryDocumentSnapshot` offers the same API surface as a\n * `DocumentSnapshot`. Since query results contain only existing documents, the\n * `exists` property will always be true and `data()` will never return\n * 'undefined'.\n */ class yr extends pr {\n    /**\n     * Retrieves all fields in the document as an `Object`.\n     *\n     * @override\n     * @returns An `Object` containing all fields in the document.\n     */\n    data() {\n        return super.data();\n    }\n}\n\n/**\n * A `QuerySnapshot` contains zero or more `DocumentSnapshot` objects\n * representing the results of a query. The documents can be accessed as an\n * array via the `docs` property or enumerated using the `forEach` method. The\n * number of documents can be determined via the `empty` and `size`\n * properties.\n */ class gr {\n    /** @hideconstructor */\n    constructor(t, e) {\n        this._docs = e, this.query = t;\n    }\n    /** An array of all the documents in the `QuerySnapshot`. */    get docs() {\n        return [ ...this._docs ];\n    }\n    /** The number of documents in the `QuerySnapshot`. */    get size() {\n        return this.docs.length;\n    }\n    /** True if there are no documents in the `QuerySnapshot`. */    get empty() {\n        return 0 === this.docs.length;\n    }\n    /**\n     * Enumerates all of the documents in the `QuerySnapshot`.\n     *\n     * @param callback - A callback to be called with a `QueryDocumentSnapshot` for\n     * each document in the snapshot.\n     * @param thisArg - The `this` binding for the callback.\n     */    forEach(t, e) {\n        this._docs.forEach(t, e);\n    }\n}\n\n/**\n * Returns true if the provided snapshots are equal.\n *\n * @param left - A snapshot to compare.\n * @param right - A snapshot to compare.\n * @returns true if the snapshots are equal.\n */ function _r(t, e) {\n    return t = l(t), e = l(e), t instanceof pr && e instanceof pr ? t._firestore === e._firestore && t._key.isEqual(e._key) && (null === t._document ? null === e._document : t._document.isEqual(e._document)) && t._converter === e._converter : t instanceof gr && e instanceof gr && (Cn(t.query, e.query) && Tt(t.docs, e.docs, _r));\n}\n\n/**\n * Helper that calls `fromDotSeparatedString()` but wraps any error thrown.\n */ function vr(t, e) {\n    return \"string\" == typeof e ? dr(t, e) : e instanceof Ln ? e._internalPath : e._delegate._internalPath;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An `AppliableConstraint` is an abstraction of a constraint that can be applied\n * to a Firestore query.\n */\nclass br {}\n\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Firestore query. `QueryConstraint`s are created by invoking {@link where},\n * {@link orderBy}, {@link (startAt:1)}, {@link (startAfter:1)}, {@link\n * (endBefore:1)}, {@link (endAt:1)}, {@link limit}, {@link limitToLast} and\n * can then be passed to {@link (query:1)} to create a new query instance that\n * also contains this `QueryConstraint`.\n */ class Er extends br {}\n\nfunction Ir(t, e, ...n) {\n    let r = [];\n    e instanceof br && r.push(e), r = r.concat(n), function(t) {\n        const e = t.filter((t => t instanceof Rr)).length, n = t.filter((t => t instanceof Tr)).length;\n        if (e > 1 || e > 0 && n > 0) throw new U(P, \"InvalidQuery. When using composite filters, you cannot use more than one filter at the top level. Consider nesting the multiple filters within an `and(...)` statement. For example: change `query(query, where(...), or(...))` to `query(query, and(where(...), or(...)))`.\");\n    }\n    /**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n    /**\n * Converts Firestore's internal types to the JavaScript types that we expose\n * to the user.\n *\n * @internal\n */ (r);\n    for (const e of r) t = e._apply(t);\n    return t;\n}\n\n/**\n * A `QueryFieldFilterConstraint` is used to narrow the set of documents returned by\n * a Firestore query by filtering on one or more document fields.\n * `QueryFieldFilterConstraint`s are created by invoking {@link where} and can then\n * be passed to {@link (query:1)} to create a new query instance that also contains\n * this `QueryFieldFilterConstraint`.\n */ class Tr extends Er {\n    /**\n     * @internal\n     */\n    constructor(t, e, n) {\n        super(), this._field = t, this._op = e, this._value = n, \n        /** The type of this query constraint */\n        this.type = \"where\";\n    }\n    static _create(t, e, n) {\n        return new Tr(t, e, n);\n    }\n    _apply(t) {\n        const e = this._parse(t);\n        return Br(t._query, e), new Fn(t.firestore, t.converter, Ve(t._query, e));\n    }\n    _parse(t) {\n        const e = Hn(t.firestore), n = function(t, e, n, r, s, i, o) {\n            let u;\n            if (s.isKeyField()) {\n                if (\"array-contains\" /* Operator.ARRAY_CONTAINS */ === i || \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */ === i) throw new U(P, `Invalid Query. You can't perform '${i}' queries on documentId().`);\n                if (\"in\" /* Operator.IN */ === i || \"not-in\" /* Operator.NOT_IN */ === i) {\n                    jr(o, i);\n                    const e = [];\n                    for (const n of o) e.push(Ur(r, t, n));\n                    u = {\n                        arrayValue: {\n                            values: e\n                        }\n                    };\n                } else u = Ur(r, t, o);\n            } else \"in\" /* Operator.IN */ !== i && \"not-in\" /* Operator.NOT_IN */ !== i && \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */ !== i || jr(o, i), \n            u = or(n, e, o, \n            /* allowArrays= */ \"in\" /* Operator.IN */ === i || \"not-in\" /* Operator.NOT_IN */ === i);\n            return Xt.create(s, i, u);\n        }(t._query, \"where\", e, t.firestore._databaseId, this._field, this._op, this._value);\n        return n;\n    }\n}\n\n/**\n * Creates a {@link QueryFieldFilterConstraint} that enforces that documents\n * must contain the specified field and that the value should satisfy the\n * relation constraint provided.\n *\n * @param fieldPath - The path to compare\n * @param opStr - The operation string (e.g \"&lt;\", \"&lt;=\", \"==\", \"&lt;\",\n *   \"&lt;=\", \"!=\").\n * @param value - The value for comparison\n * @returns The created {@link QueryFieldFilterConstraint}.\n */ function Ar(t, e, n) {\n    const r = e, s = vr(\"where\", t);\n    return Tr._create(s, r, n);\n}\n\n/**\n * A `QueryCompositeFilterConstraint` is used to narrow the set of documents\n * returned by a Firestore query by performing the logical OR or AND of multiple\n * {@link QueryFieldFilterConstraint}s or {@link QueryCompositeFilterConstraint}s.\n * `QueryCompositeFilterConstraint`s are created by invoking {@link or} or\n * {@link and} and can then be passed to {@link (query:1)} to create a new query\n * instance that also contains the `QueryCompositeFilterConstraint`.\n */ class Rr extends br {\n    /**\n     * @internal\n     */\n    constructor(\n    /** The type of this query constraint */\n    t, e) {\n        super(), this.type = t, this._queryConstraints = e;\n    }\n    static _create(t, e) {\n        return new Rr(t, e);\n    }\n    _parse(t) {\n        const e = this._queryConstraints.map((e => e._parse(t))).filter((t => t.getFilters().length > 0));\n        return 1 === e.length ? e[0] : Zt.create(e, this._getOperator());\n    }\n    _apply(t) {\n        const e = this._parse(t);\n        return 0 === e.getFilters().length ? t : (function(t, e) {\n            let n = t;\n            const r = e.getFlattenedFilters();\n            for (const t of r) Br(n, t), n = Ve(n, t);\n        }\n        // Checks if any of the provided filter operators are included in the given list of filters and\n        // returns the first one that is, or null if none are.\n        (t._query, e), new Fn(t.firestore, t.converter, Ve(t._query, e)));\n    }\n    _getQueryConstraints() {\n        return this._queryConstraints;\n    }\n    _getOperator() {\n        return \"and\" === this.type ? \"and\" /* CompositeOperator.AND */ : \"or\" /* CompositeOperator.OR */;\n    }\n}\n\n/**\n * Creates a new {@link QueryCompositeFilterConstraint} that is a disjunction of\n * the given filter constraints. A disjunction filter includes a document if it\n * satisfies any of the given filters.\n *\n * @param queryConstraints - Optional. The list of\n * {@link QueryFilterConstraint}s to perform a disjunction for. These must be\n * created with calls to {@link where}, {@link or}, or {@link and}.\n * @returns The newly created {@link QueryCompositeFilterConstraint}.\n */ function Pr(...t) {\n    // Only support QueryFilterConstraints\n    return t.forEach((t => zr(\"or\", t))), Rr._create(\"or\" /* CompositeOperator.OR */ , t);\n}\n\n/**\n * Creates a new {@link QueryCompositeFilterConstraint} that is a conjunction of\n * the given filter constraints. A conjunction filter includes a document if it\n * satisfies all of the given filters.\n *\n * @param queryConstraints - Optional. The list of\n * {@link QueryFilterConstraint}s to perform a conjunction for. These must be\n * created with calls to {@link where}, {@link or}, or {@link and}.\n * @returns The newly created {@link QueryCompositeFilterConstraint}.\n */ function Vr(...t) {\n    // Only support QueryFilterConstraints\n    return t.forEach((t => zr(\"and\", t))), Rr._create(\"and\" /* CompositeOperator.AND */ , t);\n}\n\n/**\n * A `QueryOrderByConstraint` is used to sort the set of documents returned by a\n * Firestore query. `QueryOrderByConstraint`s are created by invoking\n * {@link orderBy} and can then be passed to {@link (query:1)} to create a new query\n * instance that also contains this `QueryOrderByConstraint`.\n *\n * Note: Documents that do not contain the orderBy field will not be present in\n * the query result.\n */ class $r extends Er {\n    /**\n     * @internal\n     */\n    constructor(t, e) {\n        super(), this._field = t, this._direction = e, \n        /** The type of this query constraint */\n        this.type = \"orderBy\";\n    }\n    static _create(t, e) {\n        return new $r(t, e);\n    }\n    _apply(t) {\n        const e = function(t, e, n) {\n            if (null !== t.startAt) throw new U(P, \"Invalid query. You must not call startAt() or startAfter() before calling orderBy().\");\n            if (null !== t.endAt) throw new U(P, \"Invalid query. You must not call endAt() or endBefore() before calling orderBy().\");\n            const r = new ae(e, n);\n            return function(t, e) {\n                if (null === Ie(t)) {\n                    // This is the first order by. It must match any inequality.\n                    const n = Te(t);\n                    null !== n && Qr(t, n, e.field);\n                }\n            }(t, r), r;\n        }\n        /**\n * Create a `Bound` from a query and a document.\n *\n * Note that the `Bound` will always include the key of the document\n * and so only the provided document will compare equal to the returned\n * position.\n *\n * Will throw if the document does not contain all fields of the order by\n * of the query or if any of the fields in the order by are an uncommitted\n * server timestamp.\n */ (t._query, this._field, this._direction);\n        return new Fn(t.firestore, t.converter, function(t, e) {\n            // TODO(dimond): validate that orderBy does not list the same key twice.\n            const n = t.explicitOrderBy.concat([ e ]);\n            return new Ee(t.path, t.collectionGroup, n, t.filters.slice(), t.limit, t.limitType, t.startAt, t.endAt);\n        }(t._query, e));\n    }\n}\n\n/**\n * Creates a {@link QueryOrderByConstraint} that sorts the query result by the\n * specified field, optionally in descending order instead of ascending.\n *\n * Note: Documents that do not contain the specified field will not be present\n * in the query result.\n *\n * @param fieldPath - The field to sort by.\n * @param directionStr - Optional direction to sort by ('asc' or 'desc'). If\n * not specified, order will be ascending.\n * @returns The created {@link QueryOrderByConstraint}.\n */ function Nr(t, e = \"asc\") {\n    const n = e, r = vr(\"orderBy\", t);\n    return $r._create(r, n);\n}\n\n/**\n * A `QueryLimitConstraint` is used to limit the number of documents returned by\n * a Firestore query.\n * `QueryLimitConstraint`s are created by invoking {@link limit} or\n * {@link limitToLast} and can then be passed to {@link (query:1)} to create a new\n * query instance that also contains this `QueryLimitConstraint`.\n */ class Dr extends Er {\n    /**\n     * @internal\n     */\n    constructor(\n    /** The type of this query constraint */\n    t, e, n) {\n        super(), this.type = t, this._limit = e, this._limitType = n;\n    }\n    static _create(t, e, n) {\n        return new Dr(t, e, n);\n    }\n    _apply(t) {\n        return new Fn(t.firestore, t.converter, function(t, e, n) {\n            return new Ee(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), e, n, t.startAt, t.endAt);\n        }(t._query, this._limit, this._limitType));\n    }\n}\n\n/**\n * Creates a {@link QueryLimitConstraint} that only returns the first matching\n * documents.\n *\n * @param limit - The maximum number of items to return.\n * @returns The created {@link QueryLimitConstraint}.\n */ function Fr(t) {\n    return at(\"limit\", t), Dr._create(\"limit\", t, \"F\" /* LimitType.First */);\n}\n\n/**\n * Creates a {@link QueryLimitConstraint} that only returns the last matching\n * documents.\n *\n * You must specify at least one `orderBy` clause for `limitToLast` queries,\n * otherwise an exception will be thrown during execution.\n *\n * @param limit - The maximum number of items to return.\n * @returns The created {@link QueryLimitConstraint}.\n */ function xr(t) {\n    return at(\"limitToLast\", t), Dr._create(\"limitToLast\", t, \"L\" /* LimitType.Last */);\n}\n\n/**\n * A `QueryStartAtConstraint` is used to exclude documents from the start of a\n * result set returned by a Firestore query.\n * `QueryStartAtConstraint`s are created by invoking {@link (startAt:1)} or\n * {@link (startAfter:1)} and can then be passed to {@link (query:1)} to create a\n * new query instance that also contains this `QueryStartAtConstraint`.\n */ class Sr extends Er {\n    /**\n     * @internal\n     */\n    constructor(\n    /** The type of this query constraint */\n    t, e, n) {\n        super(), this.type = t, this._docOrFields = e, this._inclusive = n;\n    }\n    static _create(t, e, n) {\n        return new Sr(t, e, n);\n    }\n    _apply(t) {\n        const e = Lr(t, this.type, this._docOrFields, this._inclusive);\n        return new Fn(t.firestore, t.converter, function(t, e) {\n            return new Ee(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), t.limit, t.limitType, e, t.endAt);\n        }(t._query, e));\n    }\n}\n\nfunction qr(...t) {\n    return Sr._create(\"startAt\", t, \n    /*inclusive=*/ !0);\n}\n\nfunction Or(...t) {\n    return Sr._create(\"startAfter\", t, \n    /*inclusive=*/ !1);\n}\n\n/**\n * A `QueryEndAtConstraint` is used to exclude documents from the end of a\n * result set returned by a Firestore query.\n * `QueryEndAtConstraint`s are created by invoking {@link (endAt:1)} or\n * {@link (endBefore:1)} and can then be passed to {@link (query:1)} to create a new\n * query instance that also contains this `QueryEndAtConstraint`.\n */ class kr extends Er {\n    /**\n     * @internal\n     */\n    constructor(\n    /** The type of this query constraint */\n    t, e, n) {\n        super(), this.type = t, this._docOrFields = e, this._inclusive = n;\n    }\n    static _create(t, e, n) {\n        return new kr(t, e, n);\n    }\n    _apply(t) {\n        const e = Lr(t, this.type, this._docOrFields, this._inclusive);\n        return new Fn(t.firestore, t.converter, function(t, e) {\n            return new Ee(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), t.limit, t.limitType, t.startAt, e);\n        }(t._query, e));\n    }\n}\n\nfunction Cr(...t) {\n    return kr._create(\"endBefore\", t, \n    /*inclusive=*/ !1);\n}\n\nfunction Mr(...t) {\n    return kr._create(\"endAt\", t, \n    /*inclusive=*/ !0);\n}\n\n/** Helper function to create a bound from a document or fields */ function Lr(t, e, n, r) {\n    if (n[0] = l(n[0]), n[0] instanceof pr) return function(t, e, n, r, s) {\n        if (!r) throw new U($, `Can't use a DocumentSnapshot that doesn't exist for ${n}().`);\n        const i = [];\n        // Because people expect to continue/end a query at the exact document\n        // provided, we need to use the implicit sort order rather than the explicit\n        // sort order, because it's guaranteed to contain the document key. That way\n        // the position becomes unambiguous and the query continues/ends exactly at\n        // the provided document. Without the key (by using the explicit sort\n        // orders), multiple documents could match the position, yielding duplicate\n        // results.\n                for (const n of Re(t)) if (n.field.isKeyField()) i.push(Bt(e, r.key)); else {\n            const t = r.data.field(n.field);\n            if (St(t)) throw new U(P, 'Invalid query. You are trying to start or end a query using a document for which the field \"' + n.field + '\" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');\n            if (null === t) {\n                const t = n.field.canonicalString();\n                throw new U(P, `Invalid query. You are trying to start or end a query using a document for which the field '${t}' (used as the orderBy) does not exist.`);\n            }\n            i.push(t);\n        }\n        return new Yt(i, s);\n    }\n    /**\n * Converts a list of field values to a `Bound` for the given query.\n */ (t._query, t.firestore._databaseId, e, n[0]._document, r);\n    {\n        const s = Hn(t.firestore);\n        return function(t, e, n, r, s, i) {\n            // Use explicit order by's because it has to match the query the user made\n            const o = t.explicitOrderBy;\n            if (s.length > o.length) throw new U(P, `Too many arguments provided to ${r}(). The number of arguments must be less than or equal to the number of orderBy() clauses`);\n            const u = [];\n            for (let i = 0; i < s.length; i++) {\n                const c = s[i];\n                if (o[i].field.isKeyField()) {\n                    if (\"string\" != typeof c) throw new U(P, `Invalid query. Expected a string for document ID in ${r}(), but got a ${typeof c}`);\n                    if (!Ae(t) && -1 !== c.indexOf(\"/\")) throw new U(P, `Invalid query. When querying a collection and ordering by documentId(), the value passed to ${r}() must be a plain document ID, but '${c}' contains a slash.`);\n                    const n = t.path.child(tt.fromString(c));\n                    if (!rt.isDocumentKey(n)) throw new U(P, `Invalid query. When querying a collection group and ordering by documentId(), the value passed to ${r}() must result in a valid document path, but '${n}' is not because it contains an odd number of segments.`);\n                    const s = new rt(n);\n                    u.push(Bt(e, s));\n                } else {\n                    const t = or(n, r, c);\n                    u.push(t);\n                }\n            }\n            return new Yt(u, i);\n        }\n        /**\n * Parses the given `documentIdValue` into a `ReferenceValue`, throwing\n * appropriate errors if the value is anything other than a `DocumentReference`\n * or `string`, or if the string is malformed.\n */ (t._query, t.firestore._databaseId, s, e, n, r);\n    }\n}\n\nfunction Ur(t, e, n) {\n    if (\"string\" == typeof (n = l(n))) {\n        if (\"\" === n) throw new U(P, \"Invalid query. When querying with documentId(), you must provide a valid document ID, but it was an empty string.\");\n        if (!Ae(e) && -1 !== n.indexOf(\"/\")) throw new U(P, `Invalid query. When querying a collection by documentId(), you must provide a plain document ID, but '${n}' contains a '/' character.`);\n        const r = e.path.child(tt.fromString(n));\n        if (!rt.isDocumentKey(r)) throw new U(P, `Invalid query. When querying a collection group by documentId(), the value provided must result in a valid document path, but '${r}' is not because it has an odd number of segments (${r.length}).`);\n        return Bt(t, new rt(r));\n    }\n    if (n instanceof Dn) return Bt(t, n._key);\n    throw new U(P, `Invalid query. When querying with documentId(), you must provide a valid string or a DocumentReference, but it was: ${ut(n)}.`);\n}\n\n/**\n * Validates that the value passed into a disjunctive filter satisfies all\n * array requirements.\n */ function jr(t, e) {\n    if (!Array.isArray(t) || 0 === t.length) throw new U(P, `Invalid Query. A non-empty array is required for '${e.toString()}' filters.`);\n}\n\n/**\n * Given an operator, returns the set of operators that cannot be used with it.\n *\n * This is not a comprehensive check, and this function should be removed in the\n * long term. Validations should occur in the Firestore backend.\n *\n * Operators in a query must adhere to the following set of rules:\n * 1. Only one inequality per query.\n * 2. `NOT_IN` cannot be used with array, disjunctive, or `NOT_EQUAL` operators.\n */ function Br(t, e) {\n    if (e.isInequality()) {\n        const n = Te(t), r = e.field;\n        if (null !== n && !n.isEqual(r)) throw new U(P, `Invalid query. All where filters with an inequality (<, <=, !=, not-in, >, or >=) must be on the same field. But you have inequality filters on '${n.toString()}' and '${r.toString()}'`);\n        const s = Ie(t);\n        null !== s && Qr(t, r, s);\n    }\n    const n = function(t, e) {\n        for (const n of t) for (const t of n.getFlattenedFilters()) if (e.indexOf(t.op) >= 0) return t.op;\n        return null;\n    }(t.filters, function(t) {\n        switch (t) {\n          case \"!=\" /* Operator.NOT_EQUAL */ :\n            return [ \"!=\" /* Operator.NOT_EQUAL */ , \"not-in\" /* Operator.NOT_IN */ ];\n\n          case \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */ :\n          case \"in\" /* Operator.IN */ :\n            return [ \"not-in\" /* Operator.NOT_IN */ ];\n\n          case \"not-in\" /* Operator.NOT_IN */ :\n            return [ \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */ , \"in\" /* Operator.IN */ , \"not-in\" /* Operator.NOT_IN */ , \"!=\" /* Operator.NOT_EQUAL */ ];\n\n          default:\n            return [];\n        }\n    }(e.op));\n    if (null !== n) \n    // Special case when it's a duplicate op to give a slightly clearer error message.\n    throw n === e.op ? new U(P, `Invalid query. You cannot use more than one '${e.op.toString()}' filter.`) : new U(P, `Invalid query. You cannot use '${e.op.toString()}' filters with '${n.toString()}' filters.`);\n}\n\nfunction Qr(t, e, n) {\n    if (!n.isEqual(e)) throw new U(P, `Invalid query. You have a where filter with an inequality (<, <=, !=, not-in, >, or >=) on field '${e.toString()}' and so you must also use '${e.toString()}' as your first argument to orderBy(), but your first orderBy() is on field '${n.toString()}' instead.`);\n}\n\nfunction zr(t, e) {\n    if (!(e instanceof Tr || e instanceof Rr)) throw new U(P, `Function ${t}() requires AppliableConstraints created with a call to 'where(...)', 'or(...)', or 'and(...)'.`);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Converts custom model object of type T into `DocumentData` by applying the\n * converter if it exists.\n *\n * This function is used when converting user objects to `DocumentData`\n * because we want to provide the user with a more specific error message if\n * their `set()` or fails due to invalid data originating from a `toFirestore()`\n * call.\n */\nfunction Wr(t, e, n) {\n    let r;\n    // Cast to `any` in order to satisfy the union type constraint on\n    // toFirestore().\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return r = t ? n && (n.merge || n.mergeFields) ? t.toFirestore(e, n) : t.toFirestore(e) : e, \n    r;\n}\n\nclass Gr extends class {\n    convertValue(t, e = \"none\") {\n        switch (Ct(t)) {\n          case 0 /* TypeOrder.NullValue */ :\n            return null;\n\n          case 1 /* TypeOrder.BooleanValue */ :\n            return t.booleanValue;\n\n          case 2 /* TypeOrder.NumberValue */ :\n            return Dt(t.integerValue || t.doubleValue);\n\n          case 3 /* TypeOrder.TimestampValue */ :\n            return this.convertTimestamp(t.timestampValue);\n\n          case 4 /* TypeOrder.ServerTimestampValue */ :\n            return this.convertServerTimestamp(t, e);\n\n          case 5 /* TypeOrder.StringValue */ :\n            return t.stringValue;\n\n          case 6 /* TypeOrder.BlobValue */ :\n            return this.convertBytes(Ft(t.bytesValue));\n\n          case 7 /* TypeOrder.RefValue */ :\n            return this.convertReference(t.referenceValue);\n\n          case 8 /* TypeOrder.GeoPointValue */ :\n            return this.convertGeoPoint(t.geoPointValue);\n\n          case 9 /* TypeOrder.ArrayValue */ :\n            return this.convertArray(t.arrayValue, e);\n\n          case 10 /* TypeOrder.ObjectValue */ :\n            return this.convertObject(t.mapValue, e);\n\n          default:\n            throw b();\n        }\n    }\n    convertObject(t, e) {\n        return this.convertObjectMap(t.fields, e);\n    }\n    /**\n     * @internal\n     */    convertObjectMap(t, e = \"none\") {\n        const n = {};\n        return Rt(t, ((t, r) => {\n            n[t] = this.convertValue(r, e);\n        })), n;\n    }\n    convertGeoPoint(t) {\n        return new Bn(Dt(t.latitude), Dt(t.longitude));\n    }\n    convertArray(t, e) {\n        return (t.values || []).map((t => this.convertValue(t, e)));\n    }\n    convertServerTimestamp(t, e) {\n        switch (e) {\n          case \"previous\":\n            const n = qt(t);\n            return null == n ? null : this.convertValue(n, e);\n\n          case \"estimate\":\n            return this.convertTimestamp(Ot(t));\n\n          default:\n            return null;\n        }\n    }\n    convertTimestamp(t) {\n        const e = Nt(t);\n        return new xt(e.seconds, e.nanos);\n    }\n    convertDocumentKey(t, e) {\n        const n = tt.fromString(t);\n        E(dn(n));\n        const r = new X(n.get(1), n.get(3)), s = new rt(n.popFirst(5));\n        return r.isEqual(e) || \n        // TODO(b/64130202): Somehow support foreign references.\n        g(`Document ${s} contains a document reference within a different database (${r.projectId}/${r.database}) which is not supported. It will be treated as a reference in the current database (${e.projectId}/${e.database}) instead.`), \n        s;\n    }\n} {\n    constructor(t) {\n        super(), this.firestore = t;\n    }\n    convertBytes(t) {\n        return new Mn(t);\n    }\n    convertReference(t) {\n        const e = this.convertDocumentKey(t, this.firestore._databaseId);\n        return new Dn(this.firestore, /* converter= */ null, e);\n    }\n}\n\n/**\n * Reads the document referred to by the specified document reference.\n *\n * All documents are directly fetched from the server, even if the document was\n * previously read or modified. Recent modifications are only reflected in the\n * retrieved `DocumentSnapshot` if they have already been applied by the\n * backend. If the client is offline, the read fails. If you like to use\n * caching or see local modifications, please use the full Firestore SDK.\n *\n * @param reference - The reference of the document to fetch.\n * @returns A Promise resolved with a `DocumentSnapshot` containing the current\n * document contents.\n */ function Kr(t) {\n    const e = En((t = ct(t, Dn)).firestore), n = new Gr(t.firestore);\n    return gn(e, [ t._key ]).then((e => {\n        E(1 === e.length);\n        const r = e[0];\n        return new pr(t.firestore, n, t._key, r.isFoundDocument() ? r : null, t.converter);\n    }));\n}\n\n/**\n * Executes the query and returns the results as a {@link QuerySnapshot}.\n *\n * All queries are executed directly by the server, even if the the query was\n * previously executed. Recent modifications are only reflected in the retrieved\n * results if they have already been applied by the backend. If the client is\n * offline, the operation fails. To see previously cached result and local\n * modifications, use the full Firestore SDK.\n *\n * @param query - The `Query` to execute.\n * @returns A Promise that will be resolved with the results of the query.\n */ function Yr(t) {\n    !function(t) {\n        if (\"L\" /* LimitType.Last */ === t.limitType && 0 === t.explicitOrderBy.length) throw new U(k, \"limitToLast() queries require specifying at least one orderBy() clause\");\n    }((t = ct(t, Fn))._query);\n    const e = En(t.firestore), n = new Gr(t.firestore);\n    return _n(e, t._query).then((e => {\n        const r = e.map((e => new yr(t.firestore, n, e.key, e, t.converter)));\n        return \"L\" /* LimitType.Last */ === t._query.limitType && \n        // Limit to last queries reverse the orderBy constraint that was\n        // specified by the user. As such, we need to reverse the order of the\n        // results to return the documents in the expected order.\n        r.reverse(), new gr(t, r);\n    }));\n}\n\nfunction Hr(t, e, n) {\n    const r = Wr((t = ct(t, Dn)).converter, e, n), s = Jn(Hn(t.firestore), \"setDoc\", t._key, r, null !== t.converter, n);\n    return yn(En(t.firestore), [ s.toMutation(t._key, ke.none()) ]);\n}\n\nfunction Jr(t, e, n, ...r) {\n    const s = Hn((t = ct(t, Dn)).firestore);\n    // For Compat types, we have to \"extract\" the underlying types before\n    // performing validation.\n        let i;\n    i = \"string\" == typeof (e = l(e)) || e instanceof Ln ? ir(s, \"updateDoc\", t._key, e, n, r) : sr(s, \"updateDoc\", t._key, e);\n    return yn(En(t.firestore), [ i.toMutation(t._key, ke.exists(!0)) ]);\n}\n\n/**\n * Deletes the document referred to by the specified `DocumentReference`.\n *\n * The deletion will only be reflected in document reads that occur after the\n * returned promise resolves. If the client is offline, the\n * delete fails. If you would like to see local modifications or buffer writes\n * until the client is online, use the full Firestore SDK.\n *\n * @param reference - A reference to the document to delete.\n * @returns A `Promise` resolved once the document has been successfully\n * deleted from the backend.\n */ function Xr(t) {\n    return yn(En((t = ct(t, Dn)).firestore), [ new Ue(t._key, ke.none()) ]);\n}\n\n/**\n * Add a new document to specified `CollectionReference` with the given data,\n * assigning it a document ID automatically.\n *\n * The result of this write will only be reflected in document reads that occur\n * after the returned promise resolves. If the client is offline, the\n * write fails. If you would like to see local modifications or buffer writes\n * until the client is online, use the full Firestore SDK.\n *\n * @param reference - A reference to the collection to add this document to.\n * @param data - An Object containing the data for the new document.\n * @throws Error - If the provided input is not a valid Firestore document.\n * @returns A `Promise` resolved with a `DocumentReference` pointing to the\n * newly created document after it has been written to the backend.\n */ function Zr(t, e) {\n    const n = On(t = ct(t, xn)), r = Wr(t.converter, e), s = Jn(Hn(t.firestore), \"addDoc\", n._key, r, null !== n.converter, {});\n    return yn(En(t.firestore), [ s.toMutation(n._key, ke.exists(!1)) ]).then((() => n));\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Calculates the number of documents in the result set of the given query,\n * without actually downloading the documents.\n *\n * Using this function to count the documents is efficient because only the\n * final count, not the documents' data, is downloaded. This function can even\n * count the documents if the result set would be prohibitively large to\n * download entirely (e.g. thousands of documents).\n *\n * @param query - The query whose result set size to calculate.\n * @returns A Promise that will be resolved with the count; the count can be\n * retrieved from `snapshot.data().count`, where `snapshot` is the\n * `AggregateQuerySnapshot` to which the returned Promise resolves.\n */ function ts(t) {\n    return es(t, {\n        count: ss()\n    });\n}\n\n/**\n * Calculates the specified aggregations over the documents in the result\n * set of the given query, without actually downloading the documents.\n *\n * Using this function to perform aggregations is efficient because only the\n * final aggregation values, not the documents' data, is downloaded. This\n * function can even perform aggregations of the documents if the result set\n * would be prohibitively large to download entirely (e.g. thousands of documents).\n *\n * @param query The query whose result set to aggregate over.\n * @param aggregateSpec An `AggregateSpec` object that specifies the aggregates\n * to perform over the result set. The AggregateSpec specifies aliases for each\n * aggregate, which can be used to retrieve the aggregate result.\n * @example\n * ```typescript\n * const aggregateSnapshot = await getAggregate(query, {\n *   countOfDocs: count(),\n *   totalHours: sum('hours'),\n *   averageScore: average('score')\n * });\n *\n * const countOfDocs: number = aggregateSnapshot.data().countOfDocs;\n * const totalHours: number = aggregateSnapshot.data().totalHours;\n * const averageScore: number | null = aggregateSnapshot.data().averageScore;\n * ```\n * @internal TODO (sum/avg) remove when public\n */ function es(t, e) {\n    const n = ct(t.firestore, Tn), r = En(n), s = function(t, e) {\n        const n = [];\n        for (const r in t) Object.prototype.hasOwnProperty.call(t, r) && n.push(e(t[r], r, t));\n        return n;\n    }(e, ((t, e) => new vt(e, t._aggregateType, t._internalFieldPath)));\n    // Run the aggregation and convert the results\n    return vn(r, t._query, s).then((e => function(t, e, n) {\n        const r = new Gr(t);\n        return new Nn(e, r, n);\n    }\n    /**\n * Create an AggregateField object that can be used to compute the sum of\n * a specified field over a range of documents in the result set of a query.\n * @param field Specifies the field to sum across the result set.\n * @internal TODO (sum/avg) remove when public\n */ (n, t, e)));\n}\n\nfunction ns(t) {\n    return new $n(\"sum\", lr(\"sum\", t));\n}\n\n/**\n * Create an AggregateField object that can be used to compute the average of\n * a specified field over a range of documents in the result set of a query.\n * @param field Specifies the field to average across the result set.\n * @internal TODO (sum/avg) remove when public\n */ function rs(t) {\n    return new $n(\"avg\", lr(\"average\", t));\n}\n\n/**\n * Create an AggregateField object that can be used to compute the count of\n * documents in the result set of a query.\n * @internal TODO (sum/avg) remove when public\n */ function ss() {\n    return new $n(\"count\");\n}\n\n/**\n * Compares two 'AggregateField` instances for equality.\n *\n * @param left Compare this AggregateField to the `right`.\n * @param right Compare this AggregateField to the `left`.\n * @internal TODO (sum/avg) remove when public\n */ function is(t, e) {\n    var n, r;\n    return t instanceof $n && e instanceof $n && t._aggregateType === e._aggregateType && (null === (n = t._internalFieldPath) || void 0 === n ? void 0 : n.canonicalString()) === (null === (r = e._internalFieldPath) || void 0 === r ? void 0 : r.canonicalString());\n}\n\n/**\n * Compares two `AggregateQuerySnapshot` instances for equality.\n *\n * Two `AggregateQuerySnapshot` instances are considered \"equal\" if they have\n * underlying queries that compare equal, and the same data.\n *\n * @param left - The first `AggregateQuerySnapshot` to compare.\n * @param right - The second `AggregateQuerySnapshot` to compare.\n *\n * @returns `true` if the objects are \"equal\", as defined above, or `false`\n * otherwise.\n */ function os(t, e) {\n    return Cn(t.query, e.query) && f(t.data(), e.data());\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns a sentinel for use with {@link @firebase/firestore/lite#(updateDoc:1)} or\n * {@link @firebase/firestore/lite#(setDoc:1)} with `{merge: true}` to mark a field for deletion.\n */ function us() {\n    return new Xn(\"deleteField\");\n}\n\n/**\n * Returns a sentinel used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link @firebase/firestore/lite#(updateDoc:1)} to\n * include a server-generated timestamp in the written data.\n */ function cs() {\n    return new tr(\"serverTimestamp\");\n}\n\n/**\n * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link\n * @firebase/firestore/lite#(updateDoc:1)} that tells the server to union the given elements with any array\n * value that already exists on the server. Each specified element that doesn't\n * already exist in the array will be added to the end. If the field being\n * modified is not already an array it will be overwritten with an array\n * containing exactly the specified elements.\n *\n * @param elements - The elements to union into the array.\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\n * `updateDoc()`.\n */ function as(...t) {\n    // NOTE: We don't actually parse the data until it's used in set() or\n    // update() since we'd need the Firestore instance to do this.\n    return new er(\"arrayUnion\", t);\n}\n\n/**\n * Returns a special value that can be used with {@link (setDoc:1)} or {@link\n * updateDoc:1} that tells the server to remove the given elements from any\n * array value that already exists on the server. All instances of each element\n * specified will be removed from the array. If the field being modified is not\n * already an array it will be overwritten with an empty array.\n *\n * @param elements - The elements to remove from the array.\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\n * `updateDoc()`\n */ function hs(...t) {\n    // NOTE: We don't actually parse the data until it's used in set() or\n    // update() since we'd need the Firestore instance to do this.\n    return new nr(\"arrayRemove\", t);\n}\n\n/**\n * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link\n * @firebase/firestore/lite#(updateDoc:1)} that tells the server to increment the field's current value by\n * the given value.\n *\n * If either the operand or the current field value uses floating point\n * precision, all arithmetic follows IEEE 754 semantics. If both values are\n * integers, values outside of JavaScript's safe number range\n * (`Number.MIN_SAFE_INTEGER` to `Number.MAX_SAFE_INTEGER`) are also subject to\n * precision loss. Furthermore, once processed by the Firestore backend, all\n * integer operations are capped between -2^63 and 2^63-1.\n *\n * If the current field value is not of type `number`, or if the field does not\n * yet exist, the transformation sets the field to the given value.\n *\n * @param n - The value to increment by.\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\n * `updateDoc()`\n */ function ls(t) {\n    return new rr(\"increment\", t);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A write batch, used to perform multiple writes as a single atomic unit.\n *\n * A `WriteBatch` object can be acquired by calling {@link writeBatch}. It\n * provides methods for adding writes to the write batch. None of the writes\n * will be committed (or visible locally) until {@link WriteBatch.commit} is\n * called.\n */ class fs {\n    /** @hideconstructor */\n    constructor(t, e) {\n        this._firestore = t, this._commitHandler = e, this._mutations = [], this._committed = !1, \n        this._dataReader = Hn(t);\n    }\n    set(t, e, n) {\n        this._verifyNotCommitted();\n        const r = ds(t, this._firestore), s = Wr(r.converter, e, n), i = Jn(this._dataReader, \"WriteBatch.set\", r._key, s, null !== r.converter, n);\n        return this._mutations.push(i.toMutation(r._key, ke.none())), this;\n    }\n    update(t, e, n, ...r) {\n        this._verifyNotCommitted();\n        const s = ds(t, this._firestore);\n        // For Compat types, we have to \"extract\" the underlying types before\n        // performing validation.\n                let i;\n        return i = \"string\" == typeof (e = l(e)) || e instanceof Ln ? ir(this._dataReader, \"WriteBatch.update\", s._key, e, n, r) : sr(this._dataReader, \"WriteBatch.update\", s._key, e), \n        this._mutations.push(i.toMutation(s._key, ke.exists(!0))), this;\n    }\n    /**\n     * Deletes the document referred to by the provided {@link DocumentReference}.\n     *\n     * @param documentRef - A reference to the document to be deleted.\n     * @returns This `WriteBatch` instance. Used for chaining method calls.\n     */    delete(t) {\n        this._verifyNotCommitted();\n        const e = ds(t, this._firestore);\n        return this._mutations = this._mutations.concat(new Ue(e._key, ke.none())), this;\n    }\n    /**\n     * Commits all of the writes in this write batch as a single atomic unit.\n     *\n     * The result of these writes will only be reflected in document reads that\n     * occur after the returned promise resolves. If the client is offline, the\n     * write fails. If you would like to see local modifications or buffer writes\n     * until the client is online, use the full Firestore SDK.\n     *\n     * @returns A `Promise` resolved once all of the writes in the batch have been\n     * successfully written to the backend as an atomic unit (note that it won't\n     * resolve while you're offline).\n     */    commit() {\n        return this._verifyNotCommitted(), this._committed = !0, this._mutations.length > 0 ? this._commitHandler(this._mutations) : Promise.resolve();\n    }\n    _verifyNotCommitted() {\n        if (this._committed) throw new U(S, \"A write batch can no longer be used after commit() has been called.\");\n    }\n}\n\nfunction ds(t, e) {\n    if ((t = l(t)).firestore !== e) throw new U(P, \"Provided document reference is from a different Firestore instance.\");\n    return t;\n}\n\n/**\n * Creates a write batch, used for performing multiple writes as a single\n * atomic operation. The maximum number of writes allowed in a single WriteBatch\n * is 500.\n *\n * The result of these writes will only be reflected in document reads that\n * occur after the returned promise resolves. If the client is offline, the\n * write fails. If you would like to see local modifications or buffer writes\n * until the client is online, use the full Firestore SDK.\n *\n * @returns A `WriteBatch` that can be used to atomically execute multiple\n * writes.\n */ function ws(t) {\n    const e = En(t = ct(t, Tn));\n    return new fs(t, (t => yn(e, t)));\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Internal transaction object responsible for accumulating the mutations to\n * perform and the base versions for any documents read.\n */ class ms {\n    constructor(t) {\n        this.datastore = t, \n        // The version of each document that was read during this transaction.\n        this.readVersions = new Map, this.mutations = [], this.committed = !1, \n        /**\n         * A deferred usage error that occurred previously in this transaction that\n         * will cause the transaction to fail once it actually commits.\n         */\n        this.lastWriteError = null, \n        /**\n         * Set of documents that have been written in the transaction.\n         *\n         * When there's more than one write to the same key in a transaction, any\n         * writes after the first are handled differently.\n         */\n        this.writtenDocs = new Set;\n    }\n    async lookup(t) {\n        if (this.ensureCommitNotCalled(), this.mutations.length > 0) throw new U(P, \"Firestore transactions require all reads to be executed before all writes.\");\n        const e = await gn(this.datastore, t);\n        return e.forEach((t => this.recordVersion(t))), e;\n    }\n    set(t, e) {\n        this.write(e.toMutation(t, this.precondition(t))), this.writtenDocs.add(t.toString());\n    }\n    update(t, e) {\n        try {\n            this.write(e.toMutation(t, this.preconditionForUpdate(t)));\n        } catch (t) {\n            this.lastWriteError = t;\n        }\n        this.writtenDocs.add(t.toString());\n    }\n    delete(t) {\n        this.write(new Ue(t, this.precondition(t))), this.writtenDocs.add(t.toString());\n    }\n    async commit() {\n        if (this.ensureCommitNotCalled(), this.lastWriteError) throw this.lastWriteError;\n        const t = this.readVersions;\n        // For each mutation, note that the doc was written.\n                this.mutations.forEach((e => {\n            t.delete(e.key.toString());\n        })), \n        // For each document that was read but not written to, we want to perform\n        // a `verify` operation.\n        t.forEach(((t, e) => {\n            const n = rt.fromPath(e);\n            this.mutations.push(new je(n, this.precondition(n)));\n        })), await yn(this.datastore, this.mutations), this.committed = !0;\n    }\n    recordVersion(t) {\n        let e;\n        if (t.isFoundDocument()) e = t.version; else {\n            if (!t.isNoDocument()) throw b();\n            // Represent a deleted doc using SnapshotVersion.min().\n            e = le.min();\n        }\n        const n = this.readVersions.get(t.key.toString());\n        if (n) {\n            if (!e.isEqual(n)) \n            // This transaction will fail no matter what.\n            throw new U(q, \"Document version changed between two reads.\");\n        } else this.readVersions.set(t.key.toString(), e);\n    }\n    /**\n     * Returns the version of this document when it was read in this transaction,\n     * as a precondition, or no precondition if it was not read.\n     */    precondition(t) {\n        const e = this.readVersions.get(t.toString());\n        return !this.writtenDocs.has(t.toString()) && e ? e.isEqual(le.min()) ? ke.exists(!1) : ke.updateTime(e) : ke.none();\n    }\n    /**\n     * Returns the precondition for a document if the operation is an update.\n     */    preconditionForUpdate(t) {\n        const e = this.readVersions.get(t.toString());\n        // The first time a document is written, we want to take into account the\n        // read time and existence\n                if (!this.writtenDocs.has(t.toString()) && e) {\n            if (e.isEqual(le.min())) \n            // The document doesn't exist, so fail the transaction.\n            // This has to be validated locally because you can't send a\n            // precondition that a document does not exist without changing the\n            // semantics of the backend write to be an insert. This is the reverse\n            // of what we want, since we want to assert that the document doesn't\n            // exist but then send the update and have it fail. Since we can't\n            // express that to the backend, we have to validate locally.\n            // Note: this can change once we can send separate verify writes in the\n            // transaction.\n            throw new U(P, \"Can't update a document that doesn't exist.\");\n            // Document exists, base precondition on document update time.\n                        return ke.updateTime(e);\n        }\n        // Document was not read, so we just use the preconditions for a blind\n        // update.\n        return ke.exists(!0);\n    }\n    write(t) {\n        this.ensureCommitNotCalled(), this.mutations.push(t);\n    }\n    ensureCommitNotCalled() {}\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const ps = {\n    maxAttempts: 5\n};\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * TransactionRunner encapsulates the logic needed to run and retry transactions\n * with backoff.\n */\nclass ys {\n    constructor(t, e, n, r, s) {\n        this.asyncQueue = t, this.datastore = e, this.options = n, this.updateFunction = r, \n        this.deferred = s, this.yt = n.maxAttempts, this.gt = new mn(this.asyncQueue, \"transaction_retry\" /* TimerId.TransactionRetry */);\n    }\n    /** Runs the transaction and sets the result on deferred. */    run() {\n        this.yt -= 1, this._t();\n    }\n    _t() {\n        this.gt.K((async () => {\n            const t = new ms(this.datastore), e = this.vt(t);\n            e && e.then((e => {\n                this.asyncQueue.enqueueAndForget((() => t.commit().then((() => {\n                    this.deferred.resolve(e);\n                })).catch((t => {\n                    this.bt(t);\n                }))));\n            })).catch((t => {\n                this.bt(t);\n            }));\n        }));\n    }\n    vt(t) {\n        try {\n            const e = this.updateFunction(t);\n            return !dt(e) && e.catch && e.then ? e : (this.deferred.reject(Error(\"Transaction callback must return a Promise\")), \n            null);\n        } catch (t) {\n            // Do not retry errors thrown by user provided updateFunction.\n            return this.deferred.reject(t), null;\n        }\n    }\n    bt(t) {\n        this.yt > 0 && this.Et(t) ? (this.yt -= 1, this.asyncQueue.enqueueAndForget((() => (this._t(), \n        Promise.resolve())))) : this.deferred.reject(t);\n    }\n    Et(t) {\n        if (\"FirebaseError\" === t.name) {\n            // In transactions, the backend will fail outdated reads with FAILED_PRECONDITION and\n            // non-matching document versions with ABORTED. These errors should be retried.\n            const e = t.code;\n            return \"aborted\" === e || \"failed-precondition\" === e || \"already-exists\" === e || !\n            /**\n * Determines whether an error code represents a permanent error when received\n * in response to a non-write operation.\n *\n * See isPermanentWriteError for classifying write errors.\n */\n            function(t) {\n                switch (t) {\n                  default:\n                    return b();\n\n                  case A:\n                  case R:\n                  case V:\n                  case x:\n                  case C:\n                  case M:\n // Unauthenticated means something went wrong with our token and we need\n                    // to retry with new credentials which will happen automatically.\n                                      case F:\n                    return !1;\n\n                  case P:\n                  case $:\n                  case N:\n                  case D:\n                  case S:\n // Aborted might be retried in some scenarios, but that is dependant on\n                    // the context and should handled individually by the calling code.\n                    // See https://cloud.google.com/apis/design/errors.\n                                      case q:\n                  case O:\n                  case k:\n                  case L:\n                    return !0;\n                }\n            }(e);\n        }\n        return !1;\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** The Platform's 'document' implementation or null if not available. */ function gs() {\n    // `document` is not always available, e.g. in ReactNative and WebWorkers.\n    // eslint-disable-next-line no-restricted-globals\n    return \"undefined\" != typeof document ? document : null;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents an operation scheduled to be run in the future on an AsyncQueue.\n *\n * It is created via DelayedOperation.createAndSchedule().\n *\n * Supports cancellation (via cancel()) and early execution (via skipDelay()).\n *\n * Note: We implement `PromiseLike` instead of `Promise`, as the `Promise` type\n * in newer versions of TypeScript defines `finally`, which is not available in\n * IE.\n */ class _s {\n    constructor(t, e, n, r, s) {\n        this.asyncQueue = t, this.timerId = e, this.targetTimeMs = n, this.op = r, this.removalCallback = s, \n        this.deferred = new j, this.then = this.deferred.promise.then.bind(this.deferred.promise), \n        // It's normal for the deferred promise to be canceled (due to cancellation)\n        // and so we attach a dummy catch callback to avoid\n        // 'UnhandledPromiseRejectionWarning' log spam.\n        this.deferred.promise.catch((t => {}));\n    }\n    /**\n     * Creates and returns a DelayedOperation that has been scheduled to be\n     * executed on the provided asyncQueue after the provided delayMs.\n     *\n     * @param asyncQueue - The queue to schedule the operation on.\n     * @param id - A Timer ID identifying the type of operation this is.\n     * @param delayMs - The delay (ms) before the operation should be scheduled.\n     * @param op - The operation to run.\n     * @param removalCallback - A callback to be called synchronously once the\n     *   operation is executed or canceled, notifying the AsyncQueue to remove it\n     *   from its delayedOperations list.\n     *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and\n     *   the DelayedOperation class public.\n     */    static createAndSchedule(t, e, n, r, s) {\n        const i = Date.now() + n, o = new _s(t, e, i, r, s);\n        return o.start(n), o;\n    }\n    /**\n     * Starts the timer. This is called immediately after construction by\n     * createAndSchedule().\n     */    start(t) {\n        this.timerHandle = setTimeout((() => this.handleDelayElapsed()), t);\n    }\n    /**\n     * Queues the operation to run immediately (if it hasn't already been run or\n     * canceled).\n     */    skipDelay() {\n        return this.handleDelayElapsed();\n    }\n    /**\n     * Cancels the operation if it hasn't already been executed or canceled. The\n     * promise will be rejected.\n     *\n     * As long as the operation has not yet been run, calling cancel() provides a\n     * guarantee that the operation will not be run.\n     */    cancel(t) {\n        null !== this.timerHandle && (this.clearTimeout(), this.deferred.reject(new U(A, \"Operation cancelled\" + (t ? \": \" + t : \"\"))));\n    }\n    handleDelayElapsed() {\n        this.asyncQueue.enqueueAndForget((() => null !== this.timerHandle ? (this.clearTimeout(), \n        this.op().then((t => this.deferred.resolve(t)))) : Promise.resolve()));\n    }\n    clearTimeout() {\n        null !== this.timerHandle && (this.removalCallback(this), clearTimeout(this.timerHandle), \n        this.timerHandle = null);\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ class vs {\n    constructor() {\n        // The last promise in the queue.\n        this.It = Promise.resolve(), \n        // A list of retryable operations. Retryable operations are run in order and\n        // retried with backoff.\n        this.Tt = [], \n        // Is this AsyncQueue being shut down? Once it is set to true, it will not\n        // be changed again.\n        this.At = !1, \n        // Operations scheduled to be queued in the future. Operations are\n        // automatically removed after they are run or canceled.\n        this.Rt = [], \n        // visible for testing\n        this.Pt = null, \n        // Flag set while there's an outstanding AsyncQueue operation, used for\n        // assertion sanity-checks.\n        this.Vt = !1, \n        // Enabled during shutdown on Safari to prevent future access to IndexedDB.\n        this.$t = !1, \n        // List of TimerIds to fast-forward delays for.\n        this.Nt = [], \n        // Backoff timer used to schedule retries for retryable operations\n        this.gt = new mn(this, \"async_queue_retry\" /* TimerId.AsyncQueueRetry */), \n        // Visibility handler that triggers an immediate retry of all retryable\n        // operations. Meant to speed up recovery when we regain file system access\n        // after page comes into foreground.\n        this.Dt = () => {\n            const t = gs();\n            t && y(\"AsyncQueue\", \"Visibility state changed to \" + t.visibilityState), this.gt.H();\n        };\n        const t = gs();\n        t && \"function\" == typeof t.addEventListener && t.addEventListener(\"visibilitychange\", this.Dt);\n    }\n    get isShuttingDown() {\n        return this.At;\n    }\n    /**\n     * Adds a new operation to the queue without waiting for it to complete (i.e.\n     * we ignore the Promise result).\n     */    enqueueAndForget(t) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.enqueue(t);\n    }\n    enqueueAndForgetEvenWhileRestricted(t) {\n        this.Ft(), \n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.xt(t);\n    }\n    enterRestrictedMode(t) {\n        if (!this.At) {\n            this.At = !0, this.$t = t || !1;\n            const e = gs();\n            e && \"function\" == typeof e.removeEventListener && e.removeEventListener(\"visibilitychange\", this.Dt);\n        }\n    }\n    enqueue(t) {\n        if (this.Ft(), this.At) \n        // Return a Promise which never resolves.\n        return new Promise((() => {}));\n        // Create a deferred Promise that we can return to the callee. This\n        // allows us to return a \"hanging Promise\" only to the callee and still\n        // advance the queue even when the operation is not run.\n                const e = new j;\n        return this.xt((() => this.At && this.$t ? Promise.resolve() : (t().then(e.resolve, e.reject), \n        e.promise))).then((() => e.promise));\n    }\n    enqueueRetryable(t) {\n        this.enqueueAndForget((() => (this.Tt.push(t), this.St())));\n    }\n    /**\n     * Runs the next operation from the retryable queue. If the operation fails,\n     * reschedules with backoff.\n     */    async St() {\n        if (0 !== this.Tt.length) {\n            try {\n                await this.Tt[0](), this.Tt.shift(), this.gt.reset();\n            } catch (t) {\n                if (!\n                /**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n                /** Verifies whether `e` is an IndexedDbTransactionError. */\n                function(t) {\n                    // Use name equality, as instanceof checks on errors don't work with errors\n                    // that wrap other errors.\n                    return \"IndexedDbTransactionError\" === t.name;\n                }\n                /**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ (t)) throw t;\n // Failure will be handled by AsyncQueue\n                                y(\"AsyncQueue\", \"Operation failed with retryable error: \" + t);\n            }\n            this.Tt.length > 0 && \n            // If there are additional operations, we re-schedule `retryNextOp()`.\n            // This is necessary to run retryable operations that failed during\n            // their initial attempt since we don't know whether they are already\n            // enqueued. If, for example, `op1`, `op2`, `op3` are enqueued and `op1`\n            // needs to  be re-run, we will run `op1`, `op1`, `op2` using the\n            // already enqueued calls to `retryNextOp()`. `op3()` will then run in the\n            // call scheduled here.\n            // Since `backoffAndRun()` cancels an existing backoff and schedules a\n            // new backoff on every call, there is only ever a single additional\n            // operation in the queue.\n            this.gt.K((() => this.St()));\n        }\n    }\n    xt(t) {\n        const e = this.It.then((() => (this.Vt = !0, t().catch((t => {\n            this.Pt = t, this.Vt = !1;\n            const e = \n            /**\n * Chrome includes Error.message in Error.stack. Other browsers do not.\n * This returns expected output of message + stack when available.\n * @param error - Error or FirestoreError\n */\n            function(t) {\n                let e = t.message || \"\";\n                t.stack && (e = t.stack.includes(t.message) ? t.stack : t.message + \"\\n\" + t.stack);\n                return e;\n            }\n            /**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n            // TODO(mrschmidt) Consider using `BaseTransaction` as the base class in the\n            // legacy SDK.\n            /**\n * A reference to a transaction.\n *\n * The `Transaction` object passed to a transaction's `updateFunction` provides\n * the methods to read and write data within the transaction context. See\n * {@link runTransaction}.\n */ (t);\n            // Re-throw the error so that this.tail becomes a rejected Promise and\n            // all further attempts to chain (via .then) will just short-circuit\n            // and return the rejected Promise.\n            throw g(\"INTERNAL UNHANDLED ERROR: \", e), t;\n        })).then((t => (this.Vt = !1, t))))));\n        return this.It = e, e;\n    }\n    enqueueAfterDelay(t, e, n) {\n        this.Ft(), \n        // Fast-forward delays for timerIds that have been overriden.\n        this.Nt.indexOf(t) > -1 && (e = 0);\n        const r = _s.createAndSchedule(this, t, e, n, (t => this.qt(t)));\n        return this.Rt.push(r), r;\n    }\n    Ft() {\n        this.Pt && b();\n    }\n    verifyOperationInProgress() {}\n    /**\n     * Waits until all currently queued tasks are finished executing. Delayed\n     * operations are not run.\n     */    async Ot() {\n        // Operations in the queue prior to draining may have enqueued additional\n        // operations. Keep draining the queue until the tail is no longer advanced,\n        // which indicates that no more new operations were enqueued and that all\n        // operations were executed.\n        let t;\n        do {\n            t = this.It, await t;\n        } while (t !== this.It);\n    }\n    /**\n     * For Tests: Determine if a delayed operation with a particular TimerId\n     * exists.\n     */    kt(t) {\n        for (const e of this.Rt) if (e.timerId === t) return !0;\n        return !1;\n    }\n    /**\n     * For Tests: Runs some or all delayed operations early.\n     *\n     * @param lastTimerId - Delayed operations up to and including this TimerId\n     * will be drained. Pass TimerId.All to run all delayed operations.\n     * @returns a Promise that resolves once all operations have been run.\n     */    Ct(t) {\n        // Note that draining may generate more delayed ops, so we do that first.\n        return this.Ot().then((() => {\n            // Run ops in the same order they'd run if they ran naturally.\n            this.Rt.sort(((t, e) => t.targetTimeMs - e.targetTimeMs));\n            for (const e of this.Rt) if (e.skipDelay(), \"all\" /* TimerId.All */ !== t && e.timerId === t) break;\n            return this.Ot();\n        }));\n    }\n    /**\n     * For Tests: Skip all subsequent delays for a timer id.\n     */    Mt(t) {\n        this.Nt.push(t);\n    }\n    /** Called once a DelayedOperation is run or canceled. */    qt(t) {\n        // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.\n        const e = this.Rt.indexOf(t);\n        this.Rt.splice(e, 1);\n    }\n}\n\nclass bs {\n    /** @hideconstructor */\n    constructor(t, e) {\n        this._firestore = t, this._transaction = e, this._dataReader = Hn(t);\n    }\n    /**\n     * Reads the document referenced by the provided {@link DocumentReference}.\n     *\n     * @param documentRef - A reference to the document to be read.\n     * @returns A `DocumentSnapshot` with the read data.\n     */    get(t) {\n        const e = ds(t, this._firestore), n = new Gr(this._firestore);\n        return this._transaction.lookup([ e._key ]).then((t => {\n            if (!t || 1 !== t.length) return b();\n            const r = t[0];\n            if (r.isFoundDocument()) return new pr(this._firestore, n, r.key, r, e.converter);\n            if (r.isNoDocument()) return new pr(this._firestore, n, e._key, null, e.converter);\n            throw b();\n        }));\n    }\n    set(t, e, n) {\n        const r = ds(t, this._firestore), s = Wr(r.converter, e, n), i = Jn(this._dataReader, \"Transaction.set\", r._key, s, null !== r.converter, n);\n        return this._transaction.set(r._key, i), this;\n    }\n    update(t, e, n, ...r) {\n        const s = ds(t, this._firestore);\n        // For Compat types, we have to \"extract\" the underlying types before\n        // performing validation.\n                let i;\n        return i = \"string\" == typeof (e = l(e)) || e instanceof Ln ? ir(this._dataReader, \"Transaction.update\", s._key, e, n, r) : sr(this._dataReader, \"Transaction.update\", s._key, e), \n        this._transaction.update(s._key, i), this;\n    }\n    /**\n     * Deletes the document referred to by the provided {@link DocumentReference}.\n     *\n     * @param documentRef - A reference to the document to be deleted.\n     * @returns This `Transaction` instance. Used for chaining method calls.\n     */    delete(t) {\n        const e = ds(t, this._firestore);\n        return this._transaction.delete(e._key), this;\n    }\n}\n\n/**\n * Executes the given `updateFunction` and then attempts to commit the changes\n * applied within the transaction. If any document read within the transaction\n * has changed, Cloud Firestore retries the `updateFunction`. If it fails to\n * commit after 5 attempts, the transaction fails.\n *\n * The maximum number of writes allowed in a single transaction is 500.\n *\n * @param firestore - A reference to the Firestore database to run this\n * transaction against.\n * @param updateFunction - The function to execute within the transaction\n * context.\n * @param options - An options object to configure maximum number of attempts to\n * commit.\n * @returns If the transaction completed successfully or was explicitly aborted\n * (the `updateFunction` returned a failed promise), the promise returned by the\n * `updateFunction `is returned here. Otherwise, if the transaction failed, a\n * rejected promise with the corresponding failure error is returned.\n */ function Es(t, e, n) {\n    const r = En(t = ct(t, Tn)), s = Object.assign(Object.assign({}, ps), n);\n    !function(t) {\n        if (t.maxAttempts < 1) throw new U(P, \"Max attempts must be at least 1\");\n    }(s);\n    const i = new j;\n    return new ys(new vs, r, s, (n => e(new bs(t, n))), i).run(), i.promise;\n}\n\n/**\n * Firestore Lite\n *\n * @remarks Firestore Lite is a small online-only SDK that allows read\n * and write access to your Firestore database. All operations connect\n * directly to the backend, and `onSnapshot()` APIs are not supported.\n * @packageDocumentation\n */ !function(t) {\n    w = t;\n}(`${s}_lite`), n(new i(\"firestore/lite\", ((t, {instanceIdentifier: e, options: n}) => {\n    const r = t.getProvider(\"app\").getImmediate(), s = new Tn(new W(t.getProvider(\"auth-internal\")), new H(t.getProvider(\"app-check-internal\")), function(t, e) {\n        if (!Object.prototype.hasOwnProperty.apply(t.options, [ \"projectId\" ])) throw new U(P, '\"projectId\" not provided in firebase.initializeApp.');\n        return new X(t.options.projectId, e);\n    }\n    /**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ (r, e), r);\n    return n && s._setSettings(n), s;\n}), \"PUBLIC\").setMultipleInstances(!0)), \n// RUNTIME_ENV and BUILD_TARGET are replaced by real values during the compilation\nr(\"firestore-lite\", \"3.13.0\", \"\"), r(\"firestore-lite\", \"3.13.0\", \"__BUILD_TARGET__\");\n\nexport { $n as AggregateField, Nn as AggregateQuerySnapshot, Mn as Bytes, xn as CollectionReference, Dn as DocumentReference, pr as DocumentSnapshot, Ln as FieldPath, jn as FieldValue, Tn as Firestore, U as FirestoreError, Bn as GeoPoint, Fn as Query, Rr as QueryCompositeFilterConstraint, Er as QueryConstraint, yr as QueryDocumentSnapshot, kr as QueryEndAtConstraint, Tr as QueryFieldFilterConstraint, Dr as QueryLimitConstraint, $r as QueryOrderByConstraint, gr as QuerySnapshot, Sr as QueryStartAtConstraint, xt as Timestamp, bs as Transaction, fs as WriteBatch, Zr as addDoc, is as aggregateFieldEqual, os as aggregateQuerySnapshotEqual, Vr as and, hs as arrayRemove, as as arrayUnion, rs as average, Sn as collection, qn as collectionGroup, Pn as connectFirestoreEmulator, ss as count, Xr as deleteDoc, us as deleteField, On as doc, Un as documentId, Mr as endAt, Cr as endBefore, es as getAggregate, ts as getCount, Kr as getDoc, Yr as getDocs, Rn as getFirestore, ls as increment, An as initializeFirestore, Fr as limit, xr as limitToLast, Pr as or, Nr as orderBy, Ir as query, Cn as queryEqual, kn as refEqual, Es as runTransaction, cs as serverTimestamp, Hr as setDoc, p as setLogLevel, _r as snapshotEqual, Or as startAfter, qr as startAt, ns as sum, Vn as terminate, Jr as updateDoc, Ar as where, ws as writeBatch };\n//# sourceMappingURL=index.browser.esm2017.js.map\n"]},"metadata":{},"sourceType":"module"}